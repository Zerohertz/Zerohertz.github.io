<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Zerohertz</title>
    <link>https://zerohertz.github.io/</link>
    
    <atom:link href="https://zerohertz.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>#800a0a</description>
    <pubDate>Tue, 22 Dec 2020 07:34:43 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Introduction of HRV</title>
      <link>https://zerohertz.github.io/introduction-of-hrv/</link>
      <guid>https://zerohertz.github.io/introduction-of-hrv/</guid>
      <pubDate>Tue, 22 Dec 2020 05:58:04 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;심박동과 박동사이의 간격(R-R interval)은 안정을 취하고 있을 때에도 항상 변화하는데, 이것을 심박변동(Heart Rate Variability, HRV)이라고 한다. 일반적으로, 이러한 심장 박동 간의 변화는 안정 상태일수록 더 크고 복잡한 형태를 나타내며, 운동을 하거나 스트레스 상태인 경우 규칙적이고 일정한 형태를 나타낸다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;HRV 신호로부터 임상적인 해석을 유도하기 위해 심전도(ECG) 신호 측정&lt;/li&gt;
&lt;li&gt;측정하는 시간에 따라&lt;ul&gt;
&lt;li&gt;24시간 데이터를 이용하는 장기(long-term) 분석&lt;ul&gt;
&lt;li&gt;하루주기리듬(circadian rhythm)을 포함하여 많은 정보를 얻을 수 있음&lt;/li&gt;
&lt;li&gt;임상적 상황에서는 측정이 어려움&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;5분 또는 3분 데이터를 사용하는 단기(short-term) 분석&lt;ul&gt;
&lt;li&gt;순간적인 생리적 변화를 반영&lt;/li&gt;
&lt;li&gt;환자의 상태와 검사 환경을 제어하지 않을 경우 진단의 오류 가능성 존재&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HRV 측정 시간 및 방법은 비용대비 효과와 임상적 상황에 따라 적절한 선택 필요&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><blockquote><p>심박동과 박동사이의 간격(R-R interval)은 안정을 취하고 있을 때에도 항상 변화하는데, 이것을 심박변동(Heart Rate Variability, HRV)이라고 한다. 일반적으로, 이러한 심장 박동 간의 변화는 안정 상태일수록 더 크고 복잡한 형태를 나타내며, 운동을 하거나 스트레스 상태인 경우 규칙적이고 일정한 형태를 나타낸다.</p></blockquote><ul><li>HRV 신호로부터 임상적인 해석을 유도하기 위해 심전도(ECG) 신호 측정</li><li>측정하는 시간에 따라<ul><li>24시간 데이터를 이용하는 장기(long-term) 분석<ul><li>하루주기리듬(circadian rhythm)을 포함하여 많은 정보를 얻을 수 있음</li><li>임상적 상황에서는 측정이 어려움</li></ul></li><li>5분 또는 3분 데이터를 사용하는 단기(short-term) 분석<ul><li>순간적인 생리적 변화를 반영</li><li>환자의 상태와 검사 환경을 제어하지 않을 경우 진단의 오류 가능성 존재</li></ul></li></ul></li><li>HRV 측정 시간 및 방법은 비용대비 효과와 임상적 상황에 따라 적절한 선택 필요</li></ul><a id="more"></a><hr><h1 id="HRV-Signal"><a href="#HRV-Signal" class="headerlink" title="HRV Signal"></a>HRV Signal</h1><blockquote><p>HRV signal extraction from ECG signal</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/102859435-3ec3a580-446f-11eb-895c-8b85e1b9cfc6.png" alt="HRV signal extraction from ECG signal"></p><ul><li>HRV<ul><li>하나의 심장 주기로부터 다음 심장 주기 사이의 변이 측정</li><li>끊임없이 변화하는 심혈관계 제어 메커니즘에 있어 R-R 간격의 변동 특징을 관찰 및 심장박동의 변화 추이를 정량화</li></ul></li><li>Signal extraction process<ol><li>심전도 신호로부터 R 피크 검출</li><li>검출된 R-R 간격을 시계열 신호로 변환하여 시간축에 재배열</li></ol><ul><li>시간에 따라 변화하는 심박동 변화를 알 수 있음</li></ul></li><li>Condition Indicators of HRV<ul><li>Time domain analysis(시간 영역 해석)<ul><li>심박동의 평균치 변화나 표준편차와 같은 통계적이고 기초적 정보 제공</li><li>주파수 분석 방법이 도입되기 전에 일반적으로 사용된 방법</li><li>측정이 용이하며 많은 정보 제공</li></ul></li><li>Frequency domain analysis(주파수 영역 해석)<ul><li>HRV 파형을 분석하여 각 주파수 성분의 신호가 상대적으로 어떤 강도로 존재하는지 보는 방법</li><li>자율신경계의 교감신경과 부교감신경계의 길항적 활동 추정</li><li>대부분의 임상에서는 HF 대역에 대한 LF 대역의 강도를 교감신경과 부교감신경의 균형도로 해석</li></ul></li></ul></li></ul><hr><h1 id="Condition-Indicators-of-HRV"><a href="#Condition-Indicators-of-HRV" class="headerlink" title="Condition Indicators of HRV"></a>Condition Indicators of HRV</h1><ul><li>Time domain<ul><li>SDNN : Standard deviation of all NN intervals<ul><li>심혈관계의 안정도와 더불어 자율신경계의 신체에 대한 제어능력에 관한 정보를 제공하는 강력한 지표</li></ul></li><li>RMSSD : The square root of the mean of the sum of the squares of differences between adjacent NN intervals</li><li>SDSD : Standard deviation of differences between adjacent NN intervals</li><li>NN50 count : Number of pairs of adjacent NN intervals differing by more than 50ms in the entire recording</li><li>pNN50 : NN50 count divded by the total number of all NN intervals</li></ul></li><li>Frequency domain<ul><li>TP : 5min total power</li><li>VLF : Power in very low frequency range</li><li>LF : Power in low frequency range</li><li>HF : Power in high frequency range</li><li>LFnorm : LF power in normalized units</li><li>HFnorm : HF power in normalized units</li><li>LF/HF : Ratio LF {$ms^2$} / HF {$ms^2$}</li></ul></li></ul><table><thead><tr><th align="center">주기성분</th><th align="center">주파수 대역</th><th align="center">관계되는 신경계</th></tr></thead><tbody><tr><td align="center">VLF 성분</td><td align="center">0.003 ~ 0.05 Hz</td><td align="center">온도조절, 혈관운동, 레닌-엔지오텐신 조절계</td></tr><tr><td align="center">LF 성분</td><td align="center">0.05 ~ 0.15 Hz</td><td align="center">압력수용기 반사, 혈압조절계</td></tr><tr><td align="center">HF 성분</td><td align="center">0.15 ~ 0.40 Hz</td><td align="center">미주신경(부교감 신경)</td></tr></tbody></table>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/research/">Research</category>
      
      <category domain="https://zerohertz.github.io/categories/research/read-paper/">Read Paper</category>
      
      
      <category domain="https://zerohertz.github.io/tags/signal-processing/">Signal Processing</category>
      
      <category domain="https://zerohertz.github.io/tags/phm/">PHM</category>
      
      <category domain="https://zerohertz.github.io/tags/smart-data/">Smart data</category>
      
      <category domain="https://zerohertz.github.io/tags/statistics/">Statistics</category>
      
      <category domain="https://zerohertz.github.io/tags/sleep-apnea/">Sleep apnea</category>
      
      
      <comments>https://zerohertz.github.io/introduction-of-hrv/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>User Condition Monitoring Data Analysis Using Artificial Intelligence Technology</title>
      <link>https://zerohertz.github.io/user-condition-monitoring-data-analysis-using-artificial-intelligence-technology/</link>
      <guid>https://zerohertz.github.io/user-condition-monitoring-data-analysis-using-artificial-intelligence-technology/</guid>
      <pubDate>Mon, 21 Dec 2020 07:36:15 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;사용자 상태 측정 시스템&lt;ul&gt;
&lt;li&gt;전기적 측정&lt;ul&gt;
&lt;li&gt;뇌파&lt;/li&gt;
&lt;li&gt;심전도&lt;/li&gt;
&lt;li&gt;근전도&lt;/li&gt;
&lt;li&gt;안전도&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;움직임 및 행동 측정&lt;ul&gt;
&lt;li&gt;가속도 센서&lt;/li&gt;
&lt;li&gt;자이로 센서&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;심전도&lt;ul&gt;
&lt;li&gt;심장의 상태를 전기적으로 측정할 수 있음&lt;/li&gt;
&lt;li&gt;심전도 정보를 통해 사용자의 심장 상태 정보 및 자율신경계 반응을 얻을 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;가속도&lt;ul&gt;
&lt;li&gt;사용자의 행동 상태 정보를 모니터링&lt;/li&gt;
&lt;li&gt;일상생활 중의 움직임 정보를 얻을 수 있음&lt;/li&gt;
&lt;li&gt;모니터링을 통해 수면의 질을 평가하는데 많이 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;기존의 기술 &lt;ul&gt;
&lt;li&gt;대부분 특정 모델 기반 특징점 추출을 통해 이루어짐&lt;/li&gt;
&lt;li&gt;신호들의 정형성 및 선형성을 가정한 모델&lt;/li&gt;
&lt;li&gt;생체신호들이 가지고 있는 비정형성 및 비선형성의 특징을 반영하여 분석하기 어려움&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;생체신호 데이터로부터 모델을 설계하고 최적화하는 알고리즘 필요 - DNN 이용&lt;ul&gt;
&lt;li&gt;Deep ECGNet&lt;/li&gt;
&lt;li&gt;Deep ACTINet&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><ul><li>사용자 상태 측정 시스템<ul><li>전기적 측정<ul><li>뇌파</li><li>심전도</li><li>근전도</li><li>안전도</li></ul></li><li>움직임 및 행동 측정<ul><li>가속도 센서</li><li>자이로 센서</li></ul></li></ul></li><li>심전도<ul><li>심장의 상태를 전기적으로 측정할 수 있음</li><li>심전도 정보를 통해 사용자의 심장 상태 정보 및 자율신경계 반응을 얻을 수 있음</li></ul></li><li>가속도<ul><li>사용자의 행동 상태 정보를 모니터링</li><li>일상생활 중의 움직임 정보를 얻을 수 있음</li><li>모니터링을 통해 수면의 질을 평가하는데 많이 사용</li></ul></li><li>기존의 기술 <ul><li>대부분 특정 모델 기반 특징점 추출을 통해 이루어짐</li><li>신호들의 정형성 및 선형성을 가정한 모델</li><li>생체신호들이 가지고 있는 비정형성 및 비선형성의 특징을 반영하여 분석하기 어려움</li></ul></li><li>생체신호 데이터로부터 모델을 설계하고 최적화하는 알고리즘 필요 - DNN 이용<ul><li>Deep ECGNet</li><li>Deep ACTINet</li></ul></li></ul><a id="more"></a><hr><h1 id="Deep-Neural-Network-Algorithm"><a href="#Deep-Neural-Network-Algorithm" class="headerlink" title="Deep Neural Network Algorithm"></a>Deep Neural Network Algorithm</h1><ul><li>기존의 심전도 및 액티그라피 신호 분석<ul><li>대부분 모델 기반의 특징점 추출 알고리즘</li><li>기계 학습 분석을 통해 사용자의 상태를 최종 추정</li><li>고정된 모델 및 가정을 통해 분석이 이뤄짐</li><li>시간에 따라 지속적으로 특징이 변하는 생체신호 분석에 최적은 아님</li></ul></li><li>Deep Neural Network<ul><li>고정된 모델 및 가정에 기반하지 않고 데이터로부터 특징을 추출하여 분석함</li><li>입력 신호와 그 신호에 따른 상태를 딥러닝 네트워크 구조에 대입하고 최적화 기술을 활용하여 네트워크의 파라미터 값들을 찾아내어 최적의 모델을 데이터 자체로부터 유도하는 End-To-End 기술</li></ul></li></ul><h2 id="Deep-ECGNet"><a href="#Deep-ECGNet" class="headerlink" title="Deep ECGNet"></a>Deep ECGNet</h2><ul><li>심전도 신호의 특징점을 입력으로 받지 않고 심전도 데이터 자체 입력</li><li>입력 신호의 패턴을 딥러닝 구조 내에서 찾아내기 위하여 Convolution Neural Network(CNN) 레이어 사용<ul><li>필터 및 Pooling 레이어의 크기를 결정하기 위하여 심전도의 생리학적 특징을 바탕으로 설계해야 최적의 심전도 패턴 추출 성능을 기대할 수 있음</li></ul></li><li>CNN 구조를 통해 얻어낸 심전도 패턴 정보는 Recurrent Neural Network(RNN) 구조를 거쳐 시간에 따라 유사한 패턴이 나타나는 시계열 심전도 신호의 순차적 특징을 추출</li></ul><h2 id="Deep-ACTINet"><a href="#Deep-ACTINet" class="headerlink" title="Deep ACTINet"></a>Deep ACTINet</h2><ul><li>가속도 센서 데이터의 패턴을 추출하기 위해 네 개의 CNN 구조 설계</li><li>시계열의 순차적 패턴을 찾아내기 위해 RNN 구조 Long Short-Term Memory(LSTM) 적용</li></ul>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/research/">Research</category>
      
      <category domain="https://zerohertz.github.io/categories/research/read-paper/">Read Paper</category>
      
      
      <category domain="https://zerohertz.github.io/tags/machine-learning/">Machine Learning</category>
      
      <category domain="https://zerohertz.github.io/tags/signal-processing/">Signal Processing</category>
      
      <category domain="https://zerohertz.github.io/tags/phm/">PHM</category>
      
      <category domain="https://zerohertz.github.io/tags/smart-data/">Smart data</category>
      
      <category domain="https://zerohertz.github.io/tags/dnn/">DNN</category>
      
      <category domain="https://zerohertz.github.io/tags/statistics/">Statistics</category>
      
      <category domain="https://zerohertz.github.io/tags/sleep-apnea/">Sleep apnea</category>
      
      
      <comments>https://zerohertz.github.io/user-condition-monitoring-data-analysis-using-artificial-intelligence-technology/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Jupyter notebook in Raspberry Pi</title>
      <link>https://zerohertz.github.io/jupyter-notebook-in-raspberry-pi/</link>
      <guid>https://zerohertz.github.io/jupyter-notebook-in-raspberry-pi/</guid>
      <pubDate>Sat, 19 Sep 2020 03:38:28 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Raspberry-Pi-초기-설정&quot;&gt;&lt;a href=&quot;#Raspberry-Pi-초기-설정&quot; class=&quot;headerlink&quot; title=&quot;Raspberry Pi 초기 설정&quot;&gt;&lt;/a&gt;Raspberry Pi 초기 설정&lt;/h1&gt;&lt;figure class=&quot;highlight ps&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pi@raspberrypi:~ &lt;span class=&quot;variable&quot;&gt;$&lt;/span&gt; sudo apt&lt;span class=&quot;literal&quot;&gt;-get&lt;/span&gt; update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pi@raspberrypi:~ &lt;span class=&quot;variable&quot;&gt;$&lt;/span&gt; sudo apt&lt;span class=&quot;literal&quot;&gt;-get&lt;/span&gt; install python3&lt;span class=&quot;literal&quot;&gt;-pip&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-y&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pi@raspberrypi:~ &lt;span class=&quot;variable&quot;&gt;$&lt;/span&gt; sudo apt&lt;span class=&quot;literal&quot;&gt;-get&lt;/span&gt; update &lt;span class=&quot;literal&quot;&gt;-y&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pi@raspberrypi:~ &lt;span class=&quot;variable&quot;&gt;$&lt;/span&gt; sudo apt&lt;span class=&quot;literal&quot;&gt;-get&lt;/span&gt; install python3&lt;span class=&quot;literal&quot;&gt;-venv&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pi@raspberrypi:~ &lt;span class=&quot;variable&quot;&gt;$&lt;/span&gt; python3 &lt;span class=&quot;literal&quot;&gt;-m&lt;/span&gt; venv zerohertz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pi@raspberrypi:~ &lt;span class=&quot;variable&quot;&gt;$&lt;/span&gt; source ~/zerohertz/bin/activate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(zerohertz) pi@raspberrypi:~ &lt;span class=&quot;variable&quot;&gt;$&lt;/span&gt; pip install -&lt;span class=&quot;literal&quot;&gt;-upgrade&lt;/span&gt; pip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(zerohertz) pi@raspberrypi:~ &lt;span class=&quot;variable&quot;&gt;$&lt;/span&gt; pip install jupyter notebook&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(zerohertz) pi@raspberrypi:~ &lt;span class=&quot;variable&quot;&gt;$&lt;/span&gt; pip install ipykernel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(zerohertz) pi@raspberrypi:~ &lt;span class=&quot;variable&quot;&gt;$&lt;/span&gt; python &lt;span class=&quot;literal&quot;&gt;-m&lt;/span&gt; ipykernel install -&lt;span class=&quot;literal&quot;&gt;-user&lt;/span&gt; -&lt;span class=&quot;literal&quot;&gt;-name&lt;/span&gt;=zerohertz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(zerohertz) pi@raspberrypi:~ &lt;span class=&quot;variable&quot;&gt;$&lt;/span&gt; jupyter notebook -&lt;span class=&quot;literal&quot;&gt;-generate&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-config&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Raspberry-Pi-초기-설정"><a href="#Raspberry-Pi-초기-설정" class="headerlink" title="Raspberry Pi 초기 설정"></a>Raspberry Pi 초기 설정</h1><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ <span class="variable">$</span> sudo apt<span class="literal">-get</span> update</span><br><span class="line">pi@raspberrypi:~ <span class="variable">$</span> sudo apt<span class="literal">-get</span> install python3<span class="literal">-pip</span> <span class="literal">-y</span></span><br><span class="line">pi@raspberrypi:~ <span class="variable">$</span> sudo apt<span class="literal">-get</span> update <span class="literal">-y</span></span><br><span class="line">pi@raspberrypi:~ <span class="variable">$</span> sudo apt<span class="literal">-get</span> install python3<span class="literal">-venv</span></span><br><span class="line">pi@raspberrypi:~ <span class="variable">$</span> python3 <span class="literal">-m</span> venv zerohertz</span><br><span class="line">pi@raspberrypi:~ <span class="variable">$</span> source ~/zerohertz/bin/activate</span><br><span class="line">(zerohertz) pi@raspberrypi:~ <span class="variable">$</span> pip install -<span class="literal">-upgrade</span> pip</span><br><span class="line">(zerohertz) pi@raspberrypi:~ <span class="variable">$</span> pip install jupyter notebook</span><br><span class="line">(zerohertz) pi@raspberrypi:~ <span class="variable">$</span> pip install ipykernel</span><br><span class="line">(zerohertz) pi@raspberrypi:~ <span class="variable">$</span> python <span class="literal">-m</span> ipykernel install -<span class="literal">-user</span> -<span class="literal">-name</span>=zerohertz</span><br><span class="line">(zerohertz) pi@raspberrypi:~ <span class="variable">$</span> jupyter notebook -<span class="literal">-generate</span><span class="literal">-config</span></span><br></pre></td></tr></table></figure><a id="more"></a><hr><h1 id="Jupyter-notebook-초기-설정"><a href="#Jupyter-notebook-초기-설정" class="headerlink" title="Jupyter notebook 초기 설정"></a>Jupyter notebook 초기 설정</h1><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(zerohertz) pi@raspberrypi:~ <span class="variable">$</span> <span class="built_in">cd</span> .jupyter/</span><br><span class="line">(zerohertz) pi@raspberrypi:~/.jupyter <span class="variable">$</span> ipython</span><br><span class="line">Python <span class="number">3.7</span>.<span class="number">3</span> (default, Jul <span class="number">25</span> <span class="number">2020</span>, <span class="number">13</span>:<span class="number">03</span>:<span class="number">44</span>)</span><br><span class="line"><span class="built_in">Type</span> <span class="string">&#x27;copyright&#x27;</span>, <span class="string">&#x27;credits&#x27;</span> or <span class="string">&#x27;license&#x27;</span> <span class="keyword">for</span> more information</span><br><span class="line">IPython <span class="number">7.18</span>.<span class="number">1</span> -- An enhanced Interactive Python. <span class="built_in">Type</span> <span class="string">&#x27;?&#x27;</span> <span class="keyword">for</span> help.</span><br><span class="line"></span><br><span class="line"><span class="keyword">In</span> [<span class="number">1</span>]: from notebook.auth import passwd</span><br><span class="line"></span><br><span class="line"><span class="keyword">In</span> [<span class="number">2</span>]: passwd()</span><br><span class="line">Enter password:</span><br><span class="line">Verify password:</span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">&#x27;argon2:$argon2id$v=19$m=10240,t=10,p=8$m+aqEGBeyldGR0GXSWzrgA$WZwA4udVMOnjOX27aYJaBA&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">In</span> [<span class="number">3</span>]: <span class="keyword">exit</span>()</span><br><span class="line"></span><br><span class="line">(zerohertz) pi@raspberrypi:~/.jupyter <span class="variable">$</span> nano jupyter_notebook_config.py</span><br></pre></td></tr></table></figure><blockquote><p>nano 에디터를 통해 아래와 같이 수정한다.</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/93658730-32e3d400-fa79-11ea-80dd-ed5086acd002.png" alt="Jupyter"></p><blockquote><p>가상환경에서 deactivate 명령어로 나올 수 있다.</p></blockquote><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(zerohertz) pi@raspberrypi:~ <span class="variable">$</span> deactivate</span><br><span class="line">pi@raspberrypi:~ <span class="variable">$</span></span><br></pre></td></tr></table></figure><hr><h1 id="Jupyter-notebook-실행"><a href="#Jupyter-notebook-실행" class="headerlink" title="Jupyter notebook 실행"></a>Jupyter notebook 실행</h1><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ <span class="variable">$</span> source ~/zerohertz/bin/activate</span><br><span class="line">(zerohertz) pi@raspberrypi:~ <span class="variable">$</span> jupyter notebook</span><br></pre></td></tr></table></figure><blockquote><p>만약, 백그라운드에서 Jupyter notebook을 실행하고 싶다면 아래와 같이 실행한다.</p></blockquote><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ <span class="variable">$</span> source ~/zerohertz/bin/activate</span><br><span class="line">(zerohertz) pi@raspberrypi:~ <span class="variable">$</span> nohup jupyter notebook &amp;</span><br></pre></td></tr></table></figure><blockquote><p>종료 시, 아래와 같이 실행한다.</p></blockquote><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(zerohertz) pi@raspberrypi:~ <span class="variable">$</span> lsof nohup.out</span><br><span class="line">COMMAND    PID      USER   FD   <span class="built_in">TYPE</span> DEVICE SIZE/OFF   NODE NAME</span><br><span class="line">jupyter<span class="literal">-n</span> <span class="number">3008</span> zerohertz    <span class="number">1</span>w   REG  <span class="number">179</span>,<span class="number">2</span>     <span class="number">1310</span> <span class="number">401054</span> nohup.out</span><br><span class="line">jupyter<span class="literal">-n</span> <span class="number">3008</span> zerohertz    <span class="number">2</span>w   REG  <span class="number">179</span>,<span class="number">2</span>     <span class="number">1310</span> <span class="number">401054</span> nohup.out</span><br><span class="line">(zerohertz) pi@raspberrypi:~ <span class="variable">$</span> <span class="built_in">kill</span> <span class="literal">-9</span> <span class="number">3008</span>(PID)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/raspberrypi/">RaspberryPi</category>
      
      
      <category domain="https://zerohertz.github.io/tags/raspberrypi/">RaspberryPi</category>
      
      <category domain="https://zerohertz.github.io/tags/python/">Python</category>
      
      
      <comments>https://zerohertz.github.io/jupyter-notebook-in-raspberry-pi/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>라즈베리파이로 간단한 서버 만들기</title>
      <link>https://zerohertz.github.io/raspberry-pi-server/</link>
      <guid>https://zerohertz.github.io/raspberry-pi-server/</guid>
      <pubDate>Fri, 18 Sep 2020 11:29:40 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;RASPBERRY-PI-OS-설치&quot;&gt;&lt;a href=&quot;#RASPBERRY-PI-OS-설치&quot; class=&quot;headerlink&quot; title=&quot;RASPBERRY PI OS 설치&quot;&gt;&lt;/a&gt;RASPBERRY PI OS 설치&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.raspberrypi.org/downloads/&quot;&gt;RASPBERRY PI OS&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;위 사이트에서 프로그램을 받은 뒤, SD카드 연결 후 아래와 같이 WRITE하면 설치가 된다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/42334717/93593200-a096ee00-f9ee-11ea-9ea0-e0eb7fb979b4.png&quot; alt=&quot;Raspbian&quot;&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="RASPBERRY-PI-OS-설치"><a href="#RASPBERRY-PI-OS-설치" class="headerlink" title="RASPBERRY PI OS 설치"></a>RASPBERRY PI OS 설치</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmFzcGJlcnJ5cGkub3JnL2Rvd25sb2Fkcy8=">RASPBERRY PI OS<i class="fa fa-external-link-alt"></i></span></p><blockquote><p>위 사이트에서 프로그램을 받은 뒤, SD카드 연결 후 아래와 같이 WRITE하면 설치가 된다.</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/93593200-a096ee00-f9ee-11ea-9ea0-e0eb7fb979b4.png" alt="Raspbian"></p><a id="more"></a><hr><h1 id="ssh-연결-허용"><a href="#ssh-연결-허용" class="headerlink" title="ssh 연결 허용"></a>ssh 연결 허용</h1><blockquote><p>RASPBERRY PI OS는 기본적으로 ssh가 disable이므로 설정을 바꿔줘야 한다. SD카드의 최상위 디렉토리에 확장자가 없는 ssh라는 파일을 생성하면 ssh가 enable이 된다.</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/93593734-975a5100-f9ef-11ea-98c6-06172342eaad.png" alt="ssh"></p><blockquote><p>만약 WiFi를 통하여 라즈베리 파이를 이용할 예정이라면, 아래의 이름과 소스를 작성하여 최상위 디렉토리에 저장해야한다.</p></blockquote><figure class="highlight cpp"><figcaption><span>wpa_supplicant.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class="line">update_config=<span class="number">1</span></span><br><span class="line">network=&#123;</span><br><span class="line">    ssid=<span class="string">&quot;WiFi 이름&quot;</span></span><br><span class="line">    psk=<span class="string">&quot;WiFi 비밀번호&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="라즈베리-파이의-IP"><a href="#라즈베리-파이의-IP" class="headerlink" title="라즈베리 파이의 IP"></a>라즈베리 파이의 IP</h1><blockquote><p>라즈베리 파이에 연결된 공유기의 Gateway 주소로 접속 후, 라즈베리 파이의 IP를 알아낸다. Gateway는 아래의 코드를 입력하여 알 수 있다.</p></blockquote><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.css">            <link rel="stylesheet" href="//cdn.jsdelivr.net/npm/prismjs/themes/prism-tomorrow.css">            <script src="//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.js"></script>            <div id='zerohertz1' style='height: 30px'></div>            <script>        new GDemo('#zerohertz1')          .openApp('terminal', {minHeight: '30px', windowTitle: 'zerohertz@zerohertz: ~', promptString: 'zerohertz@zerohertz ~'})    .command(`route <span class="token keyword">get</span> default`, {onCompleteDelay: 300})        .respond(``)        .end();    </script><br/><br/><p><img src="https://user-images.githubusercontent.com/42334717/93594589-2025bc80-f9f1-11ea-869b-eecafaf3e4d8.png" alt="IP"></p><hr><h1 id="ssh-접속"><a href="#ssh-접속" class="headerlink" title="ssh 접속"></a>ssh 접속</h1><blockquote><p>위의 IP를 이용해 ssh로 접속할 수 있다.</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/93594705-4f3c2e00-f9f1-11ea-915d-cf68fa265a84.png" alt="ssh"></p><p><img src="https://user-images.githubusercontent.com/42334717/93594775-75fa6480-f9f1-11ea-9b75-73e182a4ef75.png" alt="ssh"></p><hr><h1 id="고정-IP-할당"><a href="#고정-IP-할당" class="headerlink" title="고정 IP 할당"></a>고정 IP 할당</h1><blockquote><p>WiFi 내에서 라즈베리 파이가 항상 같은 IP(192.168.123.123)를 갖도록 설정하였다.</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/93595293-71827b80-f9f2-11ea-9afd-218e8805b629.png" alt="IP_Config"></p><p><img src="https://user-images.githubusercontent.com/42334717/93595386-a098ed00-f9f2-11ea-9600-c2e1231ae1a0.png" alt="IP_Config"></p><blockquote><p>이후 공유기 자체의 IP를 고정 IP로 설정을 바꿔준다. 또한 포트포워딩을 통해 내부 포트는 22로, 외부 포트는 자유로 설정하고 IP는 위에서 라즈베리 파이에 할당한 IP를 기입한다.</p></blockquote><hr><h1 id="외부에서-ssh-접속"><a href="#외부에서-ssh-접속" class="headerlink" title="외부에서 ssh 접속"></a>외부에서 ssh 접속</h1><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.css">            <link rel="stylesheet" href="//cdn.jsdelivr.net/npm/prismjs/themes/prism-tomorrow.css">            <script src="//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.js"></script>            <div id='zerohertz2' style='height: 30px'></div>            <script>        new GDemo('#zerohertz2')          .openApp('terminal', {minHeight: '30px', windowTitle: 'zerohertz@zerohertz: ~', promptString: 'zerohertz@zerohertz ~'})    .command(`ssh pi@xxx.xxx.xxx.xxx<span class="token punctuation">(</span>고정IP<span class="token punctuation">)</span> <span class="token operator">-</span>p<span class="token punctuation">(</span>외부 포트<span class="token punctuation">)</span>`, {onCompleteDelay: 300})        .respond(``)        .end();    </script><br/><br/><blockquote><p>만약 외부 포트를 22로 할당해주었다면, -p를 제외하고 실행해도 무방하다. 만약 에러가 날 경우 아래의 소스를 사용하는 것을 권한다.</p></blockquote><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.css">            <link rel="stylesheet" href="//cdn.jsdelivr.net/npm/prismjs/themes/prism-tomorrow.css">            <script src="//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.js"></script>            <div id='zerohertz3' style='height: 30px'></div>            <script>        new GDemo('#zerohertz3')          .openApp('terminal', {minHeight: '30px', windowTitle: 'zerohertz@zerohertz: ~', promptString: 'zerohertz@zerohertz ~'})    .command(`ssh<span class="token operator">-</span>keygen <span class="token operator">-</span>R xxx.xxx.xxx.xxx<span class="token punctuation">(</span>IP<span class="token punctuation">)</span>`, {onCompleteDelay: 300})        .respond(``)        .end();    </script><br/><br/><hr><h1 id="사용자-생성-및-삭제"><a href="#사용자-생성-및-삭제" class="headerlink" title="사용자 생성 및 삭제"></a>사용자 생성 및 삭제</h1><blockquote><p>사용자 생성은 아래와 같이 진행하면 된다.</p></blockquote><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">pi@zerohertz<span class="literal">-pi</span>:~ <span class="variable">$</span> sudo passwd root</span><br><span class="line">New password:</span><br><span class="line">Retype new password:</span><br><span class="line">passwd: password updated successfully</span><br><span class="line">pi@zerohertz<span class="literal">-pi</span>:~ <span class="variable">$</span> sudo su</span><br><span class="line">root@zerohertz<span class="literal">-pi</span>:/home/pi<span class="comment"># adduser zerohertz</span></span><br><span class="line">Adding user `zerohertz<span class="string">&#x27; ...</span></span><br><span class="line"><span class="string">Adding new group `zerohertz&#x27;</span> (<span class="number">1001</span>) ...</span><br><span class="line">Adding new user `zerohertz<span class="string">&#x27; (1001) with group `zerohertz&#x27;</span> ...</span><br><span class="line">Creating home directory `/home/zerohertz<span class="string">&#x27; ...</span></span><br><span class="line"><span class="string">Copying files from `/etc/skel&#x27;</span> ...</span><br><span class="line">New password:</span><br><span class="line">Retype new password:</span><br><span class="line">passwd: password updated successfully</span><br><span class="line">Changing the user information <span class="keyword">for</span> zerohertz</span><br><span class="line">Enter the new value, or press ENTER <span class="keyword">for</span> the default</span><br><span class="line">Full Name []:</span><br><span class="line">Room Number []:</span><br><span class="line">Work Phone []:</span><br><span class="line">Home Phone []:</span><br><span class="line">Other []:</span><br><span class="line">Is the information correct? [<span class="type">Y</span>/<span class="type">n</span>] y</span><br><span class="line">root@zerohertz<span class="literal">-pi</span>:/home/pi<span class="comment"># sudo adduser zerohertz sudo</span></span><br><span class="line">Adding user `zerohertz<span class="string">&#x27; to group `sudo&#x27;</span> ...</span><br><span class="line">Adding user zerohertz to <span class="built_in">group</span> sudo</span><br><span class="line">Done.</span><br><span class="line">root@zerohertz<span class="literal">-pi</span>:/home/pi<span class="comment"># cat /etc/group | grep pi</span></span><br><span class="line">adm:x:<span class="number">4</span>:pi</span><br><span class="line">dialout:x:<span class="number">20</span>:pi</span><br><span class="line">cdrom:x:<span class="number">24</span>:pi</span><br><span class="line">sudo:x:<span class="number">27</span>:pi,zerohertz</span><br><span class="line">audio:x:<span class="number">29</span>:pi</span><br><span class="line">video:x:<span class="number">44</span>:pi</span><br><span class="line">plugdev:x:<span class="number">46</span>:pi</span><br><span class="line">games:x:<span class="number">60</span>:pi</span><br><span class="line">users:x:<span class="number">100</span>:pi</span><br><span class="line">input:x:<span class="number">105</span>:pi</span><br><span class="line">netdev:x:<span class="number">109</span>:pi</span><br><span class="line">pi:x:<span class="number">1000</span>:</span><br><span class="line">spi:x:<span class="number">999</span>:pi</span><br><span class="line">i2c:x:<span class="number">998</span>:pi</span><br><span class="line">gpio:x:<span class="number">997</span>:pi</span><br><span class="line">root@zerohertz<span class="literal">-pi</span>:/home/pi<span class="comment"># usermod -G adm,dialout,cdrom,sudo,audio,video,plugdev,games,users,input,netdev,spi,i2c,gpio zerohertz</span></span><br><span class="line">root@zerohertz<span class="literal">-pi</span>:/home/pi<span class="comment"># cat /etc/group | grep pi</span></span><br><span class="line">adm:x:<span class="number">4</span>:pi,zerohertz</span><br><span class="line">dialout:x:<span class="number">20</span>:pi,zerohertz</span><br><span class="line">cdrom:x:<span class="number">24</span>:pi,zerohertz</span><br><span class="line">sudo:x:<span class="number">27</span>:pi,zerohertz</span><br><span class="line">audio:x:<span class="number">29</span>:pi,zerohertz</span><br><span class="line">video:x:<span class="number">44</span>:pi,zerohertz</span><br><span class="line">plugdev:x:<span class="number">46</span>:pi,zerohertz</span><br><span class="line">games:x:<span class="number">60</span>:pi,zerohertz</span><br><span class="line">users:x:<span class="number">100</span>:pi,zerohertz</span><br><span class="line">input:x:<span class="number">105</span>:pi,zerohertz</span><br><span class="line">netdev:x:<span class="number">109</span>:pi,zerohertz</span><br><span class="line">pi:x:<span class="number">1000</span>:</span><br><span class="line">spi:x:<span class="number">999</span>:pi,zerohertz</span><br><span class="line">i2c:x:<span class="number">998</span>:pi,zerohertz</span><br><span class="line">gpio:x:<span class="number">997</span>:pi,zerohertz</span><br><span class="line">root@zerohertz<span class="literal">-pi</span>:/home/pi<span class="comment"># userdel -r -f pi</span></span><br><span class="line">userdel: user pi is currently used by <span class="keyword">process</span> <span class="number">539</span></span><br><span class="line">userdel: pi mail spool (/var/mail/pi) not found</span><br><span class="line">root@zerohertz<span class="literal">-pi</span>:/home/zerohertz<span class="comment"># su zerohertz</span></span><br><span class="line">zerohertz@zerohertz<span class="literal">-pi</span>:~ <span class="variable">$</span></span><br></pre></td></tr></table></figure><blockquote><p>위와 같이 새 사용자인 zerohertz로 로그인에 성공할 수 있음을 볼 수 있다. 또한, 새 사용자에게 모든 파일을 전송하고 싶다면 아래와 같이 실행하면 된다.</p></blockquote><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">zerohertz@zerohertz<span class="literal">-pi</span>:/home <span class="variable">$</span> sudo <span class="built_in">cp</span> <span class="literal">-a</span> pi/. zerohertz/</span><br><span class="line">zerohertz@zerohertz<span class="literal">-pi</span>:/home <span class="variable">$</span> <span class="built_in">ls</span></span><br><span class="line">pi  zerohertz</span><br><span class="line">zerohertz@zerohertz<span class="literal">-pi</span>:/home <span class="variable">$</span> <span class="built_in">cd</span> zerohertz/</span><br><span class="line">zerohertz@zerohertz<span class="literal">-pi</span>:~ <span class="variable">$</span> <span class="built_in">ls</span> <span class="literal">-al</span></span><br><span class="line">total <span class="number">68</span></span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">12</span> pi   pi   <span class="number">4096</span> Sep <span class="number">19</span> <span class="number">09</span>:<span class="number">36</span> .</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>  <span class="number">4</span> root root <span class="number">4096</span> Sep <span class="number">19</span> <span class="number">17</span>:<span class="number">32</span> ..</span><br><span class="line"><span class="literal">-rw</span>-------  <span class="number">1</span> pi   pi   <span class="number">1484</span> Sep <span class="number">19</span> <span class="number">17</span>:<span class="number">37</span> .bash_history</span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-<span class="literal">-r</span>--  <span class="number">1</span> pi   pi    <span class="number">220</span> Aug <span class="number">20</span> <span class="number">11</span>:<span class="number">31</span> .bash_logout</span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-<span class="literal">-r</span>--  <span class="number">1</span> pi   pi   <span class="number">3523</span> Aug <span class="number">20</span> <span class="number">11</span>:<span class="number">31</span> .bashrc</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>  <span class="number">2</span> pi   pi   <span class="number">4096</span> Aug <span class="number">20</span> <span class="number">11</span>:<span class="number">40</span> Bookshelf</span><br><span class="line">drwx------  <span class="number">3</span> pi   pi   <span class="number">4096</span> Sep <span class="number">19</span> <span class="number">04</span>:<span class="number">56</span> .cache</span><br><span class="line">drwx------  <span class="number">4</span> pi   pi   <span class="number">4096</span> Sep <span class="number">19</span> <span class="number">07</span>:<span class="number">56</span> .config</span><br><span class="line">drwx------  <span class="number">3</span> pi   pi   <span class="number">4096</span> Aug <span class="number">20</span> <span class="number">12</span>:<span class="number">09</span> .gnupg</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>  <span class="number">2</span> pi   pi   <span class="number">4096</span> Sep <span class="number">19</span> <span class="number">09</span>:<span class="number">36</span> .ipynb_checkpoints</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>  <span class="number">5</span> pi   pi   <span class="number">4096</span> Sep <span class="number">19</span> <span class="number">05</span>:<span class="number">01</span> .ipython</span><br><span class="line">drwx------  <span class="number">2</span> pi   pi   <span class="number">4096</span> Sep <span class="number">19</span> <span class="number">05</span>:<span class="number">09</span> .jupyter</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>  <span class="number">5</span> pi   pi   <span class="number">4096</span> Sep <span class="number">19</span> <span class="number">04</span>:<span class="number">56</span> .local</span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-<span class="literal">-r</span>--  <span class="number">1</span> pi   pi    <span class="number">807</span> Aug <span class="number">20</span> <span class="number">11</span>:<span class="number">31</span> .profile</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>  <span class="number">4</span> pi   pi   <span class="number">4096</span> Sep <span class="number">19</span> <span class="number">09</span>:<span class="number">35</span> python_tutorial</span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-<span class="literal">-r</span>--  <span class="number">1</span> pi   pi    <span class="number">180</span> Sep <span class="number">19</span> <span class="number">09</span>:<span class="number">32</span> .w<span class="built_in">get-hsts</span></span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>  <span class="number">7</span> pi   pi   <span class="number">4096</span> Sep <span class="number">19</span> <span class="number">04</span>:<span class="number">58</span> zerohertz</span><br><span class="line">zerohertz@zerohertz<span class="literal">-pi</span>:~ <span class="variable">$</span> <span class="built_in">cd</span> ..</span><br><span class="line">zerohertz@zerohertz<span class="literal">-pi</span>:/home <span class="variable">$</span> <span class="built_in">cd</span> pi</span><br><span class="line">zerohertz@zerohertz<span class="literal">-pi</span>:/home/pi <span class="variable">$</span> <span class="built_in">ls</span> <span class="literal">-al</span></span><br><span class="line">total <span class="number">68</span></span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">12</span> pi   pi   <span class="number">4096</span> Sep <span class="number">19</span> <span class="number">09</span>:<span class="number">36</span> .</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>  <span class="number">4</span> root root <span class="number">4096</span> Sep <span class="number">19</span> <span class="number">17</span>:<span class="number">32</span> ..</span><br><span class="line"><span class="literal">-rw</span>-------  <span class="number">1</span> pi   pi   <span class="number">1484</span> Sep <span class="number">19</span> <span class="number">17</span>:<span class="number">37</span> .bash_history</span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-<span class="literal">-r</span>--  <span class="number">1</span> pi   pi    <span class="number">220</span> Aug <span class="number">20</span> <span class="number">11</span>:<span class="number">31</span> .bash_logout</span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-<span class="literal">-r</span>--  <span class="number">1</span> pi   pi   <span class="number">3523</span> Aug <span class="number">20</span> <span class="number">11</span>:<span class="number">31</span> .bashrc</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>  <span class="number">2</span> pi   pi   <span class="number">4096</span> Aug <span class="number">20</span> <span class="number">11</span>:<span class="number">40</span> Bookshelf</span><br><span class="line">drwx------  <span class="number">3</span> pi   pi   <span class="number">4096</span> Sep <span class="number">19</span> <span class="number">04</span>:<span class="number">56</span> .cache</span><br><span class="line">drwx------  <span class="number">4</span> pi   pi   <span class="number">4096</span> Sep <span class="number">19</span> <span class="number">07</span>:<span class="number">56</span> .config</span><br><span class="line">drwx------  <span class="number">3</span> pi   pi   <span class="number">4096</span> Aug <span class="number">20</span> <span class="number">12</span>:<span class="number">09</span> .gnupg</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>  <span class="number">2</span> pi   pi   <span class="number">4096</span> Sep <span class="number">19</span> <span class="number">09</span>:<span class="number">36</span> .ipynb_checkpoints</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>  <span class="number">5</span> pi   pi   <span class="number">4096</span> Sep <span class="number">19</span> <span class="number">05</span>:<span class="number">01</span> .ipython</span><br><span class="line">drwx------  <span class="number">2</span> pi   pi   <span class="number">4096</span> Sep <span class="number">19</span> <span class="number">05</span>:<span class="number">09</span> .jupyter</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>  <span class="number">5</span> pi   pi   <span class="number">4096</span> Sep <span class="number">19</span> <span class="number">04</span>:<span class="number">56</span> .local</span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-<span class="literal">-r</span>--  <span class="number">1</span> pi   pi    <span class="number">807</span> Aug <span class="number">20</span> <span class="number">11</span>:<span class="number">31</span> .profile</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>  <span class="number">4</span> pi   pi   <span class="number">4096</span> Sep <span class="number">19</span> <span class="number">09</span>:<span class="number">35</span> python_tutorial</span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-<span class="literal">-r</span>--  <span class="number">1</span> pi   pi    <span class="number">180</span> Sep <span class="number">19</span> <span class="number">09</span>:<span class="number">32</span> .w<span class="built_in">get-hsts</span></span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>  <span class="number">7</span> pi   pi   <span class="number">4096</span> Sep <span class="number">19</span> <span class="number">04</span>:<span class="number">58</span> zerohertz</span><br></pre></td></tr></table></figure><blockquote><p>아래의 과정을 통해 sudo 명령어 사용 시, 비밀번호를 사용하지 않을 수 있다.</p></blockquote><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">zerohertz@zerohertz<span class="literal">-pi</span>:~ <span class="variable">$</span> sudo <span class="built_in">cp</span> /etc/sudoers.d/<span class="number">010</span>_pi<span class="literal">-nopasswd</span> /etc/sudoers.d/<span class="number">010</span>_zerohertz<span class="literal">-nopasswd</span></span><br><span class="line">zerohertz@zerohertz<span class="literal">-pi</span>:~ <span class="variable">$</span> sudo chmod u+w /etc/sudoers.d/<span class="number">010</span>_zerohertz<span class="literal">-nopasswd</span></span><br><span class="line">zerohertz@zerohertz<span class="literal">-pi</span>:~ <span class="variable">$</span> sudo nano /etc/sudoers.d/<span class="number">010</span>_zerohertz<span class="literal">-nopasswd</span></span><br><span class="line">zerohertz@zerohertz<span class="literal">-pi</span>:~ <span class="variable">$</span> sudo chmod u<span class="literal">-w</span> /etc/sudoers.d/<span class="number">010</span>_zerohertz<span class="literal">-nopasswd</span></span><br><span class="line">zerohertz@zerohertz<span class="literal">-pi</span>:~ <span class="variable">$</span> sudo <span class="built_in">rm</span> <span class="literal">-vf</span> /etc/sudoers.d/<span class="number">010</span>_pi<span class="literal">-nopasswd</span></span><br><span class="line">removed <span class="string">&#x27;/etc/sudoers.d/010_pi-nopasswd&#x27;</span></span><br></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmRhbHNvLm9yZy9yYXNwYmVycnktcGkvcmFzcGJlcnJ5LXBpLTQvNzg5MQ==">Reference1<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vSmVyZW15SWdsZWhhcnQvODQyNTFkOGI2NDA1ZWFhNjQwZDY1NDZiMmExYWU4YmM=">Reference2<i class="fa fa-external-link-alt"></i></span></p>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/raspberrypi/">RaspberryPi</category>
      
      
      <category domain="https://zerohertz.github.io/tags/raspberrypi/">RaspberryPi</category>
      
      
      <comments>https://zerohertz.github.io/raspberry-pi-server/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CAM and CNC</title>
      <link>https://zerohertz.github.io/cam-and-cnc/</link>
      <guid>https://zerohertz.github.io/cam-and-cnc/</guid>
      <pubDate>Wed, 02 Sep 2020 04:19:07 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;h2 id=&quot;유연생산시스템-FMS&quot;&gt;&lt;a href=&quot;#유연생산시스템-FMS&quot; class=&quot;headerlink&quot; title=&quot;유연생산시스템(FMS)&quot;&gt;&lt;/a&gt;유연생산시스템(FMS)&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;생산성과 유연성의 양립을 목적으로 한 시스템으로서, 가공, 반송, 자재의 착탈, 제어의 기능을 유기적으로 결합한 자동화된 생산시스템&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;FMS(Flexible Manufacturing System) : 기계와 외부적인 연결&lt;ul&gt;
&lt;li&gt;다양한 순서의 자동 재료흐름&lt;/li&gt;
&lt;li&gt;AGV(Automatic Guidied Vehicle), 산업용 Robot, Tooling, Pallet, Fixture&lt;/li&gt;
&lt;li&gt;공장무인화&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FMC(Flexible Manufacturing Cell) : 독자적으로 작동&lt;ul&gt;
&lt;li&gt;Machining center : 공작기계 내에서의 Pallet를 이용한 자동생산, 자동공구교환&lt;/li&gt;
&lt;li&gt;기계간 Pallet는 도움 필요&lt;/li&gt;
&lt;li&gt;40 ~ 800 부품&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FTL(Flexible Transfer Line) : 기계와 내부적인 연결&lt;ul&gt;
&lt;li&gt;자동재료 이송시스템, NC 공작기계, 자동헤드 교환장치&lt;/li&gt;
&lt;li&gt;직접적인 재료흐름, 공작물의 순환운동&lt;/li&gt;
&lt;li&gt;1,500 ~ 15,000&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;특성\종류&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Transfer Line(FTL)&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;FMS&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Standard-alone NC machines(FMC)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;생산량&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;상&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;중&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;하&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;제품종류/유연성&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;하&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;중&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;상&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><h2 id="유연생산시스템-FMS"><a href="#유연생산시스템-FMS" class="headerlink" title="유연생산시스템(FMS)"></a>유연생산시스템(FMS)</h2><blockquote><p>생산성과 유연성의 양립을 목적으로 한 시스템으로서, 가공, 반송, 자재의 착탈, 제어의 기능을 유기적으로 결합한 자동화된 생산시스템</p></blockquote><ul><li>FMS(Flexible Manufacturing System) : 기계와 외부적인 연결<ul><li>다양한 순서의 자동 재료흐름</li><li>AGV(Automatic Guidied Vehicle), 산업용 Robot, Tooling, Pallet, Fixture</li><li>공장무인화</li></ul></li><li>FMC(Flexible Manufacturing Cell) : 독자적으로 작동<ul><li>Machining center : 공작기계 내에서의 Pallet를 이용한 자동생산, 자동공구교환</li><li>기계간 Pallet는 도움 필요</li><li>40 ~ 800 부품</li></ul></li><li>FTL(Flexible Transfer Line) : 기계와 내부적인 연결<ul><li>자동재료 이송시스템, NC 공작기계, 자동헤드 교환장치</li><li>직접적인 재료흐름, 공작물의 순환운동</li><li>1,500 ~ 15,000</li></ul></li></ul><table><thead><tr><th align="center">특성\종류</th><th align="center">Transfer Line(FTL)</th><th align="center">FMS</th><th align="center">Standard-alone NC machines(FMC)</th></tr></thead><tbody><tr><td align="center">생산량</td><td align="center">상</td><td align="center">중</td><td align="center">하</td></tr><tr><td align="center">제품종류/유연성</td><td align="center">하</td><td align="center">중</td><td align="center">상</td></tr></tbody></table><a id="more"></a><ul><li>FMS 구성요소<ul><li>A group of workstations(CNC machine tools)<ul><li>Machining centers</li><li>Milling modules</li><li>Turning modules</li><li>Assembly workstations</li><li>Inspection stations</li><li>Sheet metal processing machines</li><li>Forging stations</li></ul></li><li>Automated material handling and storage systems<ul><li>AGV(Automated Guided Vehicle)</li><li>Tool transporter</li><li>Industrial robots</li><li>Pallet and fixture</li><li>Conveyor</li><li>Stacker crane</li></ul></li><li>Computer control systems<ul><li>Control of each workstation(CAM)</li><li>Distribution of control instructions to workstation</li><li>Production control</li><li>Traffic control</li><li>Work handling system monitoring</li><li>Tool control</li><li>System performance monitoring and reporting</li><li>Production planning and management</li></ul></li></ul></li></ul><h2 id="CAD-CAM"><a href="#CAD-CAM" class="headerlink" title="CAD / CAM"></a>CAD / CAM</h2><ul><li>CIM : Computer Integrated Manufacturing, 통합생산시스템<ul><li>공장 자동화 기술</li><li>Database(EDB, MDB)</li><li>통신기술</li><li>Web based</li></ul></li><li>FMS : Flexible Manufacturing System, 유연생산시스템<ul><li>공장 자동화 기술 : CAD / CAM, CNC machining</li></ul></li><li>CAD / CAM : Computer Aided Design and Computer Aided Manufacturing<ul><li>CAD : Computer를 이용한 부품의 모델링<ul><li>Wire frame : 제도용</li><li>Surface model : 금형가공용</li><li>Solid model : 해석용</li></ul></li><li>CAM : 기계가공을 위한 모델링과 CNC machine을 작동시키기 위한 NC code 생성<ul><li>Input : CAD</li><li>Output : NC code</li></ul></li><li>NC code<ul><li>NC 가공을 위한 표준화된 수치데이터 형식</li><li>Machining center의 Controller 명령문</li></ul></li><li>Part program : 가공을 위한 일련의 NC code</li></ul></li><li>CAD / CAM의 데이터 교환 : IGES, DXF, STEP</li><li>CAPP : Computer Aided Process Plan</li></ul><hr><h1 id="절삭-가공"><a href="#절삭-가공" class="headerlink" title="절삭 가공"></a>절삭 가공</h1><ul><li>절삭 가공이란?<ul><li>상대적으로 경도가 높은 날끝공구(Cutting Tool)를 사용하여 피가공물(Workpiece)의 불필요한 부분을 칩(Chip)의 형태로 제거하여 원하는 형태로 만드는 작업</li></ul></li><li>절삭 가공의 특징<ul><li>정밀 가공 가능</li><li>가공에 따른 소재 내부의 물성 변화 적음</li><li>다양한 형상가공(Flexible Process)</li><li>칩의 발생에 따른 재료 손실</li></ul></li><li>절삭 가공을 수행하기 위한 3요소<ul><li>공작기계</li><li>공구</li><li>공작물</li></ul></li></ul><h2 id="공작기계"><a href="#공작기계" class="headerlink" title="공작기계"></a>공작기계</h2><ul><li>공작기계란?<ul><li>기계를 만드는 기계</li><li>일반적으로는 절삭, 연삭 등과 같이 재료를 가공하여 원하는 형상으로 만들어 내는 기계</li></ul></li><li>공작기계의 분류<ul><li>비절삭 공작기계 : 주조, 소성가공, 용접 등과 같이 Chip을 발생하지 않고 가공</li><li>절삭 공작기계 : 선삭, 밀링, 연삭 등 Chip을 발생시키면서 가공</li><li>좁은 의미의 공작기계 : 절삭 공작기계를 의미</li></ul></li></ul><h3 id="공작기계의-분류"><a href="#공작기계의-분류" class="headerlink" title="공작기계의 분류"></a>공작기계의 분류</h3><ul><li>금속공작기계(Metal Cutting Machining Tool)<ul><li>범용 공작기계<ul><li>절삭공구 사용 기계<ul><li>고정공구 사용 기계<ul><li>선삭(Lathe)</li><li>형삭(Shaper)</li><li>평삭(Planer)</li></ul></li><li>회전공구 사용 기계<ul><li>밀링(Milling M/C)</li><li>드릴링(Drilling M/C)</li><li>보링(Boring M/C)</li><li>쏘잉(Sawing M/C)</li></ul></li></ul></li><li>연삭공구 사용 기계<ul><li>연삭(Grinding M/C)</li><li>호닝(Honing M/C)</li></ul></li></ul></li><li>전용 공작기계<ul><li>전용기(Special Purpose M/C)</li></ul></li><li>NC 공작기계<ul><li>NC Lathe</li><li>NC Drilling M/C</li><li>NC Milling M/C</li><li>NC Boring M/C</li><li>NC Grinding M/C</li><li>Machining Center</li></ul></li></ul></li><li>금속가공기계(Metal Forming Machine Tool)<ul><li>Press</li><li>Rolling M/C</li><li>Shearing M/C</li><li>Bending M/C</li></ul></li></ul><h3 id="NC-공작기계에-의한-가공의-특성"><a href="#NC-공작기계에-의한-가공의-특성" class="headerlink" title="NC 공작기계에 의한 가공의 특성"></a>NC 공작기계에 의한 가공의 특성</h3><ul><li>높은 공작 정밀도(Accuracy)<ul><li>주축 회전정밀도</li><li>안내면 직선 정밀도</li><li>온도변화에 대한 변형</li><li>진동</li><li>Etc.</li></ul></li><li>우수한 가공능률(Efficiency)<ul><li>절삭효율<ul><li>유효 절삭시간</li><li>준비시간</li><li>유휴시간</li></ul></li></ul></li><li>융통성(Flexibility)<ul><li>프로그램에 의한 가공의 자동화<ul><li>NC code</li><li>Controller</li></ul></li></ul></li><li>안전성(Safety)<ul><li>작업자에 대한 안정성</li><li>기계 자체의 안정성</li></ul></li></ul><h3 id="공작기계의-운동"><a href="#공작기계의-운동" class="headerlink" title="공작기계의 운동"></a>공작기계의 운동</h3><ul><li>공작기계의 가공 원칙<ul><li>절삭공구와 공작물간에 적절한 상대운동을 통하여 요구되는 형상 생성</li></ul></li><li>절삭운동과 이송운동 : 공작기계로부터 공급되는 상대운동<ul><li>절삭운동(Cutting motion, 주운동)<ul><li>기계가공 수행을 위한 총동력의 대부분을 사용</li><li>Chip의 길이 방향으로 공구가 움직이는 운동</li></ul></li><li>이송운동(Feed motion)<ul><li>가공물을 절삭 방향으로 피이드 하는 운동</li><li>기계가공 수행을 위해 필요한 총동력의 소량을 사용</li></ul></li></ul></li></ul><h3 id="좌표계의-정의"><a href="#좌표계의-정의" class="headerlink" title="좌표계의 정의"></a>좌표계의 정의</h3><ul><li>Z축 운동<ul><li>주운동을 제공하는 기계의 주축에 평행하게 정렬</li><li>주축이 없는 기계 : 공작물 지탱면에 수직으로 정렬</li><li>+Z 운동 : 공작물과 공구대 사이의 거리를 증가시키는 방향</li></ul></li><li>X축 운동<ul><li>공작물 지탱면에 수평하고 평행</li><li>주축이 없는 기계 : 주절삭 방향에 평행하고 주운동 방향이 플러스 방향</li><li>공작물이 회전하는 기계 : 횡이송대에 방사형이고 평행</li><li>+X 운동 : 공구가 공작물의 회전축으로부터 멀어졌을 때의 공구 운동으로 정의</li></ul></li><li>Y축 운동<ul><li>좌표계를 완성하는 방향</li></ul></li></ul><h2 id="선삭"><a href="#선삭" class="headerlink" title="선삭"></a>선삭</h2><h3 id="선반의-구성"><a href="#선반의-구성" class="headerlink" title="선반의 구성"></a>선반의 구성</h3><ul><li>주축에 고정한 공작물을 회전, 공구대에 설치된 공구에 절삭깊이와 이송을 주어 공작물을 절삭</li><li>베드 : 다른 구성요소들의 지지 역할</li><li>왕복대(Carriage) : 베드의 안내면(Slide way)을 따라 이동</li><li>주축대(Headstock) : 베드에 고정</li><li>정밀도에 중요한 요소<ul><li>주축 흔들림(주축 베어링)</li><li>이송운동의 정밀도(베드, Linear guide 정밀도)</li></ul></li></ul><p><img src="https://user-images.githubusercontent.com/42334717/93463236-724bdc80-f922-11ea-81c7-c1d8f6af10af.jpg" alt="Lathe"></p><h3 id="선삭의-절삭운동-Cutting-motion-in-lathe"><a href="#선삭의-절삭운동-Cutting-motion-in-lathe" class="headerlink" title="선삭의 절삭운동(Cutting motion in lathe)"></a>선삭의 절삭운동(Cutting motion in lathe)</h3><ul><li>주운동(Primary motion) : 공작기계의 주운동으로부터 야기되는 운동</li><li>이송운동(Feed motion) : 공작기계 이송운동으로 야기되는 운동</li><li>합 절삭 운동(Resultant motion) : 공구 주운동과 이송운동의 합</li></ul><h3 id="선삭공구-형상"><a href="#선삭공구-형상" class="headerlink" title="선삭공구 형상"></a>선삭공구 형상</h3><ul><li>$X_r$ : 주절삭날각(Major edge angle)</li><li>$a_c$ : 미변형 칩두께(Underformed chip thickness)<ul><li>$a_c=fsin(X_r)$</li></ul></li><li>$A_c$ : 한개의 철삭날에 의해 제거될 재료의 단면적(미절삭 칩 단면적, Cutting area)<ul><li>$A_c=fa_{p1}$</li></ul></li></ul><img width="684" alt="선삭공구 형상" src="https://user-images.githubusercontent.com/42334717/95684524-48d65600-0c2d-11eb-99b7-dfdd1fcefdc8.png"><h3 id="보링-Boring"><a href="#보링-Boring" class="headerlink" title="보링(Boring)"></a>보링(Boring)</h3><ul><li>Drilling 또는 주조 등에서 이미 뚫린 구멍을 확대하거나 내부를 완성하는 가공</li><li>선삭과 같음</li><li>정밀도 증가</li></ul><h2 id="Drilling"><a href="#Drilling" class="headerlink" title="Drilling"></a>Drilling</h2><ul><li>다인공구인 Drill을 회전시키면서 축방향으로 이송을 주어 주로 구멍가공을 수행하는 공작기계를 Drilling machine이라 함</li><li>Drilling machine의 크기는 가공할 수 있는 구멍의 최대지름 및 길이 또는 Column 내측에서 주축까지의 최대거리와 주축 하단에서 Table 상면까지의 최대거리로 표시</li></ul><h3 id="드릴에서의-절삭-Cutting-in-drilling"><a href="#드릴에서의-절삭-Cutting-in-drilling" class="headerlink" title="드릴에서의 절삭(Cutting in drilling)"></a>드릴에서의 절삭(Cutting in drilling)</h3><ul><li>미변형 칩두께(Undeformed chip thickness)<ul><li>$a_c=\frac{f}{2}sin\chi_r$</li><li>$\chi_r$ : 주절삭날</li></ul></li><li>가공시간(Cutting time)<ul><li>$t_m=\frac{l_w}{fn_t}$</li></ul></li><li>금속제거율(Material removal rate)<ul><li>$Z_w=\frac{\pi}{4}d_m^2v_f=\frac{\pi fd_m^2n_t}{4}$</li></ul></li></ul><h2 id="Milling"><a href="#Milling" class="headerlink" title="Milling"></a>Milling</h2><h3 id="밀링-머신의-구성과-분류"><a href="#밀링-머신의-구성과-분류" class="headerlink" title="밀링 머신의 구성과 분류"></a>밀링 머신의 구성과 분류</h3><p><img src="https://user-images.githubusercontent.com/42334717/95714441-31d24b00-0ca3-11eb-8429-92b44c3a40b5.png" alt="Milling"></p><ul><li>테이블(Table)</li><li>Saddle</li><li>Knee</li><li>Overarm</li><li>주축대(Head)</li></ul><h3 id="평면밀링에서의-기하학"><a href="#평면밀링에서의-기하학" class="headerlink" title="평면밀링에서의 기하학"></a>평면밀링에서의 기하학</h3><ul><li>공구 1회전당 공작물 이동거리(Feed per rotation)<ul><li>$f=\frac{v_f}{n_t}$</li><li>$v_f$ : 공작물 이송속도(Feed velocity)</li><li>$n_t$ : 절삭공구 회전속도(rpm)</li></ul></li><li>이송물림(Feed per tooth)<ul><li>$a_f=\frac{f}{N}$</li><li>$N$ : 날수</li></ul></li><li>최대 미변형 칩두께(Max. undeformed chip thickness)<ul><li>$a_{cmax}=\frac{v_fsin\theta}{Nn_t}$</li><li>$cos\theta=1-\frac{2a_e}{d_t}$</li><li>$d_t$ : 절삭공구 지름(Cutter diameter)</li><li>$a_e$ : 절삭깊이(Depth of cut)</li></ul></li></ul><h3 id="정면밀링-구조"><a href="#정면밀링-구조" class="headerlink" title="정면밀링 구조"></a>정면밀링 구조</h3><ul><li>회전당 이송량(Feed per revolution)<ul><li>$f=\frac{v_f}{n_t}$</li><li>$v_f$ : 공작물 이송속도(Work feed)</li><li>$n_t$ : rpm of tool</li></ul></li><li>미변형 칩두께(Undeformed chip thickness)<ul><li>$a_{cmax}=\frac{v_f}{Nn_t}$</li></ul></li></ul><h2 id="연삭"><a href="#연삭" class="headerlink" title="연삭"></a>연삭</h2><blockquote><p>연삭 숫돌 입자(Abrasive grain)의 절삭작용으로 가공물에서 미소 chip이 발생하도록하는 가공</p></blockquote><ul><li>장점<ul><li>연삭 숫돌 입자의 경도가 높기 때문에 경질재료의 가공에 용이</li><li>생성되는 chip이 매우 작아 높은 가공 정밀도</li></ul></li></ul><h2 id="NC-machining-center"><a href="#NC-machining-center" class="headerlink" title="NC machining center"></a>NC machining center</h2><h3 id="자동화의-종류"><a href="#자동화의-종류" class="headerlink" title="자동화의 종류"></a>자동화의 종류</h3><ul><li>고정 자동화(Fixed automation)<ul><li>장비의 자동화 : 초기 투자비가 많이 듦</li><li>유연성이 떨어짐</li><li>Transfer line, 자동선반(Automatic lathe), 전용장비</li></ul></li><li>프로그램 자동화<ul><li>프로그램 순차제어<ul><li>Timer, Relay, Controller, Limit switch</li><li>순차적인 자동화(PLC : Programmable Logic Controller)</li></ul></li><li>수치제어(Numerical Control)<ul><li>NC controller에 의한 동시제어 가능</li><li>수치에 의한 제어 가능</li><li>NC controller, AC, DC motor, Step motor에 의해서 작동, NC code에 의한 명령문 작성</li><li>CNC lathe, Machining center, Robot manipulator</li></ul></li></ul></li></ul><h3 id="NC-공작기계의-구조"><a href="#NC-공작기계의-구조" class="headerlink" title="NC 공작기계의 구조"></a>NC 공작기계의 구조</h3><ul><li>NC 공작기계의 구성<ul><li>명령 프로그램(NC code)</li><li>제어기(Controller)</li><li>공작기계</li></ul></li><li>명령 프로그램<ul><li>NC code : 알파벳과 수치로 구성, 공작기계의 모든 동작을 지시</li><li>공작기계와 무관한 Part programer에 의해서 작성</li><li>공구의 고동을 지시 : 위치, 속도, 가속도(G code)</li><li>기타 동작 지시 : 냉각제 공급, 자동공구교환(M-code)</li></ul></li><li>NC controller<ul><li>NC code를 받아들여서 공작기계의 다양한 행동을 제어하는 신호로 변환</li><li>Interpolation(보간기능 변환기)를 통하여 각 축의 모터구동을 위한 신호제작</li></ul></li><li>NC 공작기계<ul><li>스핀들과 테이블의 자동구동장치</li><li>다축동시제어, 자동공구교환기</li><li>NC lathe, Machining Center, NC drilling machine, Tapping, Boring</li></ul></li></ul><hr><h1 id="NC-Programming"><a href="#NC-Programming" class="headerlink" title="NC Programming"></a>NC Programming</h1><blockquote><p>NC Programming을 Part Programming이라고도 함</p></blockquote><ul><li>NC Programming의 과정<ul><li>설계된 도면(Part drawing)의 판독</li><li>NC 가공을 위한 공정계획(Process plan) 작성</li><li>NC code를 이용한 파트프로그램 작성</li><li>NC 프로그램을 NC 기계에 입력 또는 Network를 통해 전송</li></ul></li><li>NC 가공을 위한 공정계획<ul><li>제품도면에서 NC 가공부위를 선정</li><li>해당 부위의 가공에 적합한 NC 기계, 공구(절삭방법), 고정구 등의 선정</li><li>절삭가공 순서(출발점, 황삭/중삭/정삭계획 등) 결정</li><li>실제 NC 공구(Cutter, Adapter, Holder 등) 선정 및 수배</li><li>절삭조건(Spindle, Feed rate, Coolant 등) 결정</li></ul></li></ul><h2 id="기본-NC-코드-구성"><a href="#기본-NC-코드-구성" class="headerlink" title="기본 NC 코드 구성"></a>기본 NC 코드 구성</h2><ul><li>시작과 끝 : <code>%</code></li><li>주석(Comment) : <code>()</code></li><li>Word : <code>A~Z</code>(Address) + <code>수치</code></li><li>Block : Word로 이루어짐</li></ul><h2 id="NC-Address"><a href="#NC-Address" class="headerlink" title="NC Address"></a>NC Address</h2><table><thead><tr><th align="center">기능</th><th align="center">Address</th><th align="center">비고</th></tr></thead><tbody><tr><td align="center">프로그램 번호</td><td align="center">O</td><td align="center">프로그램 번호</td></tr><tr><td align="center">문번호</td><td align="center">N</td><td align="center">NC 블록 번호</td></tr><tr><td align="center">좌표값</td><td align="center">X, Y, Z</td><td align="center">좌표값</td></tr><tr><td align="center">좌표값</td><td align="center">A, B, C</td><td align="center">회전축의 각도</td></tr><tr><td align="center">좌표값</td><td align="center">I, J, K</td><td align="center">원호의 중심점 좌표</td></tr><tr><td align="center">좌표값</td><td align="center">R</td><td align="center">반지름</td></tr><tr><td align="center">준비기능</td><td align="center">G</td><td align="center">동작 모드 선정</td></tr><tr><td align="center">이송속도</td><td align="center">F</td><td align="center">이송속도(mm/min)</td></tr><tr><td align="center">주축 회전 속도</td><td align="center">S</td><td align="center">주축 회전 속도(rpm)</td></tr><tr><td align="center">공구 번호</td><td align="center">T</td><td align="center">공구 번호</td></tr><tr><td align="center">보조 기능</td><td align="center">M</td><td align="center">기계 제어 지령(다양한 보조 기능 수행)</td></tr><tr><td align="center">옵셋 레지스터 번호</td><td align="center">D, H</td><td align="center">옵셋 레지스터 번호</td></tr></tbody></table><h2 id="좌표계"><a href="#좌표계" class="headerlink" title="좌표계"></a>좌표계</h2><ol><li><code>Z축</code> : 주축 Spindle</li><li><code>X축</code> : 수평(작업자의 좌우)</li><li><code>Y축</code> : 오른손 법칙</li></ol><ul><li><code>+</code> : 공구와 공작물이 멀어지는 방향</li></ul><h3 id="공작물-좌표계"><a href="#공작물-좌표계" class="headerlink" title="공작물 좌표계"></a>공작물 좌표계</h3><ul><li>공작물이 회전하는 공작기계(선반)<ol><li><code>Z축</code> : 공작물의 회전축<ul><li><code>+</code> : 주축이 공구를 보는 방향</li></ul></li><li><code>X축</code> : 공구의 운동방향<ul><li><code>+</code> : 주축의 회전 중심 -&gt; 밀어지는 방향</li></ul></li><li><code>Y축</code> : <code>X축</code>, <code>Y축</code>이 직교<ul><li><code>+</code> : 오른손 좌표계</li></ul></li></ol></li><li>공구가 회전하는 공작기계(Milling, Drilling)<ol><li><code>Z축</code> : 주축(공구 회전축)<ul><li><code>+</code> : 공작물이 주축을 바라보는 방향</li></ul></li><li><code>X축</code><ul><li><code>Z축 수평</code> : 직교하는 수평축, <code>+ Y축</code>이 윗쪽이 되도록</li><li><code>Z축 수직</code> : 기계 앞에 서서 오른쪽이 <code>+ X축</code></li></ul></li></ol></li><li>공작기계 좌표축<ul><li>공구를 이동 : 표준 좌표계와 동일(<code>Z축</code>)</li><li>공작물을 이동 : 표준 좌표계와 반대방향(<code>X축</code>, <code>Y축</code>)</li></ul></li></ul><h3 id="좌표값-워드"><a href="#좌표값-워드" class="headerlink" title="좌표값 워드"></a>좌표값 워드</h3><ul><li>최소설정단위(BLU, Blank Length Unit, 장비의 정밀도) 입력 방식<ul><li>Ex) (x,y) = (50,23.4567), BLU = 0.001mm -&gt; <code>X50000 Y23457</code></li></ul></li><li>소수점 입력 방식<ul><li>Ex) <code>X50. Y23.457</code></li></ul></li></ul><h3 id="공구번호-및-절삭조건의-지정-T-F-S"><a href="#공구번호-및-절삭조건의-지정-T-F-S" class="headerlink" title="공구번호 및 절삭조건의 지정(T, F, S)"></a>공구번호 및 절삭조건의 지정(T, F, S)</h3><ul><li><code>T12</code> : 12번에 있는 공구(공구 매거진 Tool slot 번호)</li><li><code>F500</code> : 500mm/min(Feed rate, 이송속도)</li><li><code>S1500</code> : 1500rpm(Spindle speed, 주축 회전 속도)</li><li>Ex) <code>X50. Y23.457 F200 S1000</code></li></ul><h3 id="보조-기능-Miscellaneous-function-M-code"><a href="#보조-기능-Miscellaneous-function-M-code" class="headerlink" title="보조 기능(Miscellaneous function : M code)"></a>보조 기능(Miscellaneous function : M code)</h3><blockquote><p>NC 프로그램을 제어하고 기계의 ON/OFF 제어기를 제어</p></blockquote><table><thead><tr><th align="center">구분</th><th align="center">M code</th><th align="center">기능</th></tr></thead><tbody><tr><td align="center">프로그램 끝</td><td align="center">M00</td><td align="center">프로그램 정지(Stop)</td></tr><tr><td align="center">프로그램 끝</td><td align="center">M02, M30</td><td align="center">프로그램 완료 및 재수행 준비</td></tr><tr><td align="center">주축 회전</td><td align="center">M03</td><td align="center">시계방향으로 주축 회전(오른 공구)</td></tr><tr><td align="center">주축 회전</td><td align="center">M04</td><td align="center">반시계방향으로 주축 회전</td></tr><tr><td align="center">주축 회전</td><td align="center">M05</td><td align="center">주축 회전 정지</td></tr><tr><td align="center">공구 교환</td><td align="center">M06</td><td align="center">공구 교환 명령</td></tr><tr><td align="center">절삭유</td><td align="center">M08</td><td align="center">절삭유 ON</td></tr><tr><td align="center">절삭유</td><td align="center">M09</td><td align="center">절삭유 OFF</td></tr></tbody></table><h3 id="준비-기능-Preparatory-function-G-code"><a href="#준비-기능-Preparatory-function-G-code" class="headerlink" title="준비 기능(Preparatory function : G code)"></a>준비 기능(Preparatory function : G code)</h3><table><thead><tr><th align="center">구분</th><th align="center">G code</th><th align="center">기능</th></tr></thead><tbody><tr><td align="center">공구 이동 형태</td><td align="center">G00</td><td align="center">급속 이동(위치 제어)</td></tr><tr><td align="center">공구 이동 형태</td><td align="center">G01</td><td align="center">직선 보간(주어진 속도로 직선 이동)</td></tr><tr><td align="center">공구 이동 형태</td><td align="center">G02</td><td align="center">원호 보간 CW</td></tr><tr><td align="center">공구 이동 형태</td><td align="center">G03</td><td align="center">원호 보간 CCW</td></tr><tr><td align="center">공구 일시 정지(One-shot)</td><td align="center">G04</td><td align="center">지정된 시간만큼 공구 이동 정지</td></tr><tr><td align="center">평면 설정</td><td align="center">G17</td><td align="center">XY평면(2차원 밀링에서의 원호 보간 평면)</td></tr><tr><td align="center">평면 설정</td><td align="center">G18</td><td align="center">ZX평면(NC 선반에서의 원호 보간 평면)</td></tr><tr><td align="center">평면 설정</td><td align="center">G19</td><td align="center">YZ평면</td></tr><tr><td align="center">좌표값 입력 단위</td><td align="center">G20</td><td align="center">inch 입력</td></tr><tr><td align="center">좌표값 입력 단위</td><td align="center">G21</td><td align="center">mm 입력</td></tr><tr><td align="center">공구 반경 보정</td><td align="center">G40</td><td align="center">반경 보정 취소</td></tr><tr><td align="center">공구 반경 보정</td><td align="center">G41</td><td align="center">공구 진행 방향의 왼쪽으로 보정</td></tr><tr><td align="center">공구 반경 보정</td><td align="center">G42</td><td align="center">공구 진행 방향의 오른쪽으로 보정</td></tr><tr><td align="center">좌표값 입력 형태</td><td align="center">G90</td><td align="center">좌표의 절댓값 입력</td></tr><tr><td align="center">좌표값 입력 형태</td><td align="center">G91</td><td align="center">좌표의 증분값 입력</td></tr><tr><td align="center">공작물 좌표계 설정(One-shot)</td><td align="center">G92</td><td align="center">공작물 좌표계 설정</td></tr></tbody></table><blockquote><p>One-shot : 한 그룹 내에서는 어느 한 값이 항상 선택됨. 한 번 선택되면 다른 값으로 변경 전까지 계속 유효</p></blockquote><h2 id="3차원-자동-NC-프로그램의-장점"><a href="#3차원-자동-NC-프로그램의-장점" class="headerlink" title="3차원 자동 NC 프로그램의 장점"></a>3차원 자동 NC 프로그램의 장점</h2><ul><li>배우고 사용하기 쉬움</li><li>프로그램 작성 시간이 짧음</li><li>검증이 용이하고 오류가 적음</li><li>효율적인 NC 가공이 가능(효율적 경로 및 절삭 조건)</li></ul><hr><h1 id="자유곡면의-NC-절삭가공"><a href="#자유곡면의-NC-절삭가공" class="headerlink" title="자유곡면의 NC 절삭가공"></a>자유곡면의 NC 절삭가공</h1><blockquote><p>자유곡면 : 한 수식으로 정의할 수 없는 곡면</p></blockquote><h2 id="NC-가공에서의-고려사항"><a href="#NC-가공에서의-고려사항" class="headerlink" title="NC 가공에서의 고려사항"></a>NC 가공에서의 고려사항</h2><ul><li>황삭 계획 및 허용공차 지정(Roughing plan and allowance)</li><li>가공경로 계획 및 영역가공(Tool path planning)</li><li>직선보간길이 계산(Step length calculation)</li><li>경로간 간격 계산(Path interval calculation)</li><li>공구간섭 방지(Over-cut preotection)</li><li>절삭조건 지정(Cutting condition)</li></ul><h2 id="곡면의-NC-가공을-위한-미분기하학"><a href="#곡면의-NC-가공을-위한-미분기하학" class="headerlink" title="곡면의 NC 가공을 위한 미분기하학"></a>곡면의 NC 가공을 위한 미분기하학</h2><ul><li>곡면의 법선벡터와 CL 데이터 계산<ul><li>$n$ : 접점 $r_c$에서의 단위법선벡터</li><li>$r_u=\frac{\partial r(u,v)}{\partial u}$ : $u$방향의 접선벡터</li><li>$r_v=\frac{\partial r(u,v)}{\partial v}$ : $v$방향의 접선벡터</li><li>$r_L=r_c+R(n-u)$ : 공구의 위치를 나타내는 좌표값(CL data)</li></ul></li><li>Unit normal vector<ul><li>$n=\frac{r_u\times r_v}{|r_u\times r_v|}$</li></ul></li><li>곡선의 곡률(Curvature)<ul><li>$\vec r(t)=x(t)\vec{i}+y(t)\vec{j}+z(t)\vec{k}$</li><li>$\dot{\vec{r}}(t)=\frac{dr(t)}{dt}$(곡선의 접선벡터)</li><li>$\vec T=\frac{\dot{\vec r}}{|\dot{\vec r}|}$(단위 접선벡터)</li><li>$s(t)=\int^t_0|\dot{r}(t)|$(곡선의 길이)</li><li>$k=|\frac{dT}{ds}|$(곡률 : 단위접선벡터의 변화율)</li><li>$k=\frac{|\dot{\vec r}\times\ddot{\vec r}|}{\dot s^3}$<ul><li>$\dot{\vec r}=\frac{d\vec r}{dt},\ \ddot{\vec r}=\frac{d^2\vec r}{dt^2}$</li></ul></li><li>곡률반경(Radius curvature) = $\frac{1}{k}$</li></ul></li><li>곡면의 곡률<ul><li>$\vec u(t)=(u(t),v(t))$</li><li>곡면 $r(u, v)$에 놓인 3차원 곡선 $\vec r(t)$<ul><li>$\vec r=\frac{d\vec r}{dt}=\frac{\partial \vec r}{\partial u}\frac{\partial u}{\partial t}+\frac{\partial \vec r}{\partial v}\frac{\partial v}{\partial t}=\vec r_u\dot u+\vec r_v\dot v$</li></ul></li><li>곡선의 이송속도 $\dot s$<ul><li>$\dot s^2=|\dot{\vec r}|^2=(\dot{\vec r}\cdot\dot{\vec r})=\dot{\vec r}^T\cdot \dot{\vec r}=\dot u^TA^T\cdot A\dot u=\dot u^TG\dot u$</li><li>$G=A^TA$</li></ul></li></ul></li></ul><h2 id="황삭계획-및-가공허용공차지정"><a href="#황삭계획-및-가공허용공차지정" class="headerlink" title="황삭계획 및 가공허용공차지정"></a>황삭계획 및 가공허용공차지정</h2><ul><li>다각형 소재로부터 황삭 가공(From polygonal shape)<ul><li>적정 절삭깊이(Depth of cut)로 여러 차례 거쳐 황삭</li><li>몰드 금형의 캐비티나 코아 등 황삭 가공 시 이용</li><li>Many cutting required to be removed</li></ul></li><li>주조 금형을 통한 황삭 가공(From casted shape)<ul><li>최종 형상과 비슷한 소재로부터 황삭 가공</li><li>주조와 같은 공정을 이용하여 최종 형상과 비슷한 소재</li><li>From near shape, cutting process can be saved</li></ul></li></ul><h3 id="Round-endmill에-의한-가공"><a href="#Round-endmill에-의한-가공" class="headerlink" title="Round endmill에 의한 가공"></a>Round endmill에 의한 가공</h3><ul><li>Ball endmill<ul><li>절삭성 불량(Cutting is not good at the center)</li></ul></li><li>Round endmill<ul><li>밑날이 없음(No end cutting edge)</li><li>주로 R부 가공(Mainly cutting by R part)</li><li>상향절삭이 보장(CL 데이터 산출)</li></ul></li></ul><h2 id="가공계획-Cutter-path-planning-및-영역가공"><a href="#가공계획-Cutter-path-planning-및-영역가공" class="headerlink" title="가공계획(Cutter path planning) 및 영역가공"></a>가공계획(Cutter path planning) 및 영역가공</h2><ul><li>Parametric method<ul><li>Iso parametric curve를 따라 가공($u=u_1$ or $v=v_1$)</li><li>공구접촉점(CC point) 기준</li><li>수치적 계산 간단(사각형 곡면 가공시 적합)</li><li>보통 곡률이 큰 방향 가공</li></ul></li><li>Cartesian method<ul><li>매개변수형 곡면시 수직평면으로 절단 후 평면 안에서 가공</li><li>CC-Cartesian : 공구의 접촉점(CC point)을 기준으로 가공</li><li>CL-Cartesian : 공구상의 기준점(CL point)을 기준으로 가공</li><li>수치적 계산 복잡</li><li>비 매개변수형 곡면시 절단 불필요</li><li>불규칙한 형상에 적합</li></ul></li></ul><h2 id="직선보간-길이-계산"><a href="#직선보간-길이-계산" class="headerlink" title="직선보간 길이 계산"></a>직선보간 길이 계산</h2><p>$$<br>\delta_i\ : \ 내부공차<br>$$<br>$$<br>\delta_o\ : \ 외부공차<br>$$</p><ul><li>CL Cartesian의 경우 원호보간 가능(G03)</li><li>L이 작으면 접촉점의 수 증가 -&gt; 가공시간 증가</li></ul><h2 id="경로간-간격-Path-interval-의-계산"><a href="#경로간-간격-Path-interval-의-계산" class="headerlink" title="경로간 간격(Path interval)의 계산"></a>경로간 간격(Path interval)의 계산</h2><ul><li>$l_p\ :\ 경로간\ 간격$</li><li>$h\ :\ cusp높이$</li><li>$\rho\ :\ 곡면곡률반경$</li></ul><blockquote><p>$\rho\ 고려$</p><blockquote><p>$$l=\frac{|\rho|[4(R+\rho)^2(h+\rho)^2-(\rho^2+2R\rho+(h+\rho)^2)^2]^{\frac{1}{2}}}{(R+\rho)(h+\rho)}$$</p></blockquote></blockquote><ul><li>$\rho&gt;0\ :\ 볼록곡면$</li><li>$\rho&lt;0\ :\ 오목곡면$</li></ul><blockquote><p>if $\rho \simeq \infty$</p><blockquote><p>$$L=2\sqrt{h(2R-h)}$$</p></blockquote></blockquote><h2 id="공구-간섭-Over-cut-방지"><a href="#공구-간섭-Over-cut-방지" class="headerlink" title="공구 간섭(Over cut) 방지"></a>공구 간섭(Over cut) 방지</h2><ul><li>오목한 곡면 부위의 곡률 반경이 공구 반경보다 작을 때 발생(Over cut)</li><li>공구 간섭 방지 후 Under cut 발생<ul><li>작은 반경의 Ball end mill 가공 또는 방전가공, 사상가공</li></ul></li><li>CL data : 곡면을 공구 반경만큼 Offset 시킨 곡면이 꼬이는 경우 간섭 발생</li><li>Under cut과 Over cut을 동시에 방지 : 사용 공구반경을 최소 곡률반경보다 작게(R &lt; 1/Km)</li><li>복합곡면의 경우 곡면이 만나는 부위에서 항상 공구 간섭 발생<ul><li>CAD/CAM 구입 시 공구간섭현상의 처리능력 평가 필요</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/mechanical-engineering/">Mechanical Engineering</category>
      
      
      <category domain="https://zerohertz.github.io/tags/mechanical-engineering/">Mechanical Engineering</category>
      
      
      <comments>https://zerohertz.github.io/cam-and-cnc/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Political science</title>
      <link>https://zerohertz.github.io/political-science/</link>
      <guid>https://zerohertz.github.io/political-science/</guid>
      <pubDate>Wed, 02 Sep 2020 04:18:06 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Politics-and-Political-Science&quot;&gt;&lt;a href=&quot;#Politics-and-Political-Science&quot; class=&quot;headerlink&quot; title=&quot;Politics and Political Science&quot;&gt;&lt;/a&gt;Politics and Political Science&lt;/h1&gt;&lt;h2 id=&quot;인간-생활의-본질&quot;&gt;&lt;a href=&quot;#인간-생활의-본질&quot; class=&quot;headerlink&quot; title=&quot;인간 생활의 본질&quot;&gt;&lt;/a&gt;인간 생활의 본질&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Aristotle : 인간은 정치적 동물&lt;ul&gt;
&lt;li&gt;정치는 인간사회에 반드시 필요하고 인간사회에서만 가능한 현상&lt;/li&gt;
&lt;li&gt;정치적 동물인 인간의 사회에는 반드시 권력 발생&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;B. Russell : 인간의 생활현상은 3가지 투쟁의 연속&lt;ul&gt;
&lt;li&gt;인간과 자연의 투쟁 -&amp;gt; 자연과학, 물질문명 발달&lt;/li&gt;
&lt;li&gt;인간과 인간 자신과의 내부 투쟁 -&amp;gt; 정신문화 발달&lt;/li&gt;
&lt;li&gt;인간과 다른 인간과의 투쟁 -&amp;gt; 정치현상 발생&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Politics-and-Political-Science"><a href="#Politics-and-Political-Science" class="headerlink" title="Politics and Political Science"></a>Politics and Political Science</h1><h2 id="인간-생활의-본질"><a href="#인간-생활의-본질" class="headerlink" title="인간 생활의 본질"></a>인간 생활의 본질</h2><ul><li>Aristotle : 인간은 정치적 동물<ul><li>정치는 인간사회에 반드시 필요하고 인간사회에서만 가능한 현상</li><li>정치적 동물인 인간의 사회에는 반드시 권력 발생</li></ul></li><li>B. Russell : 인간의 생활현상은 3가지 투쟁의 연속<ul><li>인간과 자연의 투쟁 -&gt; 자연과학, 물질문명 발달</li><li>인간과 인간 자신과의 내부 투쟁 -&gt; 정신문화 발달</li><li>인간과 다른 인간과의 투쟁 -&gt; 정치현상 발생</li></ul></li></ul><a id="more"></a><h2 id="정치는-왜-필요한가"><a href="#정치는-왜-필요한가" class="headerlink" title="정치는 왜 필요한가?"></a>정치는 왜 필요한가?</h2><blockquote><p>“이기적인 인간의 사회에 왜 질서 있는 사회가 창조, 유지, 변화되는가?”, T. Hobbes</p></blockquote><ul><li>사회를 존속</li><li>반사회적 행위를 통제하여 사회질서 유지</li><li>모든 사람이 갈망하는 이상사회로 진보</li></ul><blockquote><p>정치는 구성원이 현실에서 직면하는 공통의 문제를 해결하고, 좀 더 이상적인 사회를 창조하는 능동적인 집단 행위. 특히 집단행위에는 지도자의 통합 능력, 방향 제시 능력이 중요하게 작용한다.</p></blockquote><h2 id="정치의-세-가지-측면"><a href="#정치의-세-가지-측면" class="headerlink" title="정치의 세 가지 측면"></a>정치의 세 가지 측면</h2><ul><li>정치는 집단 내부 또는 집단 사이에서 발생하는 행위</li><li>집단에 영향을 미치는 문제에 대한 공동 결정</li><li>집단 구성원에 대한 구속력, 복종, 강제</li></ul><blockquote><p>정치는 전체 공동체에 영향을 미치는 결정을 내리고, 그 결정을 집행하는 행위 또는 과정</p></blockquote><h2 id="정치에-대한-다양한-생각들"><a href="#정치에-대한-다양한-생각들" class="headerlink" title="정치에 대한 다양한 생각들"></a>정치에 대한 다양한 생각들</h2><ul><li>정치는 시대에 따라, 공간에 따라 달리 이해되어왔으며 앞으로도 그럴 것이다</li><li>정치는 생물이다</li><li>자기보존(Self-preservation) : 시대에 따른 정치 개념의 차이<ul><li>근대 : 개인의 생명, 자유, 재산이라는 기본권</li><li>국제관계 : 국가의 자기보존, 생존은 곧 주권의 문제</li><li>냉전 시대의 자기보존 주체는 진영(사회주의, 자본주의)</li></ul></li></ul><h3 id="고대"><a href="#고대" class="headerlink" title="고대"></a>고대</h3><ul><li>서양<ul><li>Plato : 인간 영혼의 최고선을 동시공동체(Polis)안에서 실현시키는 것</li><li>Aristotle : 정치적 동물인 인간이 사회 전체(Polis)의 선을 실현시키는 것</li></ul></li><li>동양<ul><li>공자 : 정자정야(바르게 잡는 것)</li><li>맹자 : 정치의 본질은 백성을 위하는 것</li><li>한비자 : 법치에 기반을 둔 군주의 다스림과 군주의 통치권력 강조</li></ul></li></ul><h3 id="르네상스"><a href="#르네상스" class="headerlink" title="르네상스"></a>르네상스</h3><ul><li>N. Machiavelli<ul><li>정치는 권력을 둘러싼 대립과 투쟁</li><li>종교나 윤리로부터 정치 분리</li></ul></li></ul><blockquote><p>갈등의 해소를 통해 정치 안정을 유지하는 길만이 민족의 생존과 자유를 보장하는 길</p></blockquote><h3 id="근대"><a href="#근대" class="headerlink" title="근대"></a>근대</h3><ul><li>사회계약론<ul><li>‘사회나 국가는 자연 상태의 개인이 맺는 계약을 통해 창출된다’라는 사상의 큰 틀을 공유</li><li>T. Hobbes : 강력한 지배자의 통치를 통하여 질서를 유지하고 개인의 생명과 재산을 보존하는 일</li><li>J. Locke : 개개인의 자유를 확보하는 활동</li></ul></li></ul><blockquote><p>근대 부르주아 계급은 자신들의 기본권(개인의 자유)을 유지하기 위한 투쟁 전개</p><blockquote><p>국가를 대변하는 귀족계급과 대립</p></blockquote></blockquote><h3 id="현대"><a href="#현대" class="headerlink" title="현대"></a>현대</h3><ul><li>David Easton<ul><li>사회의 (희소한) 가치를 권위적으로 배분하는 것</li></ul></li><li>Harold Lasswell<ul><li>누가 무엇을 언제 그리고 어떻게 얻는가?</li><li>Who gets what, when and how?</li></ul></li></ul><h2 id="정치의-두-얼굴-Janus-faced"><a href="#정치의-두-얼굴-Janus-faced" class="headerlink" title="정치의 두 얼굴(Janus-faced)"></a>정치의 두 얼굴(Janus-faced)</h2><ul><li>경쟁지향적 정치 개념<ul><li>갈등 해소로서의 정치(Politics as conflict-resolution)</li><li>외형적으로 조화를 강조하는 것 같지만, 대립과 경쟁의 항구성을 강조</li><li>인간 공동의 삶, 공공활동 그 자체가 정치의 영역</li><li>인간은 정치를 통해서 인간다운 삶 실현 가능</li><li>정치는 공동의 활동</li><li>정치는 권력현상</li><li>대립, 갈등, 분열, 논쟁, 분투</li></ul></li><li>조화지향적 정치 개념<ul><li>공동체형성으로서의 정치(Politics as community-building)</li><li>정치에서 갈등, 대립, 투쟁, 분열 등의 요소를 약화시키거나 제거하는데 관심</li><li>국가에 관련되는 일이 정치의 영역이라는 고전적 정의와 관련</li><li>정치는 통치기술(관리, 행정, 정부의 활동)</li><li>정치는 타협과 합의</li><li>조화, 합의, 타협, 관리, 통합</li></ul></li></ul><h2 id="정치학-Political-science"><a href="#정치학-Political-science" class="headerlink" title="정치학(Political science)"></a>정치학(Political science)</h2><ul><li>정치, 특히 국가의 정치에 대한 분석을 유일하고 일반적인 임무로 하는 학문의 한 분야<ul><li>권력 비판의 학문</li><li>사회 조직과 운영의 원리를 제시함으로써 사회를 경영하는 학문</li><li>이론과 실천을 동시에 추구하는 학문</li></ul></li><li>Fields<ul><li>정치사상</li><li>비교정치</li><li>국제정치</li></ul></li></ul><hr><h1 id="Political-Thought-and-Ideology"><a href="#Political-Thought-and-Ideology" class="headerlink" title="Political Thought and Ideology"></a>Political Thought and Ideology</h1><h2 id="Ideology"><a href="#Ideology" class="headerlink" title="Ideology?"></a>Ideology?</h2><ul><li>Ideology<ul><li>사회집단에 있어서 사상, 행동, 생활방법을 근본적으로 제약하고 있는 관념이나 신조</li><li>관념(Idea) + 논리(Logy) = 관념의 논리</li><li>사고방식, 이념, 주의 등으로 번역</li></ul></li><li>Ideologue<ul><li>공론가, 몽상가</li><li>특정한 이데올로기의 신봉자</li><li>특정한 계급의 입장이나 당파를 대표하는 이론적 지도자</li></ul></li></ul><h3 id="정치-이데올로기의-기능"><a href="#정치-이데올로기의-기능" class="headerlink" title="(정치)이데올로기의 기능"></a>(정치)이데올로기의 기능</h3><blockquote><p>이데올로기는 특정한 사회체제를 정당화하는 성향을 지니고 있어서 매우 정치적임</p></blockquote><ul><li>사회에 대한 인식과 가치를 판단하는 기준 제공</li><li>하나의 관념적 인식을 공유시켜 집단을 하나로 결속시키고 통합하는 역할</li><li>개인의(정치참여 등에 대한) 자기정체성 확립</li><li>특정한 제도에 대한 정당성을 확보하게 함</li><li>같은 이데올로기를 공유하는 세력을 조직화하고 행동하게 함</li><li>(국가, 계급, 정파 등을 초월하여) 정치이데올로기를 추종하는 사람들로 하여금 그들의 이익이나 목표를 위해 정치적 행동을 하도록 유도함</li></ul><h3 id="정치이데올로기의-기본-유형"><a href="#정치이데올로기의-기본-유형" class="headerlink" title="정치이데올로기의 기본 유형"></a>정치이데올로기의 기본 유형</h3><ul><li>보수주의(Conservatism)<ul><li>현상을 유지하고, 변화를 반대하는 의식체계</li><li>역사, 전통, 관습에 토대를 두고 사회적 기능을 유지하려는 정치적 태도</li><li>특징<ul><li>인간의 자연적 불평등 강조</li><li>사회계급과 질서의 필요성 강조</li><li>기존의 전통과 관습 중시</li><li>사회변동의 불가피성을 인정하지만, 사회변동은 점진적으로 이루어져야 함</li></ul></li></ul></li><li>자유주의(Liberalism)<ul><li>집단에 의한 통제보다는 개인의 자유를 보장하기 위해 사회가 존재한다고 보는 시각<ul><li>도덕적으로는 개인적, 시민적, 사회적 자유 추구</li><li>경제적으로 시장 자유 지향</li><li>정치적으로는 입헌적 대의정치 모색</li></ul></li><li>특징<ul><li>개인의 자유를 보편적 가치로 인식</li><li>인간 이성에 대한 신뢰</li><li>진보에 대한 믿음, 변화를 선호하는 경향</li><li>인간의 조건을 개선하기 위해 정부를 활용</li></ul></li></ul></li><li>사회주의(Socialism)<ul><li>생산수단을 공유하는 사회제도 혹은 그러한 사회제도를 실현하려는 사상</li><li>사유재산을 완전히 폐지하거나, 일부를 제한함으로써 분배의 공평성을 추구하고자 함</li></ul></li><li>사회주의 vs. 공산주의<ul><li>생산수단의 사회적 소유 vs. 모든 소비재의 사회적 소유</li><li>개인의 경제적 동기 중시 vs. 개인의 비경제적 동기 중시</li><li>노력의 결과에 따라 소득의 차이 발생, 매매 행위로 인한 화폐 존재 vs. 소득, 교환, 매매가 없으므로 화폐 존재 이유 없음</li></ul></li></ul><h2 id="좌파와-우파의-기원"><a href="#좌파와-우파의-기원" class="headerlink" title="좌파와 우파의 기원"></a>좌파와 우파의 기원</h2><ul><li>파?<ul><li>어떤 주장이나 이해관계를 같이 하는 사람들이 뭉쳐서 이룬 단체나 모임</li><li>(조선시대의) 당파, (현대의) 좌파, 우파 : 특정한 정치이데올로기를 추구하거나, 공통 행동을 하거나, 같은 목적과 가치관을 공유하는 정치세력</li></ul></li></ul><table><thead><tr><th align="center"></th><th align="center">좌</th><th align="center">우</th></tr></thead><tbody><tr><td align="center">파</td><td align="center">공화파, 자코뱅파</td><td align="center">왕당파, 지롱드파</td></tr><tr><td align="center">개혁 속도</td><td align="center">급진적 개혁</td><td align="center">점진적 개혁</td></tr><tr><td align="center">지지 계층</td><td align="center">소시민</td><td align="center">부르주아</td></tr><tr><td align="center">정부 개입</td><td align="center">최대</td><td align="center">최소</td></tr><tr><td align="center">강조점</td><td align="center">공동체적 삶</td><td align="center">개인적 삶</td></tr></tbody></table><ul><li>정치성향<ul><li>정치, 사회, 경제 분야를 막론하고, 다양한 이슈나 문제에 대해 가지고 있는 개개인의 입장이나 사고방식</li></ul></li><li>좌(진보) vs. 우(보수)<ul><li>경제적, 물질적 차원</li><li>정치적, 사회적 차원</li><li>물질적 가치와 탈물질적 가치 차원</li></ul></li></ul><h3 id="서구의-좌파와-우파"><a href="#서구의-좌파와-우파" class="headerlink" title="서구의 좌파와 우파"></a>서구의 좌파와 우파</h3><table><thead><tr><th align="center"></th><th align="center">좌파</th><th align="center">우파</th></tr></thead><tbody><tr><td align="center">이데올로기</td><td align="center">평등주의(공동체주의)</td><td align="center">자유주의(개인주의)</td></tr><tr><td align="center">정부</td><td align="center">큰 정부</td><td align="center">작은 정부</td></tr><tr><td align="center">시장</td><td align="center">시장의 불완전성 강조</td><td align="center">자율성 강조</td></tr><tr><td align="center">범죄의 책임</td><td align="center">사회 구조적 책임</td><td align="center">개인의 책임</td></tr><tr><td align="center">노, 사 관계</td><td align="center">노동자 이해 대변</td><td align="center">기업가 이해 대변</td></tr></tbody></table><ul><li>극좌<ul><li>정부가 모든 생산수단을 독점하는 완벽한 계획경제(공산주의)</li></ul></li><li>극우<ul><li>국가나 민족주의에 대한 내용을 지나치기 강조(나치즘, 파시즘)</li></ul></li></ul><h3 id="대한민국의-좌파와-우파-진보와-보수"><a href="#대한민국의-좌파와-우파-진보와-보수" class="headerlink" title="대한민국의 좌파와 우파, 진보와 보수"></a>대한민국의 좌파와 우파, 진보와 보수</h3><ul><li>진보(Liberal)<ul><li>역사 발전의 합법칙성에 따라 사회의 변화, 발전을 추구</li><li>정도나 수준이 차츰 향상하여 감</li><li>분배</li><li>환경친화</li><li>(기회의) 제도적 평등 사회</li><li>제도의 책임 중시</li><li>국가역할의 확대</li><li>큰 정부</li><li>무고한 희생자 최소화</li><li>다문화주의</li><li>문화상대주의</li><li>연대</li></ul></li><li>보수(Conservative)<ul><li>새로운 것을 적극 받아들이기 보다는 재래의 풍습이나 전통을 중히 여겨 유지하려고 함</li><li>수구 : 옛 제도나 관습을 그대로 지키고 따름</li><li>성장</li><li>개발</li><li>기회활용의 자율성</li><li>개인의 책임 중시</li><li>국가역할의 최소화</li><li>작은 정부</li><li>강력한 법치주의</li><li>자문화중심주의</li><li>문화절대주의</li><li>통합</li></ul></li></ul><table><thead><tr><th align="center"></th><th align="center">좌파/진보</th><th align="center">우파/보수</th></tr></thead><tbody><tr><td align="center">경제적 가치</td><td align="center">평등, 분배, 노동, 복지</td><td align="center">효율, 성장, 자본</td></tr><tr><td align="center">권위, 자유주의에 대한 입장</td><td align="center">개인적, 사회적 자유 존중</td><td align="center">법과 질서 존중</td></tr><tr><td align="center">(탈)물질적가치</td><td align="center">환경보호, 동물보호, 소수자 인권 존중 및 보호</td><td align="center">도시개발, 근대화, 산업개발</td></tr><tr><td align="center">북한에 대한 태도</td><td align="center">대북 유화책, 국가보안법 거부와 폐기</td><td align="center">대북 강경책, 국가보안법 유지와 존속</td></tr></tbody></table><hr><h1 id="Political-Power"><a href="#Political-Power" class="headerlink" title="Political Power"></a>Political Power</h1><ul><li>권력이란 무엇이고, 과연 필요한 것인가?<ul><li>인간 집단생활의 속성과 권력</li><li>사회의 존속을 위한 권력</li><li>정치사회의 질서유지를 위한 정치권력</li></ul></li><li>H. Arendt<ul><li>모든 정치제도들이란 권력의 표현이자 구현으로 정치제도는 권력을 유지하지 못할 때 생기를 잃고 사라지게 된다.</li></ul></li></ul><h2 id="권력-Power"><a href="#권력-Power" class="headerlink" title="권력(Power)"></a>권력(Power)</h2><ul><li>사전적 의미 : 남을 자신의 뜻대로 움직이거나 지배할 수 있는 공인된 권리와 힘</li><li>사회적 관계에서 한 행위자가 다른 행위자의 저항에도 불구하고 자신의 의사를 관철시킬 수 있는 입장에 있을 가능성(M. Weber)<ul><li>권력은 사회적 관계에서 행사<ul><li>권력은 사회 구성원 간에 불평등하게 분배되어 있음</li></ul></li><li>A와 B, 두 행위자 간의 갈등을 수반<ul><li>지배를 당하는 자에게는 제재와 박탈이 일어나게 됨</li></ul></li></ul></li></ul><h3 id="정당하지-않은-권력행사"><a href="#정당하지-않은-권력행사" class="headerlink" title="정당하지 않은 권력행사"></a>정당하지 않은 권력행사</h3><ul><li>권력남용 : 남을 자신의 뜻대로 움직이거나 지배할 수 있는 공인된 힘을 정해진 규정이나 기준을 넘어서 함부로 사용하는 일</li><li>직권남용 : ‘공무원’이 직권을 남용하여 범하는 죄</li><li>갑질 : 권력의 우위에 있는 갑이 권리관계에서 약자인 을에게 하는 부당행위를 통칭하는 개념</li></ul><h3 id="권력의-정당성-정통성-Legitimacy-의-근거"><a href="#권력의-정당성-정통성-Legitimacy-의-근거" class="headerlink" title="권력의 정당성, 정통성(Legitimacy)의 근거"></a>권력의 정당성, 정통성(Legitimacy)의 근거</h3><blockquote><p>M. Weber</p></blockquote><ul><li>전통적 지배<ul><li>전통의 신성함과 역사적 배경, 이에 기초한 정치적 권위에 대한 사람들의 일상적 믿음에 근거한 지배<ul><li>가부장적 지배, 군주제(혈통, 왕권신수설 등)</li></ul></li></ul></li><li>카리스마적 지배<ul><li>어떤 인물의 특별한 신성함, 영웅적 능력 또는 모범적 인품 등에 근거, 구성원의 신뢰에 기초한 지배</li></ul></li><li>합법적 지배<ul><li>성문화된 질서와 법규의 합법성에 의한 지배<ul><li>선거를 통한 정치체제의 구성, 관료제</li></ul></li></ul></li></ul><blockquote><p>cf. 결과에 의한 정통성 획득, 습관에 의한 정통성 획득</p></blockquote><h3 id="권력의-실체설과-관계설"><a href="#권력의-실체설과-관계설" class="headerlink" title="권력의 실체설과 관계설"></a>권력의 실체설과 관계설</h3><ul><li>실체설<ul><li>유럽 대륙계 학자들이 주로 제시</li><li>권력은 다른 사람을 지배하기 위하여 인간이 소유하는 일종의 물건</li><li>소수의 엘리트가 다수의 구성원보다 더 능동적인 역할을 수행한다고 생각하므로 소수 권력 엘리트의 힘과 역할을 중시함</li><li>현실적으로 권력측정의 어려움이 없음(공식 지위, 돈, 물리적 강제력 등)</li><li>지배-복종의 수직적 관계</li></ul></li><li>관계설<ul><li>앵글로 색슨계 학자들이 주로 제시</li><li>권력은 인간과 인간의 관계 또는 치자와 구성원 간의 관계에서 나타나고 행사될 수 있는 것</li><li>구성원의 적극적 또는 소극적 지지와 동의를 통해 권력 부여</li><li>구성원의 동의와 지지, 자발성이 체제유지와 권력행사에 결정적으로 중요한 가치</li><li>수평적 상호관계</li></ul></li></ul><h2 id="권위-Authority"><a href="#권위-Authority" class="headerlink" title="권위(Authority)"></a>권위(Authority)</h2><ul><li>사전적 의미 : 다른 사람을 통솔하여 이끄는 힘</li><li>구성원의 마음을 지배하는 힘</li><li>승인을 받아낼 수 있는 잠재력</li><li>권력을 행사할 수 있는 권리</li><li>권력과 권위의 차이<ul><li>행동하는 능력 vs. 그렇게 하도록 인정받은 권한</li><li>방향성 : 일방향적 vs. 쌍방향적</li></ul></li></ul><h2 id="영향력-Influence"><a href="#영향력-Influence" class="headerlink" title="영향력(Influence)"></a>영향력(Influence)</h2><ul><li>사전적 의미 : 어떤 사물의 효과나 작용이 다른 것에 미치는 힘, 또는 그 크기나 정도</li><li>누가 누구에게 무엇을 하도록 어떤 행동을 유도하는 것</li><li>현재적 영향력 : 분명하게 상대방의 행동에 변화를 가져오는 유형</li><li>잠재적 영향력 : 영향력을 행사하려는 시도나 의도가 없었음에도 불구하고 사람들이 행동의 변화를 보이는 경우</li></ul><h2 id="정치권력의-개념"><a href="#정치권력의-개념" class="headerlink" title="정치권력의 개념"></a>정치권력의 개념</h2><ul><li>정치권력<ul><li>권력이 정치적 기능을 수행하기 위해 조직화 된 것</li><li>국가에 의해 제도화되고 행사되는 국가권력을 가장 전형적인 형태의 정치권력이라고 함</li></ul></li><li>정치와 정책<ul><li>정치권력은 정책결정을 담당하여 어떤 결정의 정책을 만들어 냄</li><li>정책은 본질적으로 이익갈등이 발생할 수 밖에 없음</li><li>NIMBY(Not In My Back Yard) 현상 : 혐오시설 유치를 기피, 반대하는 지역이기주의의 일종</li><li>PIMFY(Please In My Front Yard) 현상 : 금전적 이익이 기대되는 사업을 유치하려는 지역이기주의의 일종</li></ul></li></ul><h3 id="정치권력의-속성"><a href="#정치권력의-속성" class="headerlink" title="정치권력의 속성"></a>정치권력의 속성</h3><blockquote><p>이론</p></blockquote><ul><li>엘리트론(Mosca, 1939)<ul><li>조직되어 있는 소수가 조직되어 있지 못한 다수를 지배함</li><li>법률적, 도덕적 기초나 원칙 등으로 소수의 지배를 정당화함</li></ul></li><li>소수권력 엘리트론(Mills, 1954)<ul><li>모든 사회는 엘리트와 비 엘리트로 구성되고, 엘리트 집단 또한 통치 엘리트와 비 통치 엘리트로 구분됨</li></ul></li><li>엘리트 순환론(Pareto, 1963)<ul><li>어떤 방식에 의해서든 신, 구 통치 엘리트는 주기적 또는 비주기적으로 교체(순환)됨</li></ul></li><li>다원주의 권력론(Dahl, 1984)<ul><li>권력은 분산되어 있어 어느 한 집단이 전적으로 권력을 독점하는 것이 아니라 복수 엘리트들이 서로 권력을 나누어 행사함</li></ul></li><li>과두제의 철칙(Iron law of oligarchy)(Michels, 1925)<ul><li>아무리 민주적인 조직이라도 조직운영의 전략적, 기술적 필요에 의하여 소수 엘리트에 의한 과두지배가 필연적으로 나타남</li></ul></li></ul><h3 id="보이지-않는-권력"><a href="#보이지-않는-권력" class="headerlink" title="보이지 않는 권력"></a>보이지 않는 권력</h3><blockquote><p>Panopticon(원형감옥)</p></blockquote><ul><li>18c, J. Bentham이 설계</li><li>Pan(두루) + Opticon(보다)</li><li>원형의 공간이 가운데에 있는 복층 감옥으로 가운데 공간에는 감시탑이 존재</li><li>최소한의 인원으로 모든 수감자를 효율적으로 감시할 수 있도록 고안된 감옥</li><li>제재에 대한 위협이나 폭력의 사용 없이도 권력이 행사되는 과정</li><li>무력감을 만드는 상황, 자신이 의도하지 않은 방향으로 움직이게 하는 보이지 않는 권력</li><li>1974, M. Foucault ‘감시와 처벌’<ul><li>“근대사회는 잘 운영되는 원형감옥이며, 우리는 감옥에 갇힌 죄수처럼 보이지 않는 간수에게 스스로 복종하는 것을 배운다.”</li></ul></li></ul><hr><h1 id="Democracy"><a href="#Democracy" class="headerlink" title="Democracy"></a>Democracy</h1><h2 id="정치체제-Polity"><a href="#정치체제-Polity" class="headerlink" title="정치체제(Polity)"></a>정치체제(Polity)</h2><blockquote><p>정치체제의 분류(by. Aristotle)</p></blockquote><table><thead><tr><th align="center">통치자의 수\통치 형태</th><th align="center">순수형태</th><th align="center">부패형태</th></tr></thead><tbody><tr><td align="center">1인</td><td align="center">군주정치</td><td align="center">폭군정치</td></tr><tr><td align="center">소수</td><td align="center">귀족정치</td><td align="center">금권적 과두정치</td></tr><tr><td align="center">다수</td><td align="center">법제적 민주정치</td><td align="center">빈민정치</td></tr></tbody></table><ul><li>현대적 기준<ul><li>누가 권력을 갖고 있는가?</li><li>정치권력이 어떤 절차에 따라 형성되고 집행되는가?</li></ul></li></ul><blockquote><p>민주공화국</p><blockquote><p>주권이 국민에게 있고 권력이 국민의 합의 기관에서 결정된다.</p></blockquote></blockquote><h2 id="민주주의란"><a href="#민주주의란" class="headerlink" title="민주주의란?"></a>민주주의란?</h2><ul><li>개념<ul><li>Democracy는 그리스어의 demokratia에서 유래</li><li>인민의 지배 : demos(인민, 민중) + kratia(지배)</li><li>1인 지배(왕정, 군주정), 소수의 지배(귀족정)와는 달리, 자유롭고 평등한 시민들이 참여하여 스스로 통치하는 체제</li></ul></li><li>특징<ul><li>민주주의는 인간의 존엄성, 자유, 평등을 이념으로 하는 이데올로기</li><li>핵심은 인간의 존엄성과 삶의 다양성 인정</li><li>인간이 존엄하기 때문에, 존엄성을 지키고 삶의 다양성을 지키기 위해 개인의 자유와 평등이 요구되는 것</li></ul></li><li>핵심원리<ul><li>1864년, 미국 제16대 대통령 A. Lincoln의 게티스버그 연설</li><li>민주주의는 “인민의, 인민에 의한, 인민을 위한 통치”<ul><li>Of the people : 민주주의에 정치권력은 인민에게 있으므로(주권재민) 인민의 동의가 필수적임</li><li>By the people : 민주주의는 정치권력이 인민의 소유일 뿐만 아니라, 그 인민의 참여에 의해 운영되는 정부형태 및 통치원리</li><li>For the people : 민주주의는 소수의 기득권층이 아니라 인민 대중의 행복을 위한 정치임</li></ul></li></ul></li></ul><h2 id="민주주의의-두-가지-갈래"><a href="#민주주의의-두-가지-갈래" class="headerlink" title="민주주의의 두 가지 갈래"></a>민주주의의 두 가지 갈래</h2><h3 id="직접-민주주의"><a href="#직접-민주주의" class="headerlink" title="직접 민주주의"></a>직접 민주주의</h3><blockquote><p>아테네 민주주의</p></blockquote><ul><li>기본 원리<ul><li>자치(Self rule)에 기반한, 시민이 주인이 되는 통치 체제</li><li>치자와 피치자의 동일성 -&gt; 모든 시민들은 정치권력 행사의 잠재적 등가성을 보장받음(ex. 추첨을 통한 대표의 선출)</li></ul></li><li>통치기구의 구성 및 기능<ul><li>민회 : 아테네 최고의결기구, 1년에 40회 개최, 20세 이상의 남성이 참가자격 보유, 5,000 ~ 8,000명이 광장(아고라)에 모여 의견을 공유하고 정책을 결정</li><li>(500인) 평의회 : 10개 행정구역에서 30세 이상 남성 대표 50명을 추첨에 의해 선출, 민회의 투표에 부칠 의제 또는 의안 협의, 민회 소집권 보유</li><li>시민 법정 : 매년 추첨으로 선출된 6,000명의 시민단(배심원 후보)에서 재판 당일 추첨에 의하여 배심원 구성, 평의회나 민회가 내린 어떤 결정에 의해서도 그것이 법률에 위배된다고 기소하여 폐기시킬 수 있는 권한 보유</li></ul></li><li>의의<ul><li>민주적 평등과 참여의 제도화</li><li>사법부의 독립 등 권력에 대한 견제와 균형</li><li>심의정치 제도화</li><li>시민적 덕성에 대한 신념에 기반한 정치체제</li></ul></li><li>한계<ul><li>대중 선동 및 조작에 능한 이들의 전횡 위험</li><li>숙고하지 않은 대중들의 우민정치로의 타락 가능성</li><li>경제적 상층 편향성</li><li>인구 규모와 지리적 한계</li><li>사회적 기능 분화와 전문화 심화</li><li>갈등 해결의 어려움, 소수의 존중 및 보호 문제</li></ul></li></ul><h3 id="간접-민주주의"><a href="#간접-민주주의" class="headerlink" title="간접 민주주의"></a>간접 민주주의</h3><blockquote><p>대의 민주주의</p></blockquote><ul><li>기본 원리<ul><li>시민들이 스스로 선출한 대표자들을 통해 법률제정 및 정책결정에 참여하는 통치체제</li><li>전문성을 갖춘 대표를 선출하고 선출된 대표가 국회(의회)에 모여 의사 결정을 하도록 일임하고, 의사 결정에 주권자인 국민이 따르는 형태</li></ul></li><li>절차적 조건<ul><li>보통선거권, 경쟁하는 정당들의 존재, 권력에 대한 견제와 균형 및 사법부의 독립, 언론-출판-결사 등 시민권의 보장, 정부 및 의회에 대한 시민의 비판 등</li></ul></li><li>대표의 개념<ul><li>누구를, 무엇을, 어떻게 대표할 것인가?</li><li>대리자(Delegate) : 대리원리, 유권자(선거구민)의 뜻과 의지의 통제에 따라 그들의 의사를 대리하는 존재</li><li>신탁자(Trustee) : 국민대표원리, 일단 대표로 선출된 이후에는 국민 전체의 이익을 위한 판단 일체를 신탁 받은 존재</li></ul></li><li>의의 및 한계<ul><li>대표성(전문성) : 선거와 여론에 반영된 시민의 이익을 대표하면서 정부 조직을 구성할 수 있으며 기술-지식-전문성을 갖춘 정치 엘리트를 육성하고 활용할 수 있음</li><li>반응성 : 주기적인 경쟁선거를 통해 정치세력이 시민들의 관심을 경청하고 반응하는 수준을 향상시킬 수 있음</li><li>책임성 : 잘못된 정책, 공정하지 못한 국정운영에 대하여 대표들에게 정치적-법적 책임을 물을 수 있음</li></ul></li><li>보완<ul><li>보다 많은, 보다 적극적인 참여와 실질적인 감독과 통제 장치</li><li>국민 투표, 국민 발안, 국민 소환제 등과 같은 직접 민주주의적 제도 도입</li><li>참여민주주의, 심의민주주의, 전자민주주의 요소 도입 및 확충</li></ul></li></ul><h2 id="비민주주의체제"><a href="#비민주주의체제" class="headerlink" title="비민주주의체제"></a>비민주주의체제</h2><h3 id="전체주의-Totalitarianism"><a href="#전체주의-Totalitarianism" class="headerlink" title="전체주의(Totalitarianism)"></a>전체주의(Totalitarianism)</h3><ul><li>개인의 자유를 억압하고 개인보다는 집단의 우월성과 이익을 강조하는 정치 이데올로기이자 통치체제</li><li>구각 권력이 국민들의 전 생활에 실질적인 통제를 가함</li><li>권력을 쥔 지배자가 초월적인 관념(종족 우월주의, 민족 지상주의 등)을 제시하여 대중들을 선동해 권력을 집중시키고 자신들의 권력체제를 공고화 시킬 때 나타남</li><li>경제적, 사회적, 정치적 다원성을 인정하지 않음</li></ul><blockquote><p>Fascism : 이탈리아의 무솔리니, 국가주의적 전체주의(국가의 절대우위)</p></blockquote><blockquote><p>Nazism : 독일의 히틀러, 국가사회주의(파시즘 + 인종주의)</p></blockquote><ul><li>“삶을 공적 영역과 사적 영역으로 구분해서는 안되며, 양자는 통합되어야 함”</li><li>“국가는 개인의 모든 일상 영역에 침투함으로써 이를 지배할 수 있음”</li></ul><h3 id="권위주의-Authoritarianism"><a href="#권위주의-Authoritarianism" class="headerlink" title="권위주의(Authoritarianism)"></a>권위주의(Authoritarianism)</h3><ul><li>민주주의와 전체주의 사이의 중간 형태</li><li>책임 소재가 불분명한 다원주의 유지</li><li>잘 고안된 지도적 이데올로기가 없음</li><li>지도자가 형식적으로는 무제한이지만 실제로는 예측 가능한 범위 내에서 권력을 행사하는 시스템</li><li>의회와 법원 등 국가권력기관이 존재하지만 권력소유자의 통치에 복종하던가, 실질적으로 권한의 양보를 강요당함</li></ul><blockquote><p>제한된 자유, 제한된 다원주의</p></blockquote><blockquote><p>만성적 부정부패와 연결, 민주화와 개혁을 요구하는 다른 엘리트들의 거센 도전과 이해 당사자들의 저항이 상존</p></blockquote><hr><h1 id="Constitution-and-Form-of-Government"><a href="#Constitution-and-Form-of-Government" class="headerlink" title="Constitution and Form of Government"></a>Constitution and Form of Government</h1><h2 id="정부형태"><a href="#정부형태" class="headerlink" title="정부형태"></a>정부형태</h2><ul><li>정부(Government)<ul><li>국가의 질서를 유지하고 구성원의 공동목표를 실현하려는 통치기능이자 그러한 기능을 수행하는 제도</li><li>좁은 의미 : 내각 또는 행정부, 이에 부속된 행정기구</li><li>넓은 의미 : 입법, 사법, 행정에 관한 모든 조직과 기관</li></ul></li><li>정부형태<ul><li>정부가 구성되어 있는 모습</li><li>오늘날 민주주의 국가의 정부형태는 대체로 입법부, 행정부, 사법부 등 3개 기관으로 구성되어 있으며 각각의 기관은 독자적인 권한과 기능을 행사함<ul><li>입법부 : 입법권</li><li>행정부 : 집행권</li><li>사법부 : 사법권</li></ul></li></ul></li></ul><h3 id="민주주의-정부형태의-기본정신"><a href="#민주주의-정부형태의-기본정신" class="headerlink" title="민주주의 정부형태의 기본정신"></a>민주주의 정부형태의 기본정신</h3><ul><li>의회주의<ul><li>국가의 최고결정기관은 의회</li></ul></li><li>법치주의<ul><li>규칙(Rule)에 따라 권력을 행사</li><li>법에 의한 지배</li></ul></li><li>견제와 균형<ul><li>권력은 권력으로 견제</li><li>영국 : 의회의 내각불신임권, 내각의 의회해산권 등 입법부와 행정부간 서로 견제할 수 있는 권한 부여</li><li>미국 : 엄격한 권력분립으로 권력 집중 방지</li></ul></li><li>보통 선거권<ul><li>모든 국민 참여</li></ul></li></ul><h3 id="의원내각제-Parliamentary-government-system"><a href="#의원내각제-Parliamentary-government-system" class="headerlink" title="의원내각제(Parliamentary government system)"></a>의원내각제(Parliamentary government system)</h3><blockquote><p>행정부의 존재가 입법부로부터 발생하며 행정부가 입법부와 연관되어 있고, 입법부에 책임을 지는 정부형태</p></blockquote><ul><li>내각(Cabinet) : 의원내각제에서의 행정부를 의미하며 행정수반인 총리와 행정 각 부처의 장인 각료로 구성</li><li>총리 : 의원내각제에서 내각의 우두머리(수상)</li><li>의원내각제, 내각책임제, 수상제, …</li><li>의원내각제는 입법부와 행정부의 권한이 융합된 정부 형태로 영국에서 발달</li><li>오랜 기간 왕과 팽팽한 대립 관계를 지속하면서 대헌장(1215), 권리청원(1628), 권리장전(1688)과 같은 문서를 작성해 왕의 권한을 견제하는 과정 수립</li></ul><h4 id="의원내각제의-특징"><a href="#의원내각제의-특징" class="headerlink" title="의원내각제의 특징"></a>의원내각제의 특징</h4><ul><li>민주적 정당성의 일원화 : 국민은 의회 구성, 의회는 내각을 구성함</li><li>국회와 정부의 상호의존성(임기의 가변성) : 국회는 정부(내각) 불신임권, 내각은 의회해산권을 보유함</li><li>권력융합을 통한 책임정치 구현</li><li>정부 구조의 이원화 : 실질적인 집행권을 보유하는 내각이 있으며 의례적, 형식적인 국가원수(대통령, 군주 등) 존재</li></ul><h3 id="대통령제-Presidential-system"><a href="#대통령제-Presidential-system" class="headerlink" title="대통령제(Presidential system)"></a>대통령제(Presidential system)</h3><blockquote><p>정부와 의회가 모두 국민에 의해 별개의 권력을 위임받아 성립되며 국민에 대해 개별적으로 책임을 지는 정부 형태</p></blockquote><ul><li>대통령제는 그 나라의 역사와 정치문화, 정당정치의 특성, 정치적 갈등구조 등 여러가지 조건에 따라 변형된 형태로 수용되고 운영되어 왔음</li><li>미국의 대통령제는 하나의 이상형(Ideal type)</li><li>대통령제를 채택한 국가는 미국, 아시아, 아프리카, 중남미 국가가 대부분이고 러시아를 비롯한 구 소련권 국가가 대통령제를 채택하고 있음</li><li>제2차 세계대전 이후 많은 나라에서 미국형 대통령제를 수입하여 미국과 같은 안정과 번영 추구</li><li>내각제 국가에 비해 상대적으로 독재나 권력집중, 군부 쿠데타 등 정치적 불안을 초래한 경우가 많음</li></ul><h4 id="대통령제의-특징"><a href="#대통령제의-특징" class="headerlink" title="대통령제의 특징"></a>대통령제의 특징</h4><ul><li>임기의 고정성 : 정치적 안정성 확보</li><li>이원적 정통성(Dual legitimacy) : 대통령과 의회 모두 국민으로부터 합법적 권력을 인정받음</li><li>대통령은 국가원수와 행정수반의 직을 모두 보유함으로써 직책 간의 갈등이 상존<ul><li>국가통합을 지향하는 국민의 대표 or 정파적인 특성</li></ul></li><li>미국의 대통령제<ul><li>엄격한 삼권분립을 통한 견제와 균형(Checks and balances)</li><li>입법권은 입법부가 보유</li><li>행정부의 모든 권한은 대통령이 장악</li><li>사법권 우위(Judicial supremacy) : 사법부에 입법부와 행정부를 견제할 권한 부여</li></ul></li></ul><h3 id="대통령제와-내각제-비교"><a href="#대통령제와-내각제-비교" class="headerlink" title="대통령제와 내각제 비교"></a>대통령제와 내각제 비교</h3><table><thead><tr><th align="center">대통령제</th><th align="center">내각제</th></tr></thead><tbody><tr><td align="center">권력의 엄격한 분립(견제와 균형)</td><td align="center">권력의 융합(책임정치 구현)</td></tr><tr><td align="center">권력 기관 상호 간의 독립 보장</td><td align="center">의회(입법부)에서 내각(행정부) 구성</td></tr><tr><td align="center">대통령의 임기 보장</td><td align="center">입법부와 행정부 간의 긴밀한 협조</td></tr><tr><td align="center">안정적, 일관적 정책 추진</td><td align="center">신속하고 능률적인 국정 운영</td></tr><tr><td align="center">정부-의회 갈등 중재 어려움</td><td align="center">다수당 횡포가능성</td></tr><tr><td align="center">국외자의 출현 가능성 큼</td><td align="center">군소 정당 난립 시 국정 불안</td></tr></tbody></table><table><thead><tr><th align="center"></th><th align="center">대통령제</th><th align="center">내각제</th></tr></thead><tbody><tr><td align="center">집행부와 의회 신임</td><td align="center">헌법에 규정된 임기 보장(의회에서 소수당이 되더라도 집행부 직책 유지)</td><td align="center">수상과 그가 이끄는 내각이 의회에 책임을 짐(임기 보장 X)</td></tr><tr><td align="center">집행부의 대표 선출</td><td align="center">국민에 의해서 선출</td><td align="center">의회에 의해 선출</td></tr><tr><td align="center">집행부의 의사결정구조</td><td align="center">1인 집중적 의사결정구조, 각료는 개별적으로 대통령에게 책임을 짐</td><td align="center">합의적 의사결정구조, 수상을 포함하는 내각이 일체성을 지니고 있음</td></tr><tr><td align="center">수반 or 국가원수</td><td align="center">대통령은 국가원수, 대통령과 각료의 겸직 X</td><td align="center">수상(총리)는 집행부의 수반, 수상은 의원신분을 겸함</td></tr></tbody></table><h3 id="혼합형-정부형태"><a href="#혼합형-정부형태" class="headerlink" title="혼합형 정부형태"></a>혼합형 정부형태</h3><ul><li>의원내각제와 대통령제의 혼합</li><li>준대통령제(Semi-presidential government), 이원집정부제(이원집정제)</li><li>대통령은 국민들의 직접선거에 의해 선출되고, 총리는 의회에서 다수를 차지하는 정당의 지도자가 맡는 제도</li><li>선출된 대통령과 의회에 책임지는 수상 및 내각이 결합된 정부형태</li></ul><h4 id="혼합형-정부형태의-특징"><a href="#혼합형-정부형태의-특징" class="headerlink" title="혼합형 정부형태의 특징"></a>혼합형 정부형태의 특징</h4><ul><li>권력 공유(Power sharing)의 기초 위에서 국방, 외교는 대통령이 국정운영은 총리가 총괄하는 이원적 집행권 행사</li><li>대통령은 보통선거에 의해 선출되며 상당한 권한을 보유</li><li>수상 및 내각의 장관들은 행정권을 보유하고 있으며, 이들은 의회의 신임에 의존하여 유지됨</li><li>M. Duverger : “준대통령제는 단점정부에서는 대통령제로, 분점정부에서는 의원내각제로 운영된다.”<ul><li>단점정부 : 대통령 소속 정당과 의회를 구성하는 다수당이 일치하는 경우</li><li>분점정부 : 대통령 소속 정당과 의회를 구성하는 다수당이 불일치하는 경우</li></ul></li></ul><h2 id="헌법-Constituition"><a href="#헌법-Constituition" class="headerlink" title="헌법(Constituition)"></a>헌법(Constituition)</h2><ul><li>의의<ul><li>한 국가의 최고 상위법</li><li>국가통치체제와 기본권 보장의 기초에 관한 근본 법규</li></ul></li><li>대한민국헌법의 구성<ul><li>전문 : 헌법의 목적 및 이념과 헌법 제정, 개정 연혁</li><li>제1장 총강 : 국민주권주의, 자유민주주의, 권력분립주의, 평화적 통일주의, 국제평화주의, 문화국가주의, 군의 정치적 중립성 보장 등을 규정</li><li>제2장 국민의 권리와 의무(대한민국의 권리장전)</li><li>제3장 국회, 제4장 정부, 제5장 법원, 제6장 헌법재판소 : 권력분립주의에 입각한 통치기구 및 통치조직 규정</li><li>제7장 선거관리, 제8장 지방자치, 제9장 경제</li><li>제10장 헌법개정에 관한 규정</li><li>6개조의 부칙 : 경과규정</li></ul></li></ul><h3 id="대한민국헌법과-정부형태"><a href="#대한민국헌법과-정부형태" class="headerlink" title="대한민국헌법과 정부형태"></a>대한민국헌법과 정부형태</h3><ul><li>제1공화국 : 제정 헌법(1948)<ul><li>내각제적 요소가 결합된 대통령제</li></ul></li><li>제2공화국 : 3차 개헌(1960)<ul><li>의원내각제</li></ul></li><li>제3공화국 : 5차 개헌(1962)<ul><li>대통령제로 회귀</li></ul></li><li>제4공화국 : 7차 개헌(1972)<ul><li>초월적 대통령제</li></ul></li><li>제5공화국 : 8차 개헌(1980)<ul><li>대통령 단임제(7년 임기)</li><li>간선제</li></ul></li><li>제6공화국 : 9차 개헌(1987)<ul><li>대통령 단임제(5년 임기)</li><li>직선제</li></ul></li></ul><h3 id="현행-헌법과-정부형태"><a href="#현행-헌법과-정부형태" class="headerlink" title="현행 헌법과 정부형태"></a>현행 헌법과 정부형태</h3><blockquote><p>제9차 개정헌법</p></blockquote><ul><li>대통령제 정부형태<ul><li>국민에 의해 선출되는 대통령</li><li>헌법에 의해 보장되는 대통령 임기(탄핵소추 제외)</li><li>대통령의 법률안 거부권(Veto)</li><li>대통령은 국가원수인 동시에 행정부 수반</li></ul></li><li>한국의 대통령제는 내각제적 요소가 가미된 대통령제<ul><li>정부의 법률안 제출권</li><li>국회의원의 국무위원 겸직</li><li>국회의 국무총리 및 국무위원 해임건의권</li><li>국무총리 임명에 국회의 동의 필요</li><li>국무회의 제도</li><li>대통령의 국법상 행위에 대한 국무총리와 관계 국무위원의 부서 필요</li></ul></li></ul><h4 id="현행-헌법의-내각제적-요소"><a href="#현행-헌법의-내각제적-요소" class="headerlink" title="현행 헌법의 내각제적 요소"></a>현행 헌법의 내각제적 요소</h4><ul><li>제52조 : 국회의원과 정부는 법률안을 제출할 수 있다.</li><li>제63조 : 국회는 국무총리 또는 국무위원의 해임을 대통령에게 건의할 수 있다.</li><li>제82조 : 대통령의 국법상 행위는 문서로써 하며, 이 문서에는 국무총리와 관계 국무위원이 부서한다.</li><li>제86조 : 국무총리는 국회의 동의를 얻어 대통령이 임명한다.</li><li>헌법 제4장, 제2절, 제2관 국무회의의 규정</li><li>제43조 : 국회의원은 법률이 정하는 직을 겸할 수 없다. -&gt; 법률에 국회의원의 국무위원 겸직 금지 조항이 없음</li></ul><h4 id="한국의-대통령은-제왕적-대통령"><a href="#한국의-대통령은-제왕적-대통령" class="headerlink" title="한국의 대통령은 제왕적 대통령?"></a>한국의 대통령은 제왕적 대통령?</h4><ul><li>내각제적 요소<ul><li>내각제의 기초 위에 세워진 대통령제</li><li>대통령을 보좌하는 총리</li><li>의결기관이 아닌 심의기관으로서의 국무회의</li><li>법적 구속력 없는 국회의 해임건의권</li></ul></li><li>현실적인 문제<ul><li>(국회의 견제에도 불구하고) 대통령으로의 권력집중, 이로 인한 정치적 부패의 가능성</li><li>국회와 대통령의 임기 불일치로 인한 (국회 다수당과 대통령의 소속정당이 다른) 분점정부의 잦은 출현 및 국회와 행정부의 심각한 대립 및 충돌</li><li>국회 다수당과 대통령 소속정동(집권당)이 일치하는 단점정부의 경우, 권력집중화가 심해져 권력 통제가 매우 어려움</li></ul></li></ul><hr><h1 id="Congress-and-Political-Parties"><a href="#Congress-and-Political-Parties" class="headerlink" title="Congress and Political Parties"></a>Congress and Political Parties</h1><h2 id="의회"><a href="#의회" class="headerlink" title="의회"></a>의회</h2><blockquote><p>Congress, Parliament, Assembly</p></blockquote><ul><li>법률을 제정하거나 개정하고, 국가의 정책을 승인하고 그러한 정책을 집행하는데 필요한 예산을 승인하는 역할을 수행하는 정부 기구<ul><li>이러한 역할을 고려하여 입법부(The legislature)라고도 불림</li></ul></li><li>오늘날과 같은 의회는 신흥 시민 계급의 성정과 함께 등장하였으며, 오늘날 민주주의 정치제도를 표방하는 모든 국가에는 의회가 존재</li></ul><h3 id="의회의-구성"><a href="#의회의-구성" class="headerlink" title="의회의 구성"></a>의회의 구성</h3><ul><li>양원제(Bicameral legislature)<ul><li>유럽에서는 역사의 전개와 함께 기존의 기득권 세력인 귀족과 새롭게 성장하는 시민계급의 의사를 대변하는 의회가 따로 형성됨으로써 자연스럽게 양원제 형성</li><li>상원(Upper house)과 하원(Lower house)로 구성</li></ul></li><li>단원제(Unicameral legislature)<ul><li>보통 신생국가나 민주정치의 역사가 그리 길지 않은 국가에서 많이 채택된 의회 구성 형태</li><li>유권자들의 의사를 별도로 대변하는 구분된 의정 활동 기구, 대표기구인 양원제 채택 이유가 그리 크지 않은 경우에 단원제를 채택함</li></ul></li></ul><h3 id="의회의-운영방식"><a href="#의회의-운영방식" class="headerlink" title="의회의 운영방식"></a>의회의 운영방식</h3><ul><li>전환형 의회(Transformative type)<ul><li>어떤 원천에서 비롯된 제안이건 법률로 형성, 전환시키는 독자적 능력을 갖고 이를 자주 발휘하는 의회</li><li>의회의 산출에 영향을 주는 의회의 내부구조, 절차와 규범을 파악하는 것이 중요</li><li>상임위원회 중심 의회</li></ul></li><li>경합장형 의회(Arena type)<ul><li>중요 정치세력의 상호작용을 가능하게 하는 공식화된 장소</li><li>의원의 사회적 배경, 충원과정, 압력집단, 원외정당의 상호작용 등 의회 밖의 요인에 주목</li><li>본회의 중심 의회</li></ul></li></ul><h4 id="영국-의회"><a href="#영국-의회" class="headerlink" title="영국 의회"></a>영국 의회</h4><blockquote><p>양원제, 본회의 중심주의</p></blockquote><ul><li>대표적인 Arena legislature(경합장형 의회)로 본회의 중심주의를 채택하고 있으며, 양원제로 운영되고 있음</li><li>귀족계급으로 구성되는 상원(House of Lords)과 지역구의 평민들을 대변하는 하원(House of Commons)으로 구성</li><li>영국 상원 : 과거에는 성직 귀족, 세속 귀족(세습 귀족, 종신 귀족), 법률 귀족으로 구성된 명예직<ul><li>상원 개혁 작업이 꾸준히 진행 중</li></ul></li><li>상원보다 하원이 우위에 있으며, 법안은 3독회제를 거쳐 심의<ul><li>제1독회, 제2독회 후 토론을 거쳐 반대 의견이 있는 경우 표결, 통과하면 위원회에 회부, 제3독회</li></ul></li><li>전통<ul><li>영국 정치 전통의 상징인 (여)왕의 의회 개원 연설</li><li>매주 수요일 12시 ~ 12시 30분에 진행되는 PMQ(수상 질의 시간)</li><li>의원 누구든 수상에게 무엇이든지 자유롭게 질문하고 수상은 그에 대해 바로 답해야 함</li><li>규칙 : 사회자는 의장이 맡고, 발언자는 상대방을 3인칭으로 지칭</li></ul></li></ul><h4 id="미국-의회"><a href="#미국-의회" class="headerlink" title="미국 의회"></a>미국 의회</h4><blockquote><p>양원제, 상원위원회 중심주의</p></blockquote><ul><li>미국 의회(Capitol hill) : 50개의 주로 구성된 연방의회</li><li>대표적인 전환형 의회(Transformative legislature)로 상임위원회 중심주의를 채택하고 있으며, 양원제로 운영되고 있음</li><li>상원(Senate / Senator) : 인구수와 상관없이 각 주마다 2명씩 선출(임기 6년), 상원의장은 부통령이 겸직, 외교 및 고위 공무원 등에 대한 임명권 보유</li><li>하원(House of Representatives / Congressman-woman) : 인구수 비례로 선출(임기 2년), 관례적으로 다수당의 원내대표가 하원의장 겸직<ul><li>면목상으로는 정당의 원내대표직에서 사퇴하지만 실질적인 지위 보유</li></ul></li><li>원구성 원칙 : 철저한 승자독식(Winner takes it all)의 원칙에 따라 다수당이 의회의 모든 중요 직책(상임위원장 등)을 구성</li><li>철저한 견제와 균형<ul><li>ex. 탄핵소추권은 하원, 탄핵심판권은 상원이 보유</li></ul></li></ul><h3 id="대한민국-국회-구성"><a href="#대한민국-국회-구성" class="headerlink" title="대한민국 국회 구성"></a>대한민국 국회 구성</h3><blockquote><p>단원제, 상임위원회 중심주의</p></blockquote><ul><li>상임위원회 : 소관에 속하는 의안과 청원의 심사, 기타 법률에서 정하는 직무를 수행</li><li>각 위원회 위원의 임기는 2년, 위원장 1인과 각 교섭단체별 간사 1인을 둠</li><li>위원의 수는 위원회의 종류마다 다른데, 교섭단체 소속의원 수의 비율에 의해 각 교섭단체의 요청으로 의장이 위원 구성<ul><li>교섭단체 : 국회에서 의원이 의사를 종합, 통일하여 사전에 상호 교섭함으로써 국회의 원활한 의사진행을 도모하기 위한 의원단체(국회법 상 교섭단체 기준 20명 이상)</li></ul></li><li>대한민국국회의 원구성(의장단(국회의장 1인, 부의장 2인) 및 상임위원회 위원장 선출)은 단순한 국회 직의 배분경쟁이라기보다는 정당 간 권력을 극대화하기 위한 권력경쟁의 양상을 보이고 있음(13대 국회부터 합의원칙 고수)</li></ul><h3 id="의회의-대표성"><a href="#의회의-대표성" class="headerlink" title="의회의 대표성"></a>의회의 대표성</h3><ul><li>대리인(Delegate) vs. 신탁자(Trustee)<ul><li>대리인 : 대리원리, 의원은 자신을 선출한 유권자의 의사를 대리하는 존재</li><li>신탁자 : 국민대표원리, 일단 대표로 선출된 이후에는 국민 전체의 이익을 위한 판단 일체를 신탁 받는 것이나 마찬가지</li></ul></li><li>지역 vs. 국가<ul><li>자신의 선거구(District)의 이해가 우선인가, 아니면 전체 국가의 이해가 우선인가?</li></ul></li><li>의원 vs. 정당<ul><li>지역구의 의사를 대표하는 대표자(Representative)로서 역할할 것인가, 아니면 정당의 구성원으로서 정당의 입장을 우선할 것인가?</li></ul></li></ul><h3 id="의회의-규모"><a href="#의회의-규모" class="headerlink" title="의회의 규모"></a>의회의 규모</h3><blockquote><p>의회 정치에 있어서 규모의 문제(대표성 vs. 효율성)</p></blockquote><ul><li>의회의 규모가 클 경우 한 명이 대표해야 하는 선거구민 수는 상대적으로 적을 가능성이 높고, 그런 경우 의원은 상대적으로 적은 수의 선거구민의 이익을 반영하기 때문에 시민사회의 보다 다양한 선호들을 의회정치에 반영할 수 있음</li><li>의회의 규모가 클수록 대표성이 높은 특징</li><li>시민사회의 다양한 선호들을 대변하는 다수의 의원들이 의회의 집합적 의사결정에 참여하게 된다는 점에서 원만한 의사진행을 통하여 정치적 합의에 도달하는데 어려움을 겪을 수 있음</li><li>의회의 규모가 커지면 대표성은 높아지지만, 효율성은 떨어질 수 있음</li></ul><h2 id="정당"><a href="#정당" class="headerlink" title="정당"></a>정당</h2><ul><li>정당(Political party)이란?<ul><li>E. Burke : “공공의 이익(National interest)을 촉직시키기 위해서 하나의 일치된 원칙을 중심으로 공동의 노력으로 활동을 전개하는 사람들의 집단”</li><li>M. Duverger : “그 주된 목표가 권력의 장악과 그 실행의 공유에 있으며, 그 지지를 광범위한 기초로부터 끌어내는 집단”</li><li>V. O. Key : “정당은 (적어도 미국에서는) 특정한 종류의 집단(Group)을 의미하며 이 집단은 정당당원의 모임일 수도 있고 전문적 활동가의 모임일 수도 있음”</li><li>G. Satori : “선거에서 후보자를 지명하며, 그로 하여금 국민의 의사를 대변하여 정권을 수립하도록 하는 단체”</li></ul></li><li>정당의 특성<ul><li>일정 수준의 체계성과 안정성을 갖는 조직화된 집단</li><li>공동의 정치적 이해와 세계관 혹은 이념을 가지는 집단</li><li>정치권력의 획득을 목표로 하는 집단</li></ul></li></ul><h3 id="정당의-형성과-발전"><a href="#정당의-형성과-발전" class="headerlink" title="정당의 형성과 발전"></a>정당의 형성과 발전</h3><ul><li>근대 정당의 기원(17c 후반, 영국)<ul><li>휘그<ul><li>신흥 상공인의 입장</li><li>종교의 자유, 자유무역</li><li>왕권제한과 의회주권 강화</li></ul></li><li>토리<ul><li>토지에 기초한 기득권세력</li><li>전통적 지배계층의 이해 대변</li><li>가톨릭 지지, 왕권강화</li></ul></li></ul></li><li>서구 유럽에서의 정당 형성 배경<ul><li>의회제도의 확립</li><li>의원집단의 형성</li><li>선거권의 확대</li></ul></li></ul><blockquote><p>사회적 균열구조(Social cleavage structure) by. Lipset &amp; Rokkan</p><blockquote><p>서구 유럽에는 중앙과 주변, 국가와 교회, 농업과 산업, 자본과 노동 등 4가지 사회적 균열이 있었으며, 정당은 이러한 사회적 균열이 정치적으로 동원되는 과정에서 형성되었다고 보는 시각</p></blockquote></blockquote><h3 id="산업사회의-발전과-정당의-변화"><a href="#산업사회의-발전과-정당의-변화" class="headerlink" title="산업사회의 발전과 정당의 변화"></a>산업사회의 발전과 정당의 변화</h3><ul><li>간부정당(Cadre Party)<ul><li>19세기, 제한적 선거권 시기</li><li>정당의 규율과 중앙집권화의 정도가 매우 약하고 의원 개개인의 독립성과 자율성이 매우 강함</li></ul></li><li>대중정당(Mass Party)<ul><li>19세기 말, 20세기 초 ~</li><li>사회경제적으로 동질성을 갖는 대규모 당원 중심의 정당</li><li>보통선거권 확립과 깊은 관계</li><li>당원들이 납부하는 당비와 선거운동에 크게 의존하며 체계화된 정당 조직과 엄격한 규율에 의해 통제되는 특성을 지니며 당원들의 사회경제적 동질성 및 공동의 이념이 중요한 결속 요인으로 작용함</li></ul></li><li>포괄정당(Catch-All Party)<ul><li>2차 대전 이후 ~</li><li>산업사회의 변화로 대중들의 이질성이 커지고 정당에 대한 충성심이 약화되면서 등장</li><li>광범위한 계급과 계층에 지지 호소</li><li>대단히 모호하고 일반적인 선거공약을 제시함으로써 더 많은 표를 얻고자 함</li><li>조직적으로 당원이나 정당 지지자로부터 상대적으로 자율성을 갖는 강력한 정당지도부 중심으로 운영</li></ul></li><li>카르텔정당(Cartel Party)<ul><li>1970년대 이후 ~</li><li>(높은 선거운동 비용) 국가자원인 국고보조금에 크게 의존함과 동시에 신생정당은 배분과정에서 제외시킴으로써 자신의 기득권을 유지하려는 정치적 담합을 꾀하는 카르텔 현상을 보임</li></ul></li><li>선거전문가(Electoral Professional Party)<ul><li>2차 대전 이후 ~</li><li>방대한 조직과 당원을 보유하지 않고 선거운동(캠페인)과 관련된 여론조사 전문가, 선거 전략전문가, 변호사 등 다양한 전문가들이 주도하는 정당 형태</li><li>매스미디어가 발전하고, 이에 따라 미디어 중심으로 선거운동이 변화하면서 정당조직과 관료가 아닌 전문가의 역할 증대에 주목</li></ul></li></ul><h3 id="정당은-필요한가"><a href="#정당은-필요한가" class="headerlink" title="정당은 필요한가?"></a>정당은 필요한가?</h3><ul><li>반 정당주의론<ul><li>정당은 정부를 파괴하려는 위선자이므로 가능한 억제되어야 함</li><li>정당을 파벌(Faction), 즉 “전체 속의 부분”이 아닌 “전체에 저항하는 부분”으로 보는 시각에서 비롯됨</li></ul></li><li>정당 불가피론<ul><li>정당은 불가피한 존재이지만 정부에 유익하기보다는 해로운 활동을 하는 존재</li><li>정당이 견제 받지 않고 규제되지 않는다면 반드시 스스로 소수에 의한 다수의 억압 도구로 바뀔 수 있음</li></ul></li><li>정당 필수론<ul><li>민주적인 대중정부는 정당 없이 존재할 수 없음</li><li>Schattschneider : “민주주의를 만드는 것은 정당이며, 정당을 빼놓은 현대 민주주의는 생각할 수 없다”</li></ul></li></ul><h3 id="정당과-대의민주주의"><a href="#정당과-대의민주주의" class="headerlink" title="정당과 대의민주주의"></a>정당과 대의민주주의</h3><ul><li>대한민국헌법 제8조<ul><li>정당의 설립은 자유이며, 복수정당제는 보장된다.</li><li>정당은 그 목적, 조직과 활동이 민주적이어야 하며, 국민의 정치적 의사형성에 참여하는데 필요한 조직을 가져야 한다.</li><li>정당은 법률이 정하는 바에 의하여 국가의 보호를 받으며, 국가는 법률이 정하는 바에 의하여 정당운영에 필요한 자금을 보조할 수 있다.</li><li>정당의 목적이나 활동이 민주적 기본질서에 위배될 때에는 정부는 헌법재판소에 그 해산을 제소할 수 있고, 정당은 헌법재판소의 심판에 의하여 해산된다.</li></ul></li><li>정당법 제2조<ul><li>국민의 이익을 위하여 책임 있는 정치적 주장이나 정책을 추진하고 공직선거의 후보자를 추천 또는 지지함으로써 국민의 정치적 의사형성에 참여함으로 목적으로 하는 국민의 자발적 조직</li></ul></li></ul><blockquote><p>G. Sartori</p><blockquote><p>대의민주주의에서 정당은 “사회와 정부를 연결하는 핵심적 매개체”</p></blockquote></blockquote><blockquote><p>국민이 대표를 통해 권력을 행사한다는 대의민주주의 이념은 정당을 통해 실현</p></blockquote><h3 id="정당의-기능"><a href="#정당의-기능" class="headerlink" title="정당의 기능"></a>정당의 기능</h3><ul><li>이익집약과 이익표출<ul><li>이익집약 : 각 집단들에 의해 제기된 요구를 정책으로 결합</li><li>이익표출 : 시민들의 정치체계에 대한 요구를 수행</li></ul></li><li>사회적 갈등의 조정(사회통합)<ul><li>분산된 여론으로부터 발생되는 사회적 갈등을 위임 받아 처리<ul><li>정책결정과정에서 사회통합을 위한 최대공약수를 찾는 작업</li></ul></li></ul></li><li>정치적 충원과 참여의 조장</li><li>정부의 조직과 통제</li><li>정치적 과제 설정, 정치사회화, 정치체계 유지, …</li></ul><hr><h1 id="Election"><a href="#Election" class="headerlink" title="Election"></a>Election</h1><ul><li>다수대표제<ul><li>선거방식 : 후보자에게 투표</li><li>선거구제 : 소선구제</li></ul></li><li>비례대표제<ul><li>선거방식 : 정당에 투표</li><li>선거구제 : 중, 대선거구제</li></ul></li></ul><h2 id="선거구제"><a href="#선거구제" class="headerlink" title="선거구제"></a>선거구제</h2><blockquote><p>하나의 선거구에서 선출되는 대표자의 수에 따라 구분</p></blockquote><table><thead><tr><th align="center">소선거구제</th><th align="center">중, 대선거구제</th></tr></thead><tbody><tr><td align="center">1명의 대표자만을 선출</td><td align="center">2명 이상의 대표자를 선출</td></tr><tr><td align="center">장점 : 선거 비용이 적게 들고 유권자가 후보자를 선택하기 비교적 쉬우며 선거관리가 쉽고 정국이 안정됨</td><td align="center">장점 : 사표가 적게 발생하고, 신인이나 군소 정당 후보의 당선 가능성이 높아져 국민의 다양한 의사 반영 가능</td></tr><tr><td align="center">단점 : 후보자 중에서 1명만 당선되기 때문에 인기가 높은 후보나 주요 정당 후보에게 유리하고, 사표가 많이 발생</td><td align="center">단점 : 선거비용이 많이 들고, 상대적으로 많은 수의 후보가 입후보하기 때문에 유권자의 후보자 파악이 어려움</td></tr><tr><td align="center">우리나라에서는 국회의원, 지방 자치단체장 및 광역 지방의회 의원선거에서 소선거구제를 채택</td><td align="center">우리나라 기초 지방의회 의원선거는 선거구별로 2~4명의 대표자를 선출하는 중선거구제로 분류</td></tr></tbody></table><h2 id="선거결정방식"><a href="#선거결정방식" class="headerlink" title="선거결정방식"></a>선거결정방식</h2><h3 id="다수대표제"><a href="#다수대표제" class="headerlink" title="다수대표제"></a>다수대표제</h3><ul><li>단순다수제<ul><li>상대다수제<ul><li>단순다수대표제</li><li>상대다수대표제</li></ul></li><li>가장 많은 표를 얻은 후보가 당선자로 결정</li><li>선출된 당선자의 대표성이 낮을 수 있음<ul><li>20 ~ 30%를 득표하더라도 다른 후보보다 1표라도 더 많이 얻으면 당선</li></ul></li></ul></li><li>절대다수제<ul><li>과반수(50% + 1표) 이상 득표한 후보가 당선자로 결정</li></ul><ol><li>결선투표제<ul><li>두 번에 걸친 선거(1차, 2차)를 치뤄 당선자 결정</li></ul></li><li>선호투표제<ul><li>유권자가 후보 전체를 대상으로 선호하는 순위를 적고, 개표 과정에서 제거와 배분을 반복하면서 투표 용지에 1선호 표기가 50% + 1표를 넘기는 후보가 나타나면 당선</li></ul></li></ol></li><li>장점<ul><li>(선호투표제 제외) 투표나 개표절차가 매우 간단하며, 유권자는 가장 선호하는 1인에게 투표하면 되기 때문에 당선자 결정도 단순함</li><li>전국을 여러 개의 선거구로 분할해 선거구 당 1인의 대표를 선출하기 때문에 각 선거구 유권자는 자신의 대표를 명확히 인지할 수 있음</li></ul></li><li>단점<ul><li>(단순다수제) 다수의 사표 발생 : 당선자의 (낮은) 대표성 문제</li><li>(절대다수제) 결선투표제의 경우 선거관리 비용 증가, 선호투표제의 경우 유권자의 편의성이 낮다는 문제가 있음</li><li>대정당에게 유리하며, 군소정당에게는 불리한 ‘과대/과소대표’ 문제</li><li>다수대표제는 소선거구제와 결합하여 후보 중심적 성격을 가지므로 후보 중심의 선거운동이 이뤄지며 정당 약화를 초래할 수 있음</li></ul></li></ul><h3 id="비례대표제"><a href="#비례대표제" class="headerlink" title="비례대표제"></a>비례대표제</h3><ul><li>개념<ul><li>정당이 득표한 만큼의 의석을 갖는 선거제도(득표율에 따른 의석 배분)</li></ul><ol><li>명부 작성 방식과 유권자 투표 방식에 따라 폐쇄형, 개방형 정당명부식 비례대표제로 구분<ul><li>정당명부식 비례대표제</li></ul></li><li>의석 배분을 위한 다양한 공식 존재 : (완전)비례형, 연동형, 병립형 비례대표제 등 다양한 방식의 조합 가능<ul><li>준 연동형 비례대표제</li></ul></li></ol></li><li>비례형<ul><li>지역구 선거를 치르지 않고, 의원 전원을 비례대표로 선출</li><li>노르웨이, 네덜란드에서 채택</li></ul></li><li>혼합형 선거제도<ul><li>일반적으로 소선거구 단순다수제와 (정당명부식) 비례대표제 결합</li></ul></li><li>병립형<ul><li>지역구 의석과 비례대표 의석이 처음부터 배분되어 있어서, 두 가지 선거제도가 서로 관련없이 독립적으로 운용되는 선거제도</li><li>정당 투표 결과는 비례대표 의석 내에서 배분(전체 의석 고정)</li><li>대한민국 제21대 국회의원 이전 선거까지 채택하고 있었던 제도</li></ul></li><li>연동형<ul><li>두 가지 선거제도가 상호 연동되어 운용되는 선거제도</li><li>비례대표 득표율(정당 투표 결과)을 의석 전체에 적용 - 지역구 선거 결과와 연동함으로써 정당득표율이 최종 의석수에 가장 근접하도록 조정 : 초과의석(Overhang seat) 발생 가능성</li><li>독일 연방 하원, 대한민국의 제21대 국회의원 선거에서 준 연동형 채택</li></ul></li><li>장점<ul><li>다수대표제에 비해 군소정당에게 유리</li><li>사표가 적게 발생하며, 군소정당 지지 유권자의 표가 투표결과에 반영될 가능성이 높음</li><li>다수대표제에 비해 ‘비례성’이 높음(비례성은 득표율과 의석율의 차이)</li><li>정치적 소수자나 약자에 대한 배려 가능</li></ul></li><li>단점<ul><li>선거구민과 대표 간의 관계가 명확하지 않을 수 있음<ul><li>누가 나의 대표인가?</li></ul></li><li>유권자가 후보 선택에 미칠 수 있는 영향력이 거의 없음<ul><li>폐쇄형 정당명부식 비례대표제의 경우, 정당 명부에 어떤 후보가 오르고 어떤 후보가 상위에 배치되는지에 대해 유권자가 영향력을 행사할 여지 희박</li></ul></li></ul></li></ul><hr><h1 id="Political-Communication-Media-and-Public-Opinion"><a href="#Political-Communication-Media-and-Public-Opinion" class="headerlink" title="Political Communication (Media and Public Opinion)"></a>Political Communication (Media and Public Opinion)</h1><h2 id="여론-Pulbilic-opinion"><a href="#여론-Pulbilic-opinion" class="headerlink" title="여론(Pulbilic opinion)"></a>여론(Pulbilic opinion)</h2><ul><li>여론의 개념<ul><li>개인의 의견이 아닌, 집단을 이루고 있는 사람들의 의견</li><li>어떤 문제, 특히 집단 구성원들과 관계 있는 문제를 중심으로 형성되는 의견</li><li>개인 의견들의 단순한 합이 아닌, 자유로운 커뮤니케이션의 결과로 이룩되는 의견</li></ul></li></ul><blockquote><p>어떤 집단 구성원들과 관계 있는 문제를 중심으로 집단 구성원들 사이에 자유로운 커뮤니케이션이 행해진 결과로 그 집단 구성원들의 다수가 자발적으로 지지하게 된 의견</p></blockquote><ul><li>정치와 여론<ul><li>국민의 상당수가 갖고 있는 쟁점 이슈에 대한 다양한 견해</li><li>공통적 관심대상인 어떤 이슈에 대한 공동체의 판단</li></ul></li></ul><blockquote><p>정치적 결정에 영향을 미치는 의견 및 조직적으로 결집된 의견</p></blockquote><h3 id="여론의-형성과정"><a href="#여론의-형성과정" class="headerlink" title="여론의 형성과정"></a>여론의 형성과정</h3><ol><li>논점, 쟁점 대두</li><li>다수에게 인지된 후, 전달단계를 거쳐 더 많은 사람들이 논점을 인지</li><li>여러 행위를 거쳐 개인의 의견 형성</li><li>매스미디어 등의 다양한 방법으로 가시화</li><li>개인들의 의견이 점차 하나의 의견으로 모아지면서 합의 도출</li></ol><ul><li>개인 의견 형성<ul><li>어떤 문제에 대한 관심</li><li>문제를 둘러싼 요인 인지</li><li>요인을 해석, 평가, 판단</li><li>평가, 판단을 언어로 표현</li></ul></li><li>공동 의견 형성<ul><li>사회적 관계를 통해 집단을 형성하여, 토의와 상호작용을 통해 의견을 조직화함으로써 공동의 의견으로 확대-발전</li></ul></li></ul><h3 id="여론의-특성과-본질"><a href="#여론의-특성과-본질" class="headerlink" title="여론의 특성과 본질"></a>여론의 특성과 본질</h3><ul><li>유동성<ul><li>다른 쟁점이 부각되거나 다른 관심사가 나타나면 달라질 수 있으며, 상황에 따라 변하기 때문에 문제가 제기된 당시에 한시적으로 존재하는 다수의 공통적인 의견이라 볼 수 있음</li></ul></li><li>선호문제에 대한 의견 차이<ul><li>어떤 것이 좋고 나쁘다고 평가할 수 있는 과학적인 방법은 없음</li><li>개인이 선호하는 의견은 개인의 신념이나 취향일 수 있기 때문에 어느 것이 좋다 나쁘다는 평가가 어려움</li></ul></li><li>사회 전체를 대표한다고 볼 수 없음<ul><li>여론은 다수가 가지고 있는 공통된 의견으로 볼 수 있지만, 사회 일부분의 의견으로 각기 다른 여론 간의 균열(Cleavage)을 전제하고 있어 논란의 여지를 내포</li></ul></li><li>구체적인 쟁점이나 관심과 관련하여 형성된 구체적 의견<ul><li>소문이나 유언비어와 구별, 공공문제와 관련된 공중의 관심사로 부각된 쟁점이나, 논의가 진행 중에 있거나 또는 제안에 대하여 형성된 의견</li></ul></li></ul><h3 id="여론의-측정"><a href="#여론의-측정" class="headerlink" title="여론의 측정"></a>여론의 측정</h3><blockquote><p>일반 대중의 의견이나 경향 등에 대해서 면접이나 질문서 등을 사용하여 조사하는 것</p></blockquote><ul><li>여론조사(Opinion polls)<ul><li>모집단으로부터 체계적으로 추출한 표본을 대상으로 표준화된 방식으로 묻는 일련의 질문</li><li>흔히 미디어를 위해 실시하는 시사문제에 관한 간단한 설문조사를 의미, 일반적으로 면접원에 의한 직접대면조사 또는  전화조사, 이메일 조사 등의 방식으로 이뤄짐</li></ul></li><li>표본설문조사(Sample surveys)<ul><li>여론조사와 마찬가지 방법을 사용하여 수행되지만, 보다 자세한 설문지를 사용</li><li>의의<ul><li>‘국민의 의견은 국민에게 물어보면 알 수 있다’는 아이디어</li><li>무작위 추출이라는 통계학적 이론과 기술을 바탕으로 발달</li><li>사회 전반에 걸쳐 국민의 의견을 중심치로 집약함으로써 개인이 자신의 의견을 다수 의견과 비교할 수 있게 함</li><li>통계 숫자를 인용하는 등 여론조사 결과를 반영하는 언론기사는 여론을 형성하고 수렴하는 데 기여함</li></ul></li></ul></li></ul><h3 id="여론조사의-중요조건-및-윤리강령"><a href="#여론조사의-중요조건-및-윤리강령" class="headerlink" title="여론조사의 중요조건 및 윤리강령"></a>여론조사의 중요조건 및 윤리강령</h3><ul><li>중요 조건<ul><li>의도적 자료 조작이나 부적절한 분석방법 등을 통해 자칫 여론을 오도하거나 조작할 우려가 있으며, 그러한 유혹은 상존함</li><li>정확성과 신뢰도는 여론조사의 가장 중요한 조건이며, 여론조사의 긍정적 역할을 강화하기 위해 공정성과 명확한 기준 필요</li></ul></li><li>여론조사 윤리강령(권장사항)<ul><li>조사의 의뢰자(스폰서)</li><li>조사하고자 하는 모집단</li><li>전체 표본의 정확한 크기</li><li>표본오차와 결과에 대한 신뢰수준</li><li>조사의 구체적 방법</li><li>조사 기간 (또는 시기)</li><li>실사에 사용된 설문지</li><li>독자들이 표본의 대표성을 확보할 수 있도록 응답자의 인구사회학적 속성(지역, 성별, 연령, 학력 등)</li></ul></li></ul><h2 id="정치커뮤니케이션-이론"><a href="#정치커뮤니케이션-이론" class="headerlink" title="정치커뮤니케이션 이론"></a>정치커뮤니케이션 이론</h2><ul><li>의제 설정(Agenda-setting)<ul><li>Walter Lippman : “사람들은 매스미디어의 보도 활동에 의존하여 현실세계를 인식한다” 주장에 근거</li><li>1972년, McCombs &amp; Shaw는 1968년 미국 대통령선거 캠페인 과정에서 매스미디어가 유권자들의 태도 변화에는 별로 효과를 내지 못했지만, 무엇이 당면한 주요 의제인가를 설정하는 인식 변화에는 지대한 영향을 끼쳤음을 연구하여 의제설정 효과를 경험적으로 증명하였음</li><li>매스미디어가 특정한 이슈들을 중요한 것으로 강조하여 부각시킬 경우 수용자들도 그러한 이슈를 중요한 것으로 인식하게 되는 현상</li><li>매스미디어는 수용자에게 ‘어떻게 생각하도록’ 하기 보다는 ‘무엇에 대해 생각할 것인가’를 결정하는데 영향을 미친다는 것</li></ul></li><li>침묵의 나선(Spiral of silence)<ul><li>1974년, Noelle-Neumann의 이론</li><li>개인은 고립되거나 소외되는 것에 공포를 느낌</li><li>개인은 자신의 의견이 다수 의견에 속하는지 소수 의견에 속하는지 민감하게 반응함</li><li>자신의 견해가 우세 여론과 일치하면 적극적인 의견 표명을 하지만, 자신의 의견이 소수 의견이라고 느낄 경우, 그 의견을 표출하여 고립되기보다는 침묵을 지킴</li><li>매스미디어에 의해 지배적인 것으로 표현된 의견(실제로는 소수 의견일 수도 있음에도 불구하고)이 있고 그 의견에 대한 사람들의 지지가 이뤄지면, 많은 사람들이 매스미디어의 의견을 다수 의견으로 간주함으로써 다른 자신의 의견을 밝히지 않고 침묵하게 되는 현상</li><li>침묵하는 다수(Silent majority), Shy 보수 현상과 연결</li></ul></li><li>점화 효과(Priming effect)<ul><li>1993년, Lyenger &amp; Simon의 이론</li><li>Priming : 뇌관, 점화약, 기폭제, 애벌칠, …<ul><li>심리학 : 먼저 얻은 정보가 나중에 얻은 정보에 영향을 미치는 심리 현상</li><li>행동경제학 : 사건을 이해하거나 반응하기 위해 자신이 가진 지식이나 기억, 다수가 제시하는 틀을 바탕으로 사건을 해석하고 뜻을 형성하는 행위</li></ul></li><li>매스마디어가 제공하는 특정한 정보의 자극을 받아 그에 관련된 기억들이 다시 촉발되는 현상</li><li>매스미디어가 판단 기준 설정의 조력자로 기능</li><li>중요한 결정의 순간, 매스미디어가 제공한 특정한 정보가 판단의 기준이 됨</li></ul></li><li>틀짓기 효과(Framing effect)<ul><li>1978년, Tuchman의 편집국 참여관찰 연구</li><li>Frame : 틀, 액자, 안경테, …</li><li>뉴스 생산자인 뉴스 조직이 현실의 사건을 선택, 가공, 편집하여 수용자에게 현실을 바라보는 하나의 틀(Frame)을 제공함</li><li>정치적 사안들에 대한 수용자들의 인식이 그 사안에 대한 매스미디어의 해석적 관점에 영향을 받는 현상</li><li>정치적 사안들의 상대적 중요도를 제시하는 의제설정 효과와 달리 점화효과, 틀짓기 효과는 사안에 대한 사람들의 인지적, 감성적 틀을 제공한다는 점에서 더욱 강력한 영향력을 행사하게 됨</li></ul></li></ul><hr><h1 id="Modern-Politics-and-Various-Issues-Media-and-Elections"><a href="#Modern-Politics-and-Various-Issues-Media-and-Elections" class="headerlink" title="Modern Politics and Various Issues(Media and Elections)"></a>Modern Politics and Various Issues(Media and Elections)</h1><h2 id="여론조사와-선거"><a href="#여론조사와-선거" class="headerlink" title="여론조사와 선거"></a>여론조사와 선거</h2><ul><li>여론조사와 선거<ul><li>선거결과의 예측과 표본조사의 정확성 : 제2차 세계대전 이후 치러진 모든 미국 선거에서 주요 정당의 득표율에 대한 예측의 오차는 평균 1.5%에 불과</li><li>여론조사와 선거는 의견의 강약에 관계없는 표의 등가성을 전제로 한다는 공통점이 있음</li></ul></li><li>여론조사와 의제설정<ul><li>여론조사를 누가 의뢰하는가? : 여론조사 자체가 일종의 의제설정</li><li>Althaus(2003) : “질문을 받기 전까지는 질문 받은 주제에 대해 전혀 생각해보지 않았을 수도 있다”</li><li>무조건적 동의현상(Yea-saying) : 사람들은 어떤 진술에 대해 아무런 의견이 없으면서도 의견을 이야기하거나 또는 동의한다고 대답하는 것이 수월하기에 그냥 동의한다고 이야기할 수도 있음</li><li>여론조사가 갖는 위험성은 심지어 여론을 측정하는 순간에도 여론조사가 여론의 형성을 돕는다는 점</li></ul></li></ul><h2 id="여론의-측정-1"><a href="#여론의-측정-1" class="headerlink" title="여론의 측정"></a>여론의 측정</h2><h3 id="초점집단조사-Focus-Group-Interview-FGI"><a href="#초점집단조사-Focus-Group-Interview-FGI" class="headerlink" title="초점집단조사(Focus Group Interview, FGI)"></a>초점집단조사(Focus Group Interview, FGI)</h3><ul><li>특정 주제에 관해 소수의 응답자와 집중적인 대화, 인터뷰를 진행하거나, 함께 토론하는 방식의 조사 기법</li><li>일정한 자격기준에 따른 6 ~ 12명의 응답자를 선발하여 한 장소에서 면접자의 진행 아래 조사목적과 관련된 인터뷰나 토론 실시</li><li>사람들의 태도 속에 숨겨져 있는 생각과 감정을 알아보기 위해 개방형 질문을 사용하는 질적(Qualitative) 연구방법</li><li>장점 : 조사가 신속하고, 상대적으로 비용이 적게 들면서도 문제 핵심을 심층적 혹은 탐색적으로 접근하고 유연성 있게 풀어갈 수 있으며, 복잡한 문제를 총체적으로 파악하고 분석할 수 있음</li><li>여론조사에 비해 집단의 규모가 작고, 표본(Sample)의 자의적 선택이 심하지만 여론조사에 사용되는 미리 정해진 답변으로부터 얻을 수 있는 것보다 훨씬 더 완전한 이해를 목적으로 하는 조사</li></ul><h3 id="공론조사"><a href="#공론조사" class="headerlink" title="공론조사"></a>공론조사</h3><ul><li>특정 주제에 대해 사람들에게 찬, 반 정보를 제공하고 토론을 통해 형성된 공론(Public judgment)을 끌어내는 여론 조사 방식</li><li>소규모 표본에게 주어진 주제에 대한 다양한 의견을 접할 수 있도록 하고, 주제와 관련된 구체적 내용을 파악한 상태에서 토론을 전개하고 판단을 내리도록 함</li><li>일반적인 여론조사와 소규모 집단토론을 결합한 것으로 중요한 사회 문제나 정책에 대해 짧은 정보로만 대응하는 여론조사의 한계를 보완한 조사 방식</li><li>토론하며 고민한다는 뜻으로 ‘숙의형 여론조사(Deliberative opinion poll)’라고 부르기도 함</li><li>Fishkin(1991) : “일반적인 여론조사는 주어진 이슈에 대해 거의 알지 못하는 상황에서 대중이 무슨 생각을 하는지 설명한다. 공론조사는 대중에게 이슈에 대해 생각할 기회가 충분히 주어졌을 경우 대중이 무슨 생각을 할 것인지를 설명한다.”</li></ul><h2 id="투표-행위와-매스미디어"><a href="#투표-행위와-매스미디어" class="headerlink" title="투표 행위와 매스미디어"></a>투표 행위와 매스미디어</h2><ul><li>선거<ul><li>대표를 선출하는 일련의 과정</li><li>대의민주주의에서 주권을 행사하는 가장 기본적인 수단</li><li>국민의 의지를 국가의 통치 과정에 반영하는 대표적인 방법</li></ul></li><li>투표에 영향을 주는 요인<ul><li>정당(소속감)</li><li>정책(이슈)</li><li>후보자(이미지)</li></ul></li><li>매스미디어의 활성화와 정당의 퇴조<ul><li>여론의 가변성 증대, 단기적 정보의 중요성이 확대되며 도시화, 직업 분화 등으로 인구학적 요인이 불안정해지면서 유권자의 투표 행위에 큰 영향을 미쳤던 정당의 영향력을 약화시키고 선거기간 중에 행해지는 선거 캠페인의 영향력을 확대시킴</li><li>매스미디어의 활성화는 후보자 선택에서 후보자의 개인적 속성과 선거 캠페인의 중요성을 증가시켜 정당의 영향력을 약화시키게 되었음</li><li>결국 매스미디어는 후보자의 개인적 속성과 정치적 이슈의 중요성을 증가시키는 결과를 초래</li></ul></li></ul><h2 id="정치광고"><a href="#정치광고" class="headerlink" title="정치광고"></a>정치광고</h2><ul><li>정치광고란?<ul><li>정당이나 후보들이 돈을 지불하여 매스미디어를 통해 유권자를 직접 접촉할 수 있는 기회를 획득해 유권자의 정치적 태도, 신념, 행동 등에 영향을 미치려는 의도를 가지고 철저한 관리 하에 정치적 메시지를 직접 전달하는 커뮤니케이션</li></ul></li><li>정치광고의 종류<ul><li>후보 소개 광고(Identification ad) : 후보가 유권자들에게 자신을 소개하고 자신의 인지도를 구축할 목적으로 하는 광고, 현직자에 도전하는 사람들과 유권자들에게 잘 알려지지 않은 후보들이 많이 사용</li><li>주장 광고(Argument ad) : 후보 자신의 기본적 정치 성향과 주요 이슈에 대한 입장을 전달하기 위한 광고</li><li>공격 광고(Attack ad), 부정적 광고(Negative ad) : 직접적으로 상대방에 초점을 맞추어 상대방의 지도력, 성실성, 능력 등에 대해 의문을 제기하거나 공격하는 광고</li><li>긍정적 광고(Positive ad) : 후보의 공약 및 비전에 관한 내용을 담은 광고</li></ul></li><li>다양한 분류<ul><li>직접적인 정공법 : 선거 공약에 초점</li><li>부드러운 포장법 : 후보자의 이미지에 초점</li><li>감성적 기법 : 감성에 어필하는 이미지 마케팅 초점</li><li>논리적 기법 : 구체적 사례를 활용하여 논리 구성</li><li>윤리적 기법 : 평범한 인물을 활용해 후보자의 능력, 경력 강조</li></ul></li></ul><hr><h1 id="Perspective-of-International-Politics"><a href="#Perspective-of-International-Politics" class="headerlink" title="Perspective of International Politics"></a>Perspective of International Politics</h1><ul><li>국제정치학<ul><li>기본적으로 전쟁과 평화에 관한 연구</li><li>국가 간의 갈등이나 전쟁의 원인을 둘러싼 문제들을 연구</li></ul></li></ul><h2 id="국제정치학-국제관계학"><a href="#국제정치학-국제관계학" class="headerlink" title="국제정치학, 국제관계학"></a>국제정치학, 국제관계학</h2><ul><li>행위자(Actor)<ul><li>국제관계의 전통적 행위자 : 국가</li><li>국가와 같이 주권, 국민, 영토를 보유하고 있지는 않지만, 국가를 가로지르며 횡단하는 횡국가적 행위자(Transnational Actor)의 영향력이 증대하고 있음</li><li>정치적 관계 뿐 아니라 경제적, 문화적, 사회적 영역에서 국가의 경계를 초월하여 일어나는 폭넓은 교류와 관계를 포함</li></ul></li><li>국제기구 : 복수의 정부에 의하여 공식적인 조직과 규정을 가지고 있는 조직<ul><li>정부간기구(IGO, Intergovernmental Organization) : 정부를 구성원으로 하는 국제기구</li><li>국제 비정부기구(INGO, International Nongovernmental Organization) : NGO를 가입대상으로 하며 다수의 국가에서 활동하는 국제기구</li><li>혼합국제기구(Hybrid International Organization) : 국가와 비정부기구가 함께 참여하는 국제기구</li></ul></li></ul><h2 id="국제정치의-세-가지-기본-관점"><a href="#국제정치의-세-가지-기본-관점" class="headerlink" title="국제정치의 세 가지 기본 관점"></a>국제정치의 세 가지 기본 관점</h2><ul><li>현실주의(Realism) - 국가안보<ul><li>국제관계를 ‘국가들 간 힘의 정치’로 파악하는 이론</li><li>국제정치에서 가장 중요하고, 단일한 행위자는 국가</li><li>국가들로 이루어진 국제체제는 무정부 상태(Anarchy)</li><li>국가의 최우선 이익은 안전보장, 국가의 생존</li><li>평화보다 전쟁이 자연스러운 것이므로 평화의 확대, 유지보다는 전쟁의 발발을 최소화하는 것이 낫다!</li><li>세력 균형(Balance of power) : 힘에 의한 힘의 억제</li><li>패권안정론(Hegemonic stability theory) : 패권국의 존재</li><li>세계 2차 대전 이전에는 국제 도덕과 여론, 국제법 및 국제기구 등이 중시(자유주의, 이상주의)되었으나 참혹한 2차 대전을 거친 후 이러한 낙관론에 대한 비판이 팽배해지면서 현실주의적 관점이 힘을 얻게 됨</li></ul></li><li>자유주의(Liberlism) - 협력, 상호의존<ul><li>국제정치에서 전쟁보다 평화나 협상이 훨씬 더 일상적인 일이며, 전쟁은 아주 예외적인 것으로 상대방에 대한 무지나 오해에서 비롯된 일탈이라고 보는 시각</li><li>국가 간의 협력이 증대되면 함부로 전쟁을 일으키기 힘들기 때문에 노력에 따라서 영구적 평화 유지 가능</li><li>합리적 국가는 장기적인 복지의 극대화를 위해 국가 간 협력에 참여하고 증대 시켜 나갈 것이라는 전제</li><li>국가 뿐 아니라 다양한 국제정치 행위자가 존재하고, 외교, 군사적 이슈 뿐 아니라 경제, 사회, 문화 등 다양한 이슈가 교차하며 이들 모두가 중요함</li><li>국가 간 협력의 가능성과 초국적 행위자의 영향력 증대</li><li>상호의존성(Interdependence)의 증대와 전쟁가능성 감소</li><li>국제연합(UN), 유럽연합(EU)</li></ul></li><li>구조주의(Structuralism) - 경제적 불평등<ul><li>전쟁이나 평화와 같은 이슈들은 단지 밖으로 나타나는 현상일 뿐 정말 중요한 것은 경제문제라고 주장</li><li>국제정치란 초국가적인 자본주의 질서의 필요에 따라 움직이는 것이고 그 결과 계급갈등이 반영된 것에 불과</li><li>현실주의가 관심을 기울이는 안보위협은 결국 자본주의 질서가 필연적으로 초래하는 불평등으로 말미암은 것</li><li>자유주의자들이 추구하는 평화, 국제협력은 결국 강대국이나 다국적기업의 이익을 대변하는 것에 불과</li><li>맑스주의 국제정치이론 : 세계경제체제, 즉 세계자본주의체제의 모순적인 구조(지배-착취)를 그대로 유지해서는 벗어날 수 없으므로 혁명적 방법을 강구해야 함</li></ul></li></ul><h2 id="세계대전과-냉전-질서"><a href="#세계대전과-냉전-질서" class="headerlink" title="세계대전과 냉전 질서"></a>세계대전과 냉전 질서</h2><ul><li>제1차 세계대전(1914 ~ 1918)<ul><li>1914년 7월 28일, 오스트리아가 세르비아에 대한 선전포고를 하면서 시작</li><li>1918년 11월 11일, 독일의 항복으로 끝난 세계적 규모의 전쟁</li><li>영국, 프랑스, 러시아 등의 연합국 vs. 독일, 오스트리아, 헝가리 동맹국</li></ul></li><li>제2차 세계대전(1939 ~ 1945)<ul><li>1939년 9월 1일, 독일의 폴란드 침공과 이에 대한 영국과 프랑스의 대독 선전포고에서 발발</li><li>1945년 8월 15일, 일본의 항복으로 종결</li><li>영국, 프랑스, 미국, 소련 등의 연합국 vs. 독일, 이탈리아, 일본 등의 주축국</li><li>1944년 브레튼우즈 협정 : 미국 달러가 세계의 기축통화가 됐고 미국 중심의 경제 체제 성립</li></ul></li><li>냉전(Cold war, 1945 ~ 1989)<ul><li>1945년 얄타회담(연합국 간) ~ 1989년 몰타회담(미, 소)</li><li>승전국인 연합국 간 대립(영국, 미국, 프랑스 vs. 소련) 격화의 결과<ul><li>독일은 동독, 서독으로 분단</li><li>대한민국은 남과 북으로 분단</li></ul></li><li>동맹과 진영, 이념 대결, 군비경쟁, 안보 딜레마의 시대</li><li>자유주의 진영과 사회주의 진영, 동서간의 팽팽한 긴장과 군사대치에도 불구하고 세계적 규모의 전쟁이 없었던 긴 평화(Long peace)의 시대</li><li>데탕트(Detente, 협력) : 평화적 공존</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/etc/">Etc.</category>
      
      
      
      <comments>https://zerohertz.github.io/political-science/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Classification</title>
      <link>https://zerohertz.github.io/classification/</link>
      <guid>https://zerohertz.github.io/classification/</guid>
      <pubDate>Wed, 26 Aug 2020 08:04:38 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Classification&quot;&gt;&lt;a href=&quot;#Classification&quot; class=&quot;headerlink&quot; title=&quot;Classification&quot;&gt;&lt;/a&gt;Classification&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;A form of data analysis that extracts models describing important data classes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Learning step : A classifier is built describing a predetermined set of data classes or concepts&lt;/li&gt;
&lt;li&gt;Classification step : The model is used to predict class labels for given data&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Model-Evaluation-and-Selection&quot;&gt;&lt;a href=&quot;#Model-Evaluation-and-Selection&quot; class=&quot;headerlink&quot; title=&quot;Model Evaluation and Selection&quot;&gt;&lt;/a&gt;Model Evaluation and Selection&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;Measure&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Formula&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;accuracy, recognition rate&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;$\frac{TP+TN}{P+N}$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;error rate, misclassification&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;$\frac{FP+FN}{P+N}$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;sensitivity, true positive rate, recall&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;$\frac{TP}{P}$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;specificity, true negative rate&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;$\frac{TN}{N}$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;precision&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;$\frac{TP}{TP+FP}$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Classification"><a href="#Classification" class="headerlink" title="Classification"></a>Classification</h1><blockquote><p>A form of data analysis that extracts models describing important data classes</p></blockquote><ol><li>Learning step : A classifier is built describing a predetermined set of data classes or concepts</li><li>Classification step : The model is used to predict class labels for given data</li></ol><h2 id="Model-Evaluation-and-Selection"><a href="#Model-Evaluation-and-Selection" class="headerlink" title="Model Evaluation and Selection"></a>Model Evaluation and Selection</h2><table><thead><tr><th align="center">Measure</th><th align="center">Formula</th></tr></thead><tbody><tr><td align="center">accuracy, recognition rate</td><td align="center">$\frac{TP+TN}{P+N}$</td></tr><tr><td align="center">error rate, misclassification</td><td align="center">$\frac{FP+FN}{P+N}$</td></tr><tr><td align="center">sensitivity, true positive rate, recall</td><td align="center">$\frac{TP}{P}$</td></tr><tr><td align="center">specificity, true negative rate</td><td align="center">$\frac{TN}{N}$</td></tr><tr><td align="center">precision</td><td align="center">$\frac{TP}{TP+FP}$</td></tr></tbody></table><a id="more"></a><ul><li>True positives ($TP$) : 참인 데이터를 참으로 분류</li><li>True negatives ($TN$) : 거짓인 데이터를 거짓으로 분류</li><li>False positives ($FP$) : 거짓인 데이터를 참으로 분류</li><li>False negatives ($FN$) : 참인 데이터를 거짓으로 분류</li></ul><table><thead><tr><th align="center">Actual class\Predicted class</th><th align="center">yes</th><th align="center">no</th><th align="center">Total</th></tr></thead><tbody><tr><td align="center">yes</td><td align="center">$TP$</td><td align="center">$FN$</td><td align="center">$P$</td></tr><tr><td align="center">no</td><td align="center">$FP$</td><td align="center">$TN$</td><td align="center">$N$</td></tr><tr><td align="center">Total</td><td align="center">$P’$</td><td align="center">$N’$</td><td align="center">$P+N$</td></tr></tbody></table><p>$$<br>accuracy=\frac{TP+TN}{P+N}<br>$$<br>$$<br>error\ rate=\frac{FP+FN}{P+N}<br>$$</p><h2 id="Techniques-to-Improve-Classification-Accuracy"><a href="#Techniques-to-Improve-Classification-Accuracy" class="headerlink" title="Techniques to Improve Classification Accuracy"></a>Techniques to Improve Classification Accuracy</h2><h3 id="Bagging"><a href="#Bagging" class="headerlink" title="Bagging"></a>Bagging</h3><ul><li>$n$크기의 Training set $D$가 주어졌을 때, 배깅은 $m$개의 복원 표본추출 방법과 균등 확률분포를 이용해 각각 $n’$크기를 갖는 새로운 훈련 집합 $D_i$를 생성</li><li>복원 표본추출 방법에 의해 일부 관측 데이터는 각 $D_i$에서 반복해서 나타날 수 있음</li><li>만약 $n’=n$이라고 하면, 보다 큰 $n$에 대해 집합 $D_i$는 $D$에 대해 고유한 샘플의 비율은 $1-\frac{1}{e}$을 가질 것으로 기대됨</li><li>이러한 샘플을 Bootstrap 샘플이라 함</li><li>$m$개의 모델은 $m$개의 Bootstrap 샘플들을 이용해 만들어지고 결과를 평균(in regression) 또는 투표(in classification)를 통해 결합</li></ul><h3 id="Improving-Classification-Accuracy-of-Class-Imbalanced-Data"><a href="#Improving-Classification-Accuracy-of-Class-Imbalanced-Data" class="headerlink" title="Improving Classification Accuracy of Class-Imbalanced Data"></a>Improving Classification Accuracy of Class-Imbalanced Data</h3><ul><li>Oversampling : 부족한 데이터를 Resampling</li><li>Undersampling : 많은 데이터를 Decreasing</li><li>Threshold-moving</li><li>Ensemble techniques</li></ul><h1 id="Advanced-Methods"><a href="#Advanced-Methods" class="headerlink" title="Advanced Methods"></a>Advanced Methods</h1><h2 id="Bayesian-Belief-Networks"><a href="#Bayesian-Belief-Networks" class="headerlink" title="Bayesian Belief Networks"></a>Bayesian Belief Networks</h2><h2 id="Classification-by-Backpropagation"><a href="#Classification-by-Backpropagation" class="headerlink" title="Classification by Backpropagation"></a>Classification by Backpropagation</h2><h3 id="A-Multilayer-Feed-Forward-Neural-Network"><a href="#A-Multilayer-Feed-Forward-Neural-Network" class="headerlink" title="A Multilayer Feed-Forward Neural Network"></a>A Multilayer Feed-Forward Neural Network</h3><p><img src="https://user-images.githubusercontent.com/42334717/89788337-f3f95f00-db59-11ea-9b1e-6cf13e2c398a.png" alt="Feed-Forward Neural Network"></p>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/book/">Book</category>
      
      <category domain="https://zerohertz.github.io/categories/book/data-mining/">Data Mining</category>
      
      
      <category domain="https://zerohertz.github.io/tags/machine-learning/">Machine Learning</category>
      
      <category domain="https://zerohertz.github.io/tags/signal-processing/">Signal Processing</category>
      
      <category domain="https://zerohertz.github.io/tags/dnn/">DNN</category>
      
      <category domain="https://zerohertz.github.io/tags/statistics/">Statistics</category>
      
      
      <comments>https://zerohertz.github.io/classification/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>hexo-generator-redirect</title>
      <link>https://zerohertz.github.io/hexo-generator-redirect/</link>
      <guid>https://zerohertz.github.io/hexo-generator-redirect/</guid>
      <pubDate>Thu, 20 Aug 2020 11:46:01 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Hexo&lt;/code&gt;에서 &lt;code&gt;url&lt;/code&gt;을 &lt;code&gt;redirection&lt;/code&gt;해주는 플러그인&lt;/p&gt;
&lt;h1 id=&quot;Install&quot;&gt;&lt;a href=&quot;#Install&quot; class=&quot;headerlink&quot; title=&quot;Install&quot;&gt;&lt;/a&gt;Install&lt;/h1&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.css&quot;&gt;
            &lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/prismjs/themes/prism-tomorrow.css&quot;&gt;
            &lt;script src=&quot;//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.js&quot;&gt;&lt;/script&gt;
            &lt;div id=&#39;zerohertz2&#39; style=&#39;height: 30px&#39;&gt;&lt;/div&gt;
            &lt;script&gt;
        new GDemo(&#39;#zerohertz2&#39;)
          .openApp(&#39;terminal&#39;, {minHeight: &#39;30px&#39;, windowTitle: &#39;zerohertz@zerohertz: ~&#39;, promptString: &#39;zerohertz@zerohertz ~&#39;})
    .command(`sudo npm install hexo&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;generator&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;redirect &lt;span class=&quot;token comment&quot;&gt;--save&lt;/span&gt;`, {onCompleteDelay: 300})
        .respond(``)
        .end();
    &lt;/script&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><code>Hexo</code>에서 <code>url</code>을 <code>redirection</code>해주는 플러그인</p><h1 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h1><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.css">            <link rel="stylesheet" href="//cdn.jsdelivr.net/npm/prismjs/themes/prism-tomorrow.css">            <script src="//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.js"></script>            <div id='zerohertz2' style='height: 30px'></div>            <script>        new GDemo('#zerohertz2')          .openApp('terminal', {minHeight: '30px', windowTitle: 'zerohertz@zerohertz: ~', promptString: 'zerohertz@zerohertz ~'})    .command(`sudo npm install hexo<span class="token operator">-</span>generator<span class="token operator">-</span>redirect <span class="token comment">--save</span>`, {onCompleteDelay: 300})        .respond(``)        .end();    </script><a id="more"></a><h1 id="Use"><a href="#Use" class="headerlink" title="Use"></a>Use</h1><figure class="highlight plain"><figcaption><span>/layout/redirect.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;% const newUrl &#x3D; full_url_for(page.target.path) %&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;Page address was changed&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;p&gt;The new page address is &lt;a href&#x3D;&quot;&lt;%&#x3D; newUrl %&gt;&quot;&gt;&lt;%&#x3D; newUrl %&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">  setTimeout(function()&#123; document.location.href &#x3D; &#39;&lt;%&#x3D; newUrl %&gt;&#39;; &#125;, 1000);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight md"><figcaption><span>example.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: &gt;-</span><br><span class="line">  A PHM Approach to Additive Manufacturing Equipment Health Monitoring, Fault</span><br><span class="line">  Diagnosis, and Quality Control</span><br><span class="line">date: 2020-01-30 09:43:24</span><br><span class="line">redirect<span class="emphasis">_from:</span></span><br><span class="line"><span class="emphasis">- /2020/01/30/a-phm-approach-to-additive-manufacturing-equipment-health-monitoring-fault-diagnosis-and-quality-control/</span></span><br></pre></td></tr></table></figure><p><a href="https://zerohertz.github.io/2020/01/30/a-phm-approach-to-additive-manufacturing-equipment-health-monitoring-fault-diagnosis-and-quality-control/">https://zerohertz.github.io/2020/01/30/a-phm-approach-to-additive-manufacturing-equipment-health-monitoring-fault-diagnosis-and-quality-control/</a></p>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/etc/">Etc.</category>
      
      
      <category domain="https://zerohertz.github.io/tags/git/">Git</category>
      
      
      <comments>https://zerohertz.github.io/hexo-generator-redirect/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>hexo-generator-alias</title>
      <link>https://zerohertz.github.io/hexo-generator-alias/</link>
      <guid>https://zerohertz.github.io/hexo-generator-alias/</guid>
      <pubDate>Thu, 20 Aug 2020 03:04:41 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Hexo&lt;/code&gt;에서 &lt;code&gt;url&lt;/code&gt;을 &lt;code&gt;redirection&lt;/code&gt;해주는 플러그인&lt;/p&gt;
&lt;h1 id=&quot;Install&quot;&gt;&lt;a href=&quot;#Install&quot; class=&quot;headerlink&quot; title=&quot;Install&quot;&gt;&lt;/a&gt;Install&lt;/h1&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.css&quot;&gt;
            &lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/prismjs/themes/prism-tomorrow.css&quot;&gt;
            &lt;script src=&quot;//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.js&quot;&gt;&lt;/script&gt;
            &lt;div id=&#39;zerohertz1&#39; style=&#39;height: 30px&#39;&gt;&lt;/div&gt;
            &lt;script&gt;
        new GDemo(&#39;#zerohertz1&#39;)
          .openApp(&#39;terminal&#39;, {minHeight: &#39;30px&#39;, windowTitle: &#39;zerohertz@zerohertz: ~&#39;, promptString: &#39;zerohertz@zerohertz ~&#39;})
    .command(`sudo npm install hexo&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;generator&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token class builtin&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;--save&lt;/span&gt;`, {onCompleteDelay: 300})
        .respond(``)
        .end();
    &lt;/script&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><code>Hexo</code>에서 <code>url</code>을 <code>redirection</code>해주는 플러그인</p><h1 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h1><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.css">            <link rel="stylesheet" href="//cdn.jsdelivr.net/npm/prismjs/themes/prism-tomorrow.css">            <script src="//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.js"></script>            <div id='zerohertz1' style='height: 30px'></div>            <script>        new GDemo('#zerohertz1')          .openApp('terminal', {minHeight: '30px', windowTitle: 'zerohertz@zerohertz: ~', promptString: 'zerohertz@zerohertz ~'})    .command(`sudo npm install hexo<span class="token operator">-</span>generator<span class="token operator">-</span><span class="token class builtin">alias</span> <span class="token comment">--save</span>`, {onCompleteDelay: 300})        .respond(``)        .end();    </script><a id="more"></a><h1 id="Use"><a href="#Use" class="headerlink" title="Use"></a>Use</h1><blockquote><p>검색 시 기존의 url을 노출</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/90713568-95ae4800-e2e0-11ea-8856-5a62f01e517e.png" alt="기존"></p><blockquote><p>404</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/90713667-cf7f4e80-e2e0-11ea-8e78-2bc71f7c62cd.png" alt="404"></p><figure class="highlight xml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alias:</span><br><span class="line">    기존 url: 새로운 url</span><br><span class="line">    /2020/01/30/a-phm-approach-to-additive-manufacturing-equipment-health-monitoring-fault-diagnosis-and-quality-control/: /a-phm-approach-to-additive-manufacturing-equipment-health-monitoring-fault-diagnosis-and-quality-control/</span><br></pre></td></tr></table></figure><p><a href="https://zerohertz.github.io/2020/01/30/a-phm-approach-to-additive-manufacturing-equipment-health-monitoring-fault-diagnosis-and-quality-control/">https://zerohertz.github.io/2020/01/30/a-phm-approach-to-additive-manufacturing-equipment-health-monitoring-fault-diagnosis-and-quality-control/</a></p><ul><li><code>_config.yml</code>에 위의 소스를 사용하여 <code>redirection</code> 가능</li><li><code>url</code>은 <code>local</code> 위치로 지정</li></ul>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/etc/">Etc.</category>
      
      
      <category domain="https://zerohertz.github.io/tags/git/">Git</category>
      
      
      <comments>https://zerohertz.github.io/hexo-generator-alias/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Serial Communication(Arduino to RaspberryPi)</title>
      <link>https://zerohertz.github.io/serial-communication-arduino-to-raspberrypi/</link>
      <guid>https://zerohertz.github.io/serial-communication-arduino-to-raspberrypi/</guid>
      <pubDate>Tue, 18 Aug 2020 04:24:03 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;CMD를-통한-Serial-통신&quot;&gt;&lt;a href=&quot;#CMD를-통한-Serial-통신&quot; class=&quot;headerlink&quot; title=&quot;CMD를 통한 Serial 통신&quot;&gt;&lt;/a&gt;CMD를 통한 Serial 통신&lt;/h1&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.css&quot;&gt;
            &lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/prismjs/themes/prism-tomorrow.css&quot;&gt;
            &lt;script src=&quot;//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.js&quot;&gt;&lt;/script&gt;
            &lt;div id=&#39;zerohertz&#39; style=&#39;height: 130px&#39;&gt;&lt;/div&gt;
            &lt;script&gt;
        new GDemo(&#39;#zerohertz&#39;)
          .openApp(&#39;terminal&#39;, {minHeight: &#39;130px&#39;, windowTitle: &#39;pi@raspberrypi: ~&#39;, promptString: &#39;pi@raspberrypi:~ $&#39;})
    .command(`sudo usermod &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;G tty pi`, {onCompleteDelay: 300}).command(`sudo usermod &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;G dialout pi`, {onCompleteDelay: 300}).command(`stty &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;F &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;dev&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;ttyACM0 raw &lt;span class=&quot;token number&quot;&gt;115200&lt;/span&gt; cs8 clocal &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;cstopb`, {onCompleteDelay: 300}).command(`cat &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;dev&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;ttyACM0`, {onCompleteDelay: 300})
        .respond(``)
        .end();
    &lt;/script&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="CMD를-통한-Serial-통신"><a href="#CMD를-통한-Serial-통신" class="headerlink" title="CMD를 통한 Serial 통신"></a>CMD를 통한 Serial 통신</h1><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.css">            <link rel="stylesheet" href="//cdn.jsdelivr.net/npm/prismjs/themes/prism-tomorrow.css">            <script src="//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.js"></script>            <div id='zerohertz' style='height: 130px'></div>            <script>        new GDemo('#zerohertz')          .openApp('terminal', {minHeight: '130px', windowTitle: 'pi@raspberrypi: ~', promptString: 'pi@raspberrypi:~ $'})    .command(`sudo usermod <span class="token operator">-</span>a <span class="token operator">-</span>G tty pi`, {onCompleteDelay: 300}).command(`sudo usermod <span class="token operator">-</span>a <span class="token operator">-</span>G dialout pi`, {onCompleteDelay: 300}).command(`stty <span class="token operator">-</span>F <span class="token operator">/</span>dev<span class="token operator">/</span>ttyACM0 raw <span class="token number">115200</span> cs8 clocal <span class="token operator">-</span>cstopb`, {onCompleteDelay: 300}).command(`cat <span class="token operator">/</span>dev<span class="token operator">/</span>ttyACM0`, {onCompleteDelay: 300})        .respond(``)        .end();    </script><a id="more"></a><h1 id="Python을-통한-Serial-통신"><a href="#Python을-통한-Serial-통신" class="headerlink" title="Python을 통한 Serial 통신"></a>Python을 통한 Serial 통신</h1><figure class="highlight python"><figcaption><span>ser.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> serial</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">ser = serial.Serial(<span class="string">&#x27;/dev/ttyACM0&#x27;</span>, <span class="number">115200</span>)</span><br><span class="line">f = open(<span class="string">&#x27;filename.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">t = time.time()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> ser.in_waiting != <span class="number">0</span>:</span><br><span class="line">            t1 = time.time() - t</span><br><span class="line">            t2 = round(t1, <span class="number">5</span>)</span><br><span class="line">            t3 = str(t2)</span><br><span class="line">            sensor = ser.readline()</span><br><span class="line">            print(t3)</span><br><span class="line">            print(sensor.decode())</span><br><span class="line">            f.write(t3)</span><br><span class="line">            f.write(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">            f.write(sensor.decode())</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><ul><li>파일명을 <code>serial.py</code>로 지정하면 오류가 날 수 있으므로 유의</li></ul>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/raspberrypi/">RaspberryPi</category>
      
      
      <category domain="https://zerohertz.github.io/tags/arduino/">Arduino</category>
      
      <category domain="https://zerohertz.github.io/tags/raspberrypi/">RaspberryPi</category>
      
      <category domain="https://zerohertz.github.io/tags/python/">Python</category>
      
      
      <comments>https://zerohertz.github.io/serial-communication-arduino-to-raspberrypi/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Arduino Nano 33 BLE</title>
      <link>https://zerohertz.github.io/arduino-nano-33-ble/</link>
      <guid>https://zerohertz.github.io/arduino-nano-33-ble/</guid>
      <pubDate>Tue, 11 Aug 2020 15:08:38 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Arduino-Nano-33-BLE&quot;&gt;&lt;a href=&quot;#Arduino-Nano-33-BLE&quot; class=&quot;headerlink&quot; title=&quot;Arduino Nano 33 BLE&quot;&gt;&lt;/a&gt;Arduino Nano 33 BLE&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;센서 / 모듈 이름&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Info&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;nRF52840&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;32Bbit, 64MHz MCU&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;NINA-B306&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Bluetooth&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;LSM9DS1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;9축 IMU센서&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;RESET 버튼을 2번 눌러 Upload mode로 전환&lt;/li&gt;
&lt;li&gt;&lt;code&gt;begin()&lt;/code&gt; 메서드 필수&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://mechasolution.com/shop/goods/goods_view.php?&amp;goodsno=586133&quot;&gt;Aruino Nano 33 BLE&lt;/a&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Arduino-Nano-33-BLE"><a href="#Arduino-Nano-33-BLE" class="headerlink" title="Arduino Nano 33 BLE"></a>Arduino Nano 33 BLE</h1><table><thead><tr><th align="center">센서 / 모듈 이름</th><th align="center">Info</th></tr></thead><tbody><tr><td align="center">nRF52840</td><td align="center">32Bbit, 64MHz MCU</td></tr><tr><td align="center">NINA-B306</td><td align="center">Bluetooth</td></tr><tr><td align="center">LSM9DS1</td><td align="center">9축 IMU센서</td></tr></tbody></table><ul><li>RESET 버튼을 2번 눌러 Upload mode로 전환</li><li><code>begin()</code> 메서드 필수</li></ul><p><span class="exturl" data-url="aHR0cDovL21lY2hhc29sdXRpb24uY29tL3Nob3AvZ29vZHMvZ29vZHNfdmlldy5waHA/Jmdvb2Rzbm89NTg2MTMz">Aruino Nano 33 BLE<i class="fa fa-external-link-alt"></i></span></p><a id="more"></a><hr><h1 id="Arduino-IDE와-Arduino-Nano-33-BLE-연결"><a href="#Arduino-IDE와-Arduino-Nano-33-BLE-연결" class="headerlink" title="Arduino IDE와 Arduino Nano 33 BLE 연결"></a>Arduino IDE와 Arduino Nano 33 BLE 연결</h1><img width="912" alt="Board Manager" src="https://user-images.githubusercontent.com/42334717/89915513-6ab55b80-dc31-11ea-96ee-de1eac623357.png"><ul><li><code>툴</code> - <code>보드</code> - <code>보드 매니저</code>에서 <code>arduino nano 33 BLE</code>를 검색</li><li><code>Arduino nRF528x Boards</code> 설치</li></ul><img width="1100" alt="Serial Port" src="https://user-images.githubusercontent.com/42334717/89915989-ffb85480-dc31-11ea-946e-f56a7c213746.png"><ul><li><code>툴</code> - <code>포트</code> - <code>Arduino Nano 33 BLE</code> 선택</li><li><code>보드 정보 얻기</code>로 연결 확인 가능</li><li>안된다면 케이블을 바꿔 해결 가능(데이터 전송이 가능한 케이블)</li></ul><hr><h1 id="IMU-Sensor"><a href="#IMU-Sensor" class="headerlink" title="IMU Sensor"></a>IMU Sensor</h1><img width="730" alt="Manage Library" src="https://user-images.githubusercontent.com/42334717/89916584-be747480-dc32-11ea-98e8-2d2c457aa54f.png"><ul><li><code>툴</code> - <code>라이브러리 관리...</code></li></ul><img width="912" alt="LSM9DS1" src="https://user-images.githubusercontent.com/42334717/89916551-b583a300-dc32-11ea-8d7d-549241512a9c.png"><ul><li>9축 IMU센서의 이름 <code>LSM9DS1</code> 검색 후 <code>Arduino_LSM9DS1</code> 라이브러리 다운로드</li></ul><figure class="highlight c++"><figcaption><span>IMU.ino</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Arduino_LSM9DS1.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> acc_x, acc_y, acc_z;</span><br><span class="line"><span class="keyword">float</span> gyro_x, gyro_y, gyro_z;</span><br><span class="line"><span class="keyword">float</span> mag_x, mag_y, mag_z;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">2000000</span>);</span><br><span class="line">  <span class="keyword">while</span>(!Serial);</span><br><span class="line">  <span class="keyword">if</span> (!IMU.begin()) &#123; <span class="comment">//LSM9DSI센서 시작</span></span><br><span class="line">    Serial.println(<span class="string">&quot;LSM9DSI센서 오류!&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  Serial.println(<span class="string">&quot;acc_x,acc_y,acc_z,gyro_x,gyro_y,gyro_z,mag_x,mag_y,mag_z&quot;</span>);</span><br><span class="line">  delay(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//가속도센서</span></span><br><span class="line">  <span class="keyword">if</span> (IMU.accelerationAvailable()) &#123;</span><br><span class="line">    IMU.readAcceleration(acc_x, acc_y, acc_z);</span><br><span class="line">    Serial.print(acc_x); Serial.print(<span class="string">&quot;,&quot;</span>); Serial.print(acc_y); Serial.print(<span class="string">&quot;,&quot;</span>); Serial.print(acc_z); Serial.print(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//자이로센서</span></span><br><span class="line">  <span class="keyword">if</span> (IMU.gyroscopeAvailable()) &#123;</span><br><span class="line">    IMU.readGyroscope(gyro_x, gyro_y, gyro_z);</span><br><span class="line">    Serial.print(gyro_x); Serial.print(<span class="string">&quot;,&quot;</span>); Serial.print(gyro_y); Serial.print(<span class="string">&quot;,&quot;</span>); Serial.print(gyro_z); Serial.print(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//지자계센서</span></span><br><span class="line">  <span class="keyword">if</span> (IMU.magneticFieldAvailable()) &#123;</span><br><span class="line">    IMU.readMagneticField(mag_x, mag_y, mag_z);</span><br><span class="line">    Serial.print(mag_x); Serial.print(<span class="string">&quot;,&quot;</span>); Serial.print(mag_y); Serial.print(<span class="string">&quot;,&quot;</span>); Serial.println(mag_z);</span><br><span class="line">  &#125;</span><br><span class="line">  delay(<span class="number">50</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Graph</p></blockquote><img width="1204" alt="IMU" src="https://user-images.githubusercontent.com/42334717/89924286-c6d1ad00-dc3c-11ea-9da0-2ff8961262f9.png"><hr><h1 id="Bluetooth-Module"><a href="#Bluetooth-Module" class="headerlink" title="Bluetooth Module"></a>Bluetooth Module</h1><img width="912" alt="스크린샷 2020-08-12 오전 1 47 07" src="https://user-images.githubusercontent.com/42334717/89924997-bcfc7980-dc3d-11ea-8533-10b7bea3d618.png"><figure class="highlight c++"><figcaption><span>PeripheralExplorer.ino</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Peripheral Explorer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  This example scans for BLE peripherals until one with a particular name (&quot;LED&quot;)</span></span><br><span class="line"><span class="comment">  is found. Then connects, and discovers + prints all the peripheral&#x27;s attributes.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  The circuit:</span></span><br><span class="line"><span class="comment">  - Arduino MKR WiFi 1010, Arduino Uno WiFi Rev2 board, Arduino Nano 33 IoT,</span></span><br><span class="line"><span class="comment">    Arduino Nano 33 BLE, or Arduino Nano 33 BLE Sense board.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  You can use it with another board that is compatible with this library and the</span></span><br><span class="line"><span class="comment">  Peripherals -&gt; LED example.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  This example code is in the public domain.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ArduinoBLE.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line">  <span class="keyword">while</span> (!Serial);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// begin initialization</span></span><br><span class="line">  <span class="keyword">if</span> (!BLE.begin()) &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;starting BLE failed!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Serial.println(<span class="string">&quot;BLE Central - Peripheral Explorer&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// start scanning for peripherals</span></span><br><span class="line">  BLE.scan();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// check if a peripheral has been discovered</span></span><br><span class="line">  BLEDevice peripheral = BLE.available();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (peripheral) &#123;</span><br><span class="line">    <span class="comment">// discovered a peripheral, print out address, local name, and advertised service</span></span><br><span class="line">    Serial.print(<span class="string">&quot;Found &quot;</span>);</span><br><span class="line">    Serial.print(peripheral.address());</span><br><span class="line">    Serial.print(<span class="string">&quot; &#x27;&quot;</span>);</span><br><span class="line">    Serial.print(peripheral.localName());</span><br><span class="line">    Serial.print(<span class="string">&quot;&#x27; &quot;</span>);</span><br><span class="line">    Serial.print(peripheral.advertisedServiceUuid());</span><br><span class="line">    Serial.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// see if peripheral is a LED</span></span><br><span class="line">    <span class="keyword">if</span> (peripheral.localName() == <span class="string">&quot;IMU&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">// stop scanning</span></span><br><span class="line">      BLE.stopScan();</span><br><span class="line"></span><br><span class="line">      explorerPeripheral(peripheral);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// peripheral disconnected, we are done</span></span><br><span class="line">      <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// do nothing</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">explorerPeripheral</span><span class="params">(BLEDevice peripheral)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// connect to the peripheral</span></span><br><span class="line">  Serial.println(<span class="string">&quot;Connecting ...&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (peripheral.connect()) &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;Connected&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;Failed to connect!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// discover peripheral attributes</span></span><br><span class="line">  Serial.println(<span class="string">&quot;Discovering attributes ...&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (peripheral.discoverAttributes()) &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;Attributes discovered&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;Attribute discovery failed!&quot;</span>);</span><br><span class="line">    peripheral.disconnect();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// read and print device name of peripheral</span></span><br><span class="line">  Serial.println();</span><br><span class="line">  Serial.print(<span class="string">&quot;Device name: &quot;</span>);</span><br><span class="line">  Serial.println(peripheral.deviceName());</span><br><span class="line">  Serial.print(<span class="string">&quot;Appearance: 0x&quot;</span>);</span><br><span class="line">  Serial.println(peripheral.appearance(), HEX);</span><br><span class="line">  Serial.println();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// loop the services of the peripheral and explore each</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; peripheral.serviceCount(); i++) &#123;</span><br><span class="line">    BLEService service = peripheral.service(i);</span><br><span class="line"></span><br><span class="line">    exploreService(service);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Serial.println();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// we are done exploring, disconnect</span></span><br><span class="line">  Serial.println(<span class="string">&quot;Disconnecting ...&quot;</span>);</span><br><span class="line">  peripheral.disconnect();</span><br><span class="line">  Serial.println(<span class="string">&quot;Disconnected&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exploreService</span><span class="params">(BLEService service)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// print the UUID of the service</span></span><br><span class="line">  Serial.print(<span class="string">&quot;Service &quot;</span>);</span><br><span class="line">  Serial.println(service.uuid());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// loop the characteristics of the service and explore each</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; service.characteristicCount(); i++) &#123;</span><br><span class="line">    BLECharacteristic characteristic = service.characteristic(i);</span><br><span class="line"></span><br><span class="line">    exploreCharacteristic(characteristic);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exploreCharacteristic</span><span class="params">(BLECharacteristic characteristic)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// print the UUID and properties of the characteristic</span></span><br><span class="line">  Serial.print(<span class="string">&quot;\tCharacteristic &quot;</span>);</span><br><span class="line">  Serial.print(characteristic.uuid());</span><br><span class="line">  Serial.print(<span class="string">&quot;, properties 0x&quot;</span>);</span><br><span class="line">  Serial.print(characteristic.properties(), HEX);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// check if the characteristic is readable</span></span><br><span class="line">  <span class="keyword">if</span> (characteristic.canRead()) &#123;</span><br><span class="line">    <span class="comment">// read the characteristic value</span></span><br><span class="line">    characteristic.read();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (characteristic.valueLength() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// print out the value of the characteristic</span></span><br><span class="line">      Serial.print(<span class="string">&quot;, value 0x&quot;</span>);</span><br><span class="line">      printData(characteristic.value(), characteristic.valueLength());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  Serial.println();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// loop the descriptors of the characteristic and explore each</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; characteristic.descriptorCount(); i++) &#123;</span><br><span class="line">    BLEDescriptor descriptor = characteristic.descriptor(i);</span><br><span class="line"></span><br><span class="line">    exploreDescriptor(descriptor);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exploreDescriptor</span><span class="params">(BLEDescriptor descriptor)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// print the UUID of the descriptor</span></span><br><span class="line">  Serial.print(<span class="string">&quot;\t\tDescriptor &quot;</span>);</span><br><span class="line">  Serial.print(descriptor.uuid());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// read the descriptor value</span></span><br><span class="line">  descriptor.read();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// print out the value of the descriptor</span></span><br><span class="line">  Serial.print(<span class="string">&quot;, value 0x&quot;</span>);</span><br><span class="line">  printData(descriptor.value(), descriptor.valueLength());</span><br><span class="line"></span><br><span class="line">  Serial.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printData</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> data[], <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> b = data[i]; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (b &lt; <span class="number">16</span>) &#123;</span><br><span class="line">      Serial.print(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Serial.print(b, HEX);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>Output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">BLE Central - Peripheral Explorer</span><br><span class="line">Found e8:61:57:48:1a:ef &#x27;IMU&#x27; 1101</span><br><span class="line">Connecting ...</span><br><span class="line">Connected</span><br><span class="line">Discovering attributes ...</span><br><span class="line">Attributes discovered</span><br><span class="line"></span><br><span class="line">Device name: IMU</span><br><span class="line">Appearance: <span class="number">0x0</span></span><br><span class="line"></span><br><span class="line">Service <span class="number">1800</span></span><br><span class="line">Characteristic <span class="number">2</span>a00, properties <span class="number">0x2</span>, value <span class="number">0x494D55</span></span><br><span class="line">Characteristic <span class="number">2</span>a01, properties <span class="number">0x2</span>, value <span class="number">0x0000</span></span><br><span class="line">Service <span class="number">1801</span></span><br><span class="line">Characteristic <span class="number">2</span>a05, properties <span class="number">0x20</span></span><br><span class="line">Descriptor <span class="number">2902</span>, value <span class="number">0x0000</span></span><br><span class="line">Service <span class="number">1101</span></span><br><span class="line">Characteristic <span class="number">2101</span>, properties <span class="number">0x12</span>, value <span class="number">0x0A</span></span><br><span class="line">Descriptor <span class="number">2902</span>, value <span class="number">0x0000</span></span><br><span class="line"></span><br><span class="line">Disconnecting ...</span><br><span class="line">Disconnected</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>peripheral.ino</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ArduinoBLE.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Arduino_LSM9DS1.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">BLEService <span class="title">ACC</span><span class="params">(<span class="string">&quot;1001&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">BLEFloatCharacteristic <span class="title">accX</span><span class="params">(<span class="string">&quot;2001&quot;</span>, BLERead | BLENotify)</span></span>;</span><br><span class="line"><span class="function">BLEFloatCharacteristic <span class="title">accY</span><span class="params">(<span class="string">&quot;2002&quot;</span>, BLERead | BLENotify)</span></span>;</span><br><span class="line"><span class="function">BLEFloatCharacteristic <span class="title">accZ</span><span class="params">(<span class="string">&quot;2003&quot;</span>, BLERead | BLENotify)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">BLEService <span class="title">GYRO</span><span class="params">(<span class="string">&quot;1002&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">BLEFloatCharacteristic <span class="title">gyroX</span><span class="params">(<span class="string">&quot;2011&quot;</span>, BLERead | BLENotify)</span></span>;</span><br><span class="line"><span class="function">BLEFloatCharacteristic <span class="title">gyroY</span><span class="params">(<span class="string">&quot;2012&quot;</span>, BLERead | BLENotify)</span></span>;</span><br><span class="line"><span class="function">BLEFloatCharacteristic <span class="title">gyroZ</span><span class="params">(<span class="string">&quot;2013&quot;</span>, BLERead | BLENotify)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">BLEService <span class="title">MAG</span><span class="params">(<span class="string">&quot;1003&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">BLEFloatCharacteristic <span class="title">magX</span><span class="params">(<span class="string">&quot;2021&quot;</span>, BLERead | BLENotify)</span></span>;</span><br><span class="line"><span class="function">BLEFloatCharacteristic <span class="title">magY</span><span class="params">(<span class="string">&quot;2022&quot;</span>, BLERead | BLENotify)</span></span>;</span><br><span class="line"><span class="function">BLEFloatCharacteristic <span class="title">magZ</span><span class="params">(<span class="string">&quot;2023&quot;</span>, BLERead | BLENotify)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> acc_x, acc_y, acc_z;</span><br><span class="line"><span class="keyword">float</span> gyro_x, gyro_y, gyro_z;</span><br><span class="line"><span class="keyword">float</span> mag_x, mag_y, mag_z;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(!BLE.begin()) &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;Starting BLE Failed!&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!IMU.begin()) &#123; <span class="comment">//LSM9DSI센서 시작</span></span><br><span class="line">    Serial.println(<span class="string">&quot;LSM9DSI센서 오류!&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  BLE.setDeviceName(<span class="string">&quot;IMU&quot;</span>);</span><br><span class="line">  BLE.setLocalName(<span class="string">&quot;IMU&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  BLE.setAdvertisedService(ACC);</span><br><span class="line">  BLE.setAdvertisedService(GYRO);</span><br><span class="line">  BLE.setAdvertisedService(MAG);</span><br><span class="line">  ACC.addCharacteristic(accX);</span><br><span class="line">  ACC.addCharacteristic(accY);</span><br><span class="line">  ACC.addCharacteristic(accZ);</span><br><span class="line">  GYRO.addCharacteristic(gyroX);</span><br><span class="line">  GYRO.addCharacteristic(gyroY);</span><br><span class="line">  GYRO.addCharacteristic(gyroZ);</span><br><span class="line">  MAG.addCharacteristic(magX);</span><br><span class="line">  MAG.addCharacteristic(magY);</span><br><span class="line">  MAG.addCharacteristic(magZ);</span><br><span class="line">  BLE.addService(ACC);</span><br><span class="line">  BLE.addService(GYRO);</span><br><span class="line">  BLE.addService(MAG);</span><br><span class="line">  BLE.setConnectable(<span class="literal">true</span>);</span><br><span class="line">  BLE.setAdvertisingInterval(<span class="number">100</span>);</span><br><span class="line">  BLE.advertise();</span><br><span class="line">  Serial.println(<span class="string">&quot;Bluetooth Device Active, Waiting for Connections...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  BLEDevice central = BLE.central();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(central) &#123;</span><br><span class="line">    Serial.print(<span class="string">&quot;Connected to Central: &quot;</span>);</span><br><span class="line">    Serial.println(central.address());</span><br><span class="line">    <span class="keyword">while</span>(central.connected()) &#123;</span><br><span class="line">      IMU.readAcceleration(acc_x, acc_y, acc_z);</span><br><span class="line">      IMU.readGyroscope(gyro_x, gyro_y, gyro_z);</span><br><span class="line">      IMU.readMagneticField(mag_x, mag_y, mag_z);      </span><br><span class="line">      accX.writeValue(acc_x);</span><br><span class="line">      accY.writeValue(acc_y);</span><br><span class="line">      accZ.writeValue(acc_z);</span><br><span class="line">      gyroX.writeValue(gyro_x);</span><br><span class="line">      gyroY.writeValue(gyro_y);</span><br><span class="line">      gyroZ.writeValue(gyro_z);</span><br><span class="line">      magX.writeValue(mag_x);</span><br><span class="line">      magY.writeValue(mag_y);</span><br><span class="line">      magZ.writeValue(mag_z);</span><br><span class="line">      Serial.println(acc_x);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  Serial.print(<span class="string">&quot;Disconnected from Central: &quot;</span>);</span><br><span class="line">  Serial.println(BLE.address());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>central.ino</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ArduinoBLE.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> dat&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> asdf[<span class="number">4</span>];</span><br><span class="line">  <span class="keyword">float</span> zxcv;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">getData</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> data[], <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">  dat dat;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    dat.asdf[i] = data[i]; </span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> dat.zxcv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printcsv</span><span class="params">(BLECharacteristic c1, BLECharacteristic c2, BLECharacteristic c3, BLECharacteristic c4, BLECharacteristic c5, BLECharacteristic c6, BLECharacteristic c7, BLECharacteristic c8, BLECharacteristic c9)</span></span>&#123;</span><br><span class="line">  c1.read();</span><br><span class="line">  c2.read();</span><br><span class="line">  c3.read();</span><br><span class="line">  c4.read();</span><br><span class="line">  c5.read();</span><br><span class="line">  c6.read();</span><br><span class="line">  c7.read();</span><br><span class="line">  c8.read();</span><br><span class="line">  c9.read(); </span><br><span class="line">  <span class="keyword">float</span> f1=getData(c1.value(), c1.valueLength());</span><br><span class="line">  <span class="keyword">float</span> f2=getData(c2.value(), c2.valueLength());</span><br><span class="line">  <span class="keyword">float</span> f3=getData(c3.value(), c3.valueLength());</span><br><span class="line">  <span class="keyword">float</span> f4=getData(c4.value(), c4.valueLength());</span><br><span class="line">  <span class="keyword">float</span> f5=getData(c5.value(), c5.valueLength());</span><br><span class="line">  <span class="keyword">float</span> f6=getData(c6.value(), c6.valueLength());</span><br><span class="line">  <span class="keyword">float</span> f7=getData(c7.value(), c7.valueLength());</span><br><span class="line">  <span class="keyword">float</span> f8=getData(c8.value(), c8.valueLength());</span><br><span class="line">  <span class="keyword">float</span> f9=getData(c9.value(), c9.valueLength());</span><br><span class="line">  Serial.print(f1);</span><br><span class="line">  Serial.print(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  Serial.print(f2);</span><br><span class="line">  Serial.print(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  Serial.print(f3);</span><br><span class="line">  Serial.print(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  Serial.print(f4);</span><br><span class="line">  Serial.print(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  Serial.print(f5);</span><br><span class="line">  Serial.print(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  Serial.print(f6);</span><br><span class="line">  Serial.print(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  Serial.print(f7);</span><br><span class="line">  Serial.print(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  Serial.print(f8);</span><br><span class="line">  Serial.print(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  Serial.print(f9);</span><br><span class="line">  Serial.print(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!BLE.begin()) &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;Starting BLE Failed!&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  BLE.scan();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  BLEDevice peripheral = BLE.available();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(peripheral)&#123;</span><br><span class="line">    <span class="keyword">if</span>(peripheral.localName()==<span class="string">&quot;IMU&quot;</span>)&#123;</span><br><span class="line">      BLE.stopScan();</span><br><span class="line">      <span class="keyword">if</span>(peripheral.connect())&#123;</span><br><span class="line">        Serial.println(<span class="string">&quot;Connect1&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(peripheral.discoverAttributes())&#123;</span><br><span class="line">        Serial.println(<span class="string">&quot;Connect2&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      BLEService acc=peripheral.service(<span class="string">&quot;1001&quot;</span>);</span><br><span class="line">      BLECharacteristic accx=acc.characteristic(<span class="string">&quot;2001&quot;</span>);</span><br><span class="line">      BLECharacteristic accy=acc.characteristic(<span class="string">&quot;2002&quot;</span>);</span><br><span class="line">      BLECharacteristic accz=acc.characteristic(<span class="string">&quot;2003&quot;</span>);</span><br><span class="line">      BLEService gyro=peripheral.service(<span class="string">&quot;1002&quot;</span>);</span><br><span class="line">      BLECharacteristic gyrox=gyro.characteristic(<span class="string">&quot;2011&quot;</span>);</span><br><span class="line">      BLECharacteristic gyroy=gyro.characteristic(<span class="string">&quot;2012&quot;</span>);</span><br><span class="line">      BLECharacteristic gyroz=gyro.characteristic(<span class="string">&quot;2013&quot;</span>);</span><br><span class="line">      BLEService mag=peripheral.service(<span class="string">&quot;1003&quot;</span>);</span><br><span class="line">      BLECharacteristic magx=mag.characteristic(<span class="string">&quot;2021&quot;</span>);</span><br><span class="line">      BLECharacteristic magy=mag.characteristic(<span class="string">&quot;2022&quot;</span>);</span><br><span class="line">      BLECharacteristic magz=mag.characteristic(<span class="string">&quot;2023&quot;</span>);</span><br><span class="line">      <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="comment">//        accx.read();</span></span><br><span class="line"><span class="comment">//        float f1=getData(accx.value(),accx.valueLength());</span></span><br><span class="line"><span class="comment">//        Serial.print(f1);</span></span><br><span class="line"><span class="comment">//        Serial.print(&#x27;,&#x27;);</span></span><br><span class="line"><span class="comment">//        accy.read();</span></span><br><span class="line"><span class="comment">//        float f2=getData(accy.value(),accy.valueLength());</span></span><br><span class="line"><span class="comment">//        Serial.print(f2);</span></span><br><span class="line"><span class="comment">//        Serial.print(&#x27;,&#x27;);</span></span><br><span class="line"><span class="comment">//        accz.read();</span></span><br><span class="line"><span class="comment">//        float f3=getData(accz.value(),accz.valueLength());</span></span><br><span class="line"><span class="comment">//        Serial.println(f3);</span></span><br><span class="line">        <span class="keyword">if</span>(peripheral.connected())&#123;</span><br><span class="line">          printcsv(accx,accy,accz,gyrox,gyroy,gyroz,magx,magy,magz);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">          peripheral.disconnect();</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  BLE.scan();</span><br><span class="line">  Serial.println(<span class="string">&quot;rescan&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/c-c/">C, C++</category>
      
      <category domain="https://zerohertz.github.io/categories/c-c/arduino/">Arduino</category>
      
      
      <category domain="https://zerohertz.github.io/tags/arduino/">Arduino</category>
      
      <category domain="https://zerohertz.github.io/tags/c-c/">C, C++</category>
      
      <category domain="https://zerohertz.github.io/tags/raspberrypi/">RaspberryPi</category>
      
      <category domain="https://zerohertz.github.io/tags/python/">Python</category>
      
      
      <comments>https://zerohertz.github.io/arduino-nano-33-ble/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LabVIEW</title>
      <link>https://zerohertz.github.io/labview/</link>
      <guid>https://zerohertz.github.io/labview/</guid>
      <pubDate>Thu, 06 Aug 2020 05:03:22 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;LabVIEW-시작&quot;&gt;&lt;a href=&quot;#LabVIEW-시작&quot; class=&quot;headerlink&quot; title=&quot;LabVIEW 시작&quot;&gt;&lt;/a&gt;LabVIEW 시작&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;ni.com&quot;&gt;LabVIEW Download&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;시작 화면&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/42334717/89501783-e4e37b80-d7fe-11ea-8070-7fad634b4753.png&quot; alt=&quot;시작 화면&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Front Panel &amp;amp; Block Diagram&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/42334717/89502100-6affc200-d7ff-11ea-86c3-39dfe880abf8.png&quot; alt=&quot;Front Panel &amp;amp; Block Diagram&quot;&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="LabVIEW-시작"><a href="#LabVIEW-시작" class="headerlink" title="LabVIEW 시작"></a>LabVIEW 시작</h1><p><a href="ni.com">LabVIEW Download</a></p><blockquote><p>시작 화면</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/89501783-e4e37b80-d7fe-11ea-8070-7fad634b4753.png" alt="시작 화면"></p><blockquote><p>Front Panel &amp; Block Diagram</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/89502100-6affc200-d7ff-11ea-86c3-39dfe880abf8.png" alt="Front Panel &amp; Block Diagram"></p><a id="more"></a><hr><h1 id="기본-연산"><a href="#기본-연산" class="headerlink" title="기본 연산"></a>기본 연산</h1><blockquote><p>AND of Boolean</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/89502740-6f78aa80-d800-11ea-9560-0d685b1425b9.png" alt="AND"></p><blockquote><p>Add of String</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/89502927-bff00800-d800-11ea-9e35-8a4a0a2f7c06.png" alt="Add"></p><ul><li><code>Change to Indicator</code>를 통하여 Output으로 전환</li><li><code>Ctrl + U</code> : 아이콘 재정렬</li><li><code>Ctrl + B</code> : 끊어진 와이어 삭제</li><li><code>Ctrl + T</code> : Block Diagram 창 복구</li></ul><hr><h1 id="While-loop"><a href="#While-loop" class="headerlink" title="While loop"></a>While loop</h1><blockquote><p>While loop</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/89503293-4ad10280-d801-11ea-9ff8-4b3dbd3627f1.png" alt="while"></p><hr><h1 id="형변환"><a href="#형변환" class="headerlink" title="형변환"></a>형변환</h1><blockquote><p>형변환</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/89507525-95557d80-d807-11ea-8b72-a7926e1f8ab0.png" alt="형변환"></p><hr><h1 id="배열"><a href="#배열" class="headerlink" title="배열"></a>배열</h1><blockquote><p>배열</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/90225562-8d6f8c00-de4c-11ea-9d7c-2911ad82feb7.png" alt="배열"></p><blockquote><p>Build Array</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/90226442-f86d9280-de4d-11ea-9252-05e65b29a655.png" alt="Build Array"></p><blockquote><p>사칙연산</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/90227271-3cad6280-de4f-11ea-8e01-daf9bf07525b.png" alt="사칙연산"></p><blockquote><p>Delete From Array</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/90227586-cb21e400-de4f-11ea-92eb-b3fbaca70b46.png" alt="Delete From Array"></p><hr><h1 id="Cluster"><a href="#Cluster" class="headerlink" title="Cluster"></a>Cluster</h1><blockquote><p>Cluster</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/90230455-88163f80-de54-11ea-8c5d-3f0a7051f9eb.png" alt="Cluster"></p><hr><h1 id="Formula-Node"><a href="#Formula-Node" class="headerlink" title="Formula Node"></a>Formula Node</h1><blockquote><p>Formula Node</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/90231941-e04e4100-de56-11ea-997f-ff5113fa4229.png" alt="Formula Node"></p>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/labview/">LabVIEW</category>
      
      
      <category domain="https://zerohertz.github.io/tags/labview/">LabVIEW</category>
      
      
      <comments>https://zerohertz.github.io/labview/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Diagnosis Systems for Ball Bearing Cage Defects using Fisher Discriminant Ratio</title>
      <link>https://zerohertz.github.io/diagnosis-systems-for-ball-bearing-cage-defects-using-fisher-discriminant-ratio/</link>
      <guid>https://zerohertz.github.io/diagnosis-systems-for-ball-bearing-cage-defects-using-fisher-discriminant-ratio/</guid>
      <pubDate>Wed, 29 Jul 2020 02:51:10 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Abstract&quot;&gt;&lt;a href=&quot;#Abstract&quot; class=&quot;headerlink&quot; title=&quot;Abstract&quot;&gt;&lt;/a&gt;Abstract&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/42334717/90792834-f1f78300-e345-11ea-9563-22bd2a9604f4.png&quot; alt=&quot;Abstract&quot;&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h1><p><img src="https://user-images.githubusercontent.com/42334717/90792834-f1f78300-e345-11ea-9563-22bd2a9604f4.png" alt="Abstract"></p><a id="more"></a><hr><h1 id="Poster"><a href="#Poster" class="headerlink" title="Poster"></a>Poster</h1><p><img src="https://user-images.githubusercontent.com/42334717/91074437-811ed680-e677-11ea-8728-9699ddb3e62e.jpg" alt="PP05-042 오효근"></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1plcm9oZXJ0ei96ZXJvaGVydHouZ2l0aHViLmlvL2ZpbGVzLzUxMTkyMjgvUFAwNS0wNDIucGRm">PP05-042 오효근.pdf<i class="fa fa-external-link-alt"></i></span></p><hr><h1 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h1><figure class="highlight r"><figcaption><span>fdr.R</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line">setwd(<span class="string">&quot;C:/Users/ohg34/Downloads&quot;</span>)</span><br><span class="line"></span><br><span class="line">normal=read.csv(<span class="string">&#x27;normal.csv&#x27;</span>,header=<span class="literal">F</span>)</span><br><span class="line">fault=read.csv(<span class="string">&#x27;fault.csv&#x27;</span>,header=<span class="literal">F</span>)</span><br><span class="line"></span><br><span class="line">normal=normal[<span class="number">100000</span>:<span class="number">200000</span>,<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">fault=fault[<span class="number">100000</span>:<span class="number">200000</span>,<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">fdr=<span class="keyword">function</span>(data1,data2)&#123;</span><br><span class="line">  ff=(mean(data1)-mean(data2))^<span class="number">2</span>/((sd(data1))^<span class="number">2</span>+(sd(data2))^<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">return</span>(ff)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allfdr=<span class="keyword">function</span>(data1,data2)&#123;</span><br><span class="line">  i=<span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span>(i&lt;=ncol(data1))&#123;</span><br><span class="line">    cat(i,<span class="string">&#x27; : &#x27;</span>,fdr(data1[,i],data2[,i]),<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sk=<span class="keyword">function</span>(x,Winsiz)&#123;</span><br><span class="line">  i=<span class="number">0</span></span><br><span class="line">  sk=<span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>((i+Winsiz)&lt;=length(x))&#123;</span><br><span class="line">    j=<span class="number">1</span></span><br><span class="line">    sam=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(j&lt;=Winsiz)&#123;</span><br><span class="line">      sam[j]=x[i+j]</span><br><span class="line">      j=j+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    sk[i+<span class="number">1</span>]&lt;-sum(((sam-mean(sam))^<span class="number">3</span>)/sd(sam)^<span class="number">3</span>)*(<span class="number">1</span>/(Winsiz-<span class="number">1</span>))</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>(sk)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ku=<span class="keyword">function</span>(x,Winsiz)&#123;</span><br><span class="line">  i=<span class="number">0</span></span><br><span class="line">  ku=<span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>((i+Winsiz)&lt;=length(x))&#123;</span><br><span class="line">    j=<span class="number">1</span></span><br><span class="line">    sam=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(j&lt;=Winsiz)&#123;</span><br><span class="line">      sam[j]=x[i+j]</span><br><span class="line">      j=j+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    ku[i+<span class="number">1</span>]&lt;-sum(((sam-mean(sam))^<span class="number">4</span>)/sd(sam)^<span class="number">4</span>)*(<span class="number">1</span>/(Winsiz-<span class="number">1</span>))</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>(ku)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rm=<span class="keyword">function</span>(x,Winsiz)&#123;</span><br><span class="line">  i=<span class="number">0</span></span><br><span class="line">  rm=<span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>((i+Winsiz)&lt;=length(x))&#123;</span><br><span class="line">    j=<span class="number">1</span></span><br><span class="line">    sam=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(j&lt;=Winsiz)&#123;</span><br><span class="line">      sam[j]=x[i+j]</span><br><span class="line">      j=j+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    rm[i+<span class="number">1</span>]&lt;-sqrt(sum(sam^<span class="number">2</span>)/Winsiz)</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>(rm)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p2p=<span class="keyword">function</span>(x,Winsiz)&#123;</span><br><span class="line">  i=<span class="number">0</span></span><br><span class="line">  pp=<span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>((i+Winsiz)&lt;=length(x))&#123;</span><br><span class="line">    j=<span class="number">1</span></span><br><span class="line">    sam=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(j&lt;=Winsiz)&#123;</span><br><span class="line">      sam[j]=x[i+j]</span><br><span class="line">      j=j+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    pp[i+<span class="number">1</span>]&lt;-max(sam)-min(sam)</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>(pp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">iq=<span class="keyword">function</span>(x,Winsiz)&#123;</span><br><span class="line">  i=<span class="number">0</span></span><br><span class="line">  qq=<span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>((i+Winsiz)&lt;=length(x))&#123;</span><br><span class="line">    j=<span class="number">1</span></span><br><span class="line">    sam=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(j&lt;=Winsiz)&#123;</span><br><span class="line">      sam[j]=x[i+j]</span><br><span class="line">      j=j+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    qq[i+<span class="number">1</span>]&lt;-IQR(sam)</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>(qq)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cf=<span class="keyword">function</span>(x,Winsiz)&#123;</span><br><span class="line">  i=<span class="number">0</span></span><br><span class="line">  cc=<span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>((i+Winsiz)&lt;=length(x))&#123;</span><br><span class="line">    j=<span class="number">1</span></span><br><span class="line">    sam=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(j&lt;=Winsiz)&#123;</span><br><span class="line">      sam[j]=x[i+j]</span><br><span class="line">      j=j+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    cc[i+<span class="number">1</span>]&lt;-(max(sam)-min(sam))/(sqrt(sum(sam^<span class="number">2</span>)/Winsiz))</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>(cc)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test=<span class="keyword">function</span>(data,Winsiz)&#123;</span><br><span class="line">  X_skew=sk(data$V2,Winsiz)</span><br><span class="line">  X_kurt=ku(data$V2,Winsiz)</span><br><span class="line">  X_rms=rm(data$V2,Winsiz)</span><br><span class="line">  X_p2p=p2p(data$V2,Winsiz)</span><br><span class="line">  X_iq=iq(data$V2,Winsiz)</span><br><span class="line">  X_cf=cf(data$V2,Winsiz)</span><br><span class="line">  Y_skew=sk(data$V3,Winsiz)</span><br><span class="line">  Y_kurt=ku(data$V3,Winsiz)</span><br><span class="line">  Y_rms=rm(data$V3,Winsiz)</span><br><span class="line">  Y_p2p=p2p(data$V3,Winsiz)</span><br><span class="line">  Y_iq=iq(data$V3,Winsiz)</span><br><span class="line">  Y_cf=cf(data$V3,Winsiz)</span><br><span class="line">  Z_skew=sk(data$V4,Winsiz)</span><br><span class="line">  Z_kurt=ku(data$V4,Winsiz)</span><br><span class="line">  Z_rms=rm(data$V4,Winsiz)</span><br><span class="line">  Z_p2p=p2p(data$V4,Winsiz)</span><br><span class="line">  Z_iq=iq(data$V4,Winsiz)</span><br><span class="line">  Z_cf=cf(data$V4,Winsiz)</span><br><span class="line">  all=cbind(X_skew,X_kurt,X_rms,X_p2p,X_iq,X_cf,Y_skew,Y_kurt,Y_rms,Y_p2p,Y_iq,Y_cf,Z_skew,Z_kurt,Z_rms,Z_p2p,Z_iq,Z_cf)</span><br><span class="line">  options(max.print=<span class="number">10000000</span>)</span><br><span class="line">  <span class="keyword">return</span>(all)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FDRtest=<span class="keyword">function</span>(max,size,start)&#123;</span><br><span class="line">  j=start</span><br><span class="line">  i=<span class="number">1</span></span><br><span class="line">  </span><br><span class="line">  x_sk=<span class="number">0</span></span><br><span class="line">  x_ku=<span class="number">0</span></span><br><span class="line">  x_rm=<span class="number">0</span></span><br><span class="line">  x_p2p=<span class="number">0</span></span><br><span class="line">  x_iq=<span class="number">0</span></span><br><span class="line">  x_cf=<span class="number">0</span></span><br><span class="line">  y_sk=<span class="number">0</span></span><br><span class="line">  y_ku=<span class="number">0</span></span><br><span class="line">  y_rm=<span class="number">0</span></span><br><span class="line">  y_p2p=<span class="number">0</span></span><br><span class="line">  y_iq=<span class="number">0</span></span><br><span class="line">  y_cf=<span class="number">0</span></span><br><span class="line">  z_sk=<span class="number">0</span></span><br><span class="line">  z_ku=<span class="number">0</span></span><br><span class="line">  z_rm=<span class="number">0</span></span><br><span class="line">  z_p2p=<span class="number">0</span></span><br><span class="line">  z_iq=<span class="number">0</span></span><br><span class="line">  z_cf=<span class="number">0</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(j&lt;=max)&#123;</span><br><span class="line">    h=test(normal,j)</span><br><span class="line">    f=test(fault,j)</span><br><span class="line">    </span><br><span class="line">    x_sk[i]&lt;-fdr(f[,<span class="number">1</span>],h[,<span class="number">1</span>])</span><br><span class="line">    x_ku[i]&lt;-fdr(f[,<span class="number">2</span>],h[,<span class="number">2</span>])</span><br><span class="line">    x_rm[i]&lt;-fdr(f[,<span class="number">3</span>],h[,<span class="number">3</span>])</span><br><span class="line">    x_p2p[i]&lt;-fdr(f[,<span class="number">4</span>],h[,<span class="number">4</span>])</span><br><span class="line">    x_iq[i]&lt;-fdr(f[,<span class="number">5</span>],h[,<span class="number">5</span>])</span><br><span class="line">    x_cf[i]&lt;-fdr(f[,<span class="number">6</span>],h[,<span class="number">6</span>])</span><br><span class="line">    y_sk[i]&lt;-fdr(f[,<span class="number">7</span>],h[,<span class="number">7</span>])</span><br><span class="line">    y_ku[i]&lt;-fdr(f[,<span class="number">8</span>],h[,<span class="number">8</span>])</span><br><span class="line">    y_rm[i]&lt;-fdr(f[,<span class="number">9</span>],h[,<span class="number">9</span>])</span><br><span class="line">    y_p2p[i]&lt;-fdr(f[,<span class="number">10</span>],h[,<span class="number">10</span>])</span><br><span class="line">    y_iq[i]&lt;-fdr(f[,<span class="number">11</span>],h[,<span class="number">11</span>])</span><br><span class="line">    y_cf[i]&lt;-fdr(f[,<span class="number">12</span>],h[,<span class="number">12</span>])</span><br><span class="line">    z_sk[i]&lt;-fdr(f[,<span class="number">13</span>],h[,<span class="number">13</span>])</span><br><span class="line">    z_ku[i]&lt;-fdr(f[,<span class="number">14</span>],h[,<span class="number">14</span>])</span><br><span class="line">    z_rm[i]&lt;-fdr(f[,<span class="number">15</span>],h[,<span class="number">15</span>])</span><br><span class="line">    z_p2p[i]&lt;-fdr(f[,<span class="number">16</span>],h[,<span class="number">16</span>])</span><br><span class="line">    z_iq[i]&lt;-fdr(f[,<span class="number">17</span>],h[,<span class="number">17</span>])</span><br><span class="line">    z_cf[i]&lt;-fdr(f[,<span class="number">18</span>],h[,<span class="number">18</span>])</span><br><span class="line">    </span><br><span class="line">    print(j)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(i%%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">      cat((j-start)/(max-start)*<span class="number">100</span>,<span class="string">&#x27;%\n&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    j=j+size</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  data=cbind(x_sk,x_ku,x_rm,x_p2p,x_iq,x_cf,y_sk,y_ku,y_rm,y_p2p,y_iq,y_cf,z_sk,z_ku,z_rm,z_p2p,z_iq,z_cf)</span><br><span class="line">  <span class="keyword">return</span>(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fdr_dat=FDRtest(<span class="number">100000</span>,<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line">write.table(fdr_dat,<span class="string">&#x27;fdr.csv&#x27;</span>,sep=<span class="string">&#x27;,&#x27;</span>,row.names=<span class="literal">F</span>)</span><br></pre></td></tr></table></figure><figure class="highlight r"><figcaption><span>Fast_fdr.R</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line">setwd(<span class="string">&quot;C:/Users/ohg34/Downloads&quot;</span>)</span><br><span class="line"></span><br><span class="line">normal=read.csv(<span class="string">&#x27;normal.csv&#x27;</span>,header=<span class="literal">F</span>)</span><br><span class="line">fault=read.csv(<span class="string">&#x27;fault.csv&#x27;</span>,header=<span class="literal">F</span>)</span><br><span class="line"></span><br><span class="line">normal=normal[<span class="number">100000</span>:<span class="number">2000000</span>,<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">fault=fault[<span class="number">100000</span>:<span class="number">2000000</span>,<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">fdr=<span class="keyword">function</span>(data1,data2)&#123;</span><br><span class="line">  ff=(mean(data1)-mean(data2))^<span class="number">2</span>/((sd(data1))^<span class="number">2</span>+(sd(data2))^<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">return</span>(ff)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allfdr=<span class="keyword">function</span>(data1,data2)&#123;</span><br><span class="line">  i=<span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span>(i&lt;=ncol(data1))&#123;</span><br><span class="line">    cat(i,<span class="string">&#x27; : &#x27;</span>,fdr(data1[,i],data2[,i]),<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sk=<span class="keyword">function</span>(x,Winsiz)&#123;</span><br><span class="line">  i=<span class="number">0</span></span><br><span class="line">  sk=<span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>(i&lt;floor(length(x)/Winsiz))&#123;</span><br><span class="line">    j=<span class="number">1</span></span><br><span class="line">    sam=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(j&lt;=Winsiz)&#123;</span><br><span class="line">      sam[j]=x[i*Winsiz+j]</span><br><span class="line">      j=j+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    sk[i+<span class="number">1</span>]&lt;-sum(((sam-mean(sam))^<span class="number">3</span>)/sd(sam)^<span class="number">3</span>)*(<span class="number">1</span>/(Winsiz-<span class="number">1</span>))</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>(sk)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ku=<span class="keyword">function</span>(x,Winsiz)&#123;</span><br><span class="line">  i=<span class="number">0</span></span><br><span class="line">  ku=<span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>(i&lt;floor(length(x)/Winsiz))&#123;</span><br><span class="line">    j=<span class="number">1</span></span><br><span class="line">    sam=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(j&lt;=Winsiz)&#123;</span><br><span class="line">      sam[j]=x[i*Winsiz+j]</span><br><span class="line">      j=j+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    ku[i+<span class="number">1</span>]&lt;-sum(((sam-mean(sam))^<span class="number">4</span>)/sd(sam)^<span class="number">4</span>)*(<span class="number">1</span>/(Winsiz-<span class="number">1</span>))</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>(ku)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rm=<span class="keyword">function</span>(x,Winsiz)&#123;</span><br><span class="line">  i=<span class="number">0</span></span><br><span class="line">  rm=<span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>(i&lt;floor(length(x)/Winsiz))&#123;</span><br><span class="line">    j=<span class="number">1</span></span><br><span class="line">    sam=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(j&lt;=Winsiz)&#123;</span><br><span class="line">      sam[j]=x[i*Winsiz+j]</span><br><span class="line">      j=j+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    rm[i+<span class="number">1</span>]&lt;-sqrt(sum(sam^<span class="number">2</span>)/Winsiz)</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>(rm)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p2p=<span class="keyword">function</span>(x,Winsiz)&#123;</span><br><span class="line">  i=<span class="number">0</span></span><br><span class="line">  pp=<span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>(i&lt;floor(length(x)/Winsiz))&#123;</span><br><span class="line">    j=<span class="number">1</span></span><br><span class="line">    sam=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(j&lt;=Winsiz)&#123;</span><br><span class="line">      sam[j]=x[i*Winsiz+j]</span><br><span class="line">      j=j+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    pp[i+<span class="number">1</span>]&lt;-max(sam)-min(sam)</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>(pp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">iq=<span class="keyword">function</span>(x,Winsiz)&#123;</span><br><span class="line">  i=<span class="number">0</span></span><br><span class="line">  qq=<span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>(i&lt;floor(length(x)/Winsiz))&#123;</span><br><span class="line">    j=<span class="number">1</span></span><br><span class="line">    sam=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(j&lt;=Winsiz)&#123;</span><br><span class="line">      sam[j]=x[i*Winsiz+j]</span><br><span class="line">      j=j+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    qq[i+<span class="number">1</span>]&lt;-IQR(sam)</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>(qq)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cf=<span class="keyword">function</span>(x,Winsiz)&#123;</span><br><span class="line">  i=<span class="number">0</span></span><br><span class="line">  cc=<span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>(i&lt;floor(length(x)/Winsiz))&#123;</span><br><span class="line">    j=<span class="number">1</span></span><br><span class="line">    sam=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(j&lt;=Winsiz)&#123;</span><br><span class="line">      sam[j]=x[i*Winsiz+j]</span><br><span class="line">      j=j+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    cc[i+<span class="number">1</span>]&lt;-(max(sam)-min(sam))/(sqrt(sum(sam^<span class="number">2</span>)/Winsiz))</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>(cc)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test=<span class="keyword">function</span>(data,Winsiz)&#123;</span><br><span class="line">  X_skew=sk(data$V2,Winsiz)</span><br><span class="line">  X_kurt=ku(data$V2,Winsiz)</span><br><span class="line">  X_rms=rm(data$V2,Winsiz)</span><br><span class="line">  X_p2p=p2p(data$V2,Winsiz)</span><br><span class="line">  X_iq=iq(data$V2,Winsiz)</span><br><span class="line">  X_cf=cf(data$V2,Winsiz)</span><br><span class="line">  all=cbind(X_skew,X_kurt,X_rms,X_p2p,X_iq,X_cf)</span><br><span class="line">  options(max.print=<span class="number">10000000</span>)</span><br><span class="line">  <span class="keyword">return</span>(all)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FDRtest=<span class="keyword">function</span>(max,size,start)&#123;</span><br><span class="line">  j=start</span><br><span class="line">  i=<span class="number">1</span></span><br><span class="line">  </span><br><span class="line">  x_sk=<span class="number">0</span></span><br><span class="line">  x_ku=<span class="number">0</span></span><br><span class="line">  x_rm=<span class="number">0</span></span><br><span class="line">  x_p2p=<span class="number">0</span></span><br><span class="line">  x_iq=<span class="number">0</span></span><br><span class="line">  x_cf=<span class="number">0</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(j&lt;=max)&#123;</span><br><span class="line">    h=test(normal,j)</span><br><span class="line">    f=test(fault,j)</span><br><span class="line">    </span><br><span class="line">    x_sk[i]&lt;-fdr(f[,<span class="number">1</span>],h[,<span class="number">1</span>])</span><br><span class="line">    x_ku[i]&lt;-fdr(f[,<span class="number">2</span>],h[,<span class="number">2</span>])</span><br><span class="line">    x_rm[i]&lt;-fdr(f[,<span class="number">3</span>],h[,<span class="number">3</span>])</span><br><span class="line">    x_p2p[i]&lt;-fdr(f[,<span class="number">4</span>],h[,<span class="number">4</span>])</span><br><span class="line">    x_iq[i]&lt;-fdr(f[,<span class="number">5</span>],h[,<span class="number">5</span>])</span><br><span class="line">    x_cf[i]&lt;-fdr(f[,<span class="number">6</span>],h[,<span class="number">6</span>])</span><br><span class="line">    </span><br><span class="line">    print(j)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(i%%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">      cat((j-start)/(max-start)*<span class="number">100</span>,<span class="string">&#x27;%\n&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    j=j+size</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  data=cbind(x_sk,x_ku,x_rm,x_p2p,x_iq,x_cf)</span><br><span class="line">  <span class="keyword">return</span>(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fdr_dat=FDRtest(<span class="number">100000</span>,<span class="number">1000</span>,<span class="number">1000</span>)</span><br><span class="line">write.table(fdr_dat,<span class="string">&#x27;fdr.csv&#x27;</span>,sep=<span class="string">&#x27;,&#x27;</span>,row.names=<span class="literal">F</span>)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/research/">Research</category>
      
      <category domain="https://zerohertz.github.io/categories/research/journal/">Journal</category>
      
      
      <category domain="https://zerohertz.github.io/tags/machine-learning/">Machine Learning</category>
      
      <category domain="https://zerohertz.github.io/tags/signal-processing/">Signal Processing</category>
      
      <category domain="https://zerohertz.github.io/tags/phm/">PHM</category>
      
      <category domain="https://zerohertz.github.io/tags/smart-data/">Smart data</category>
      
      <category domain="https://zerohertz.github.io/tags/dnn/">DNN</category>
      
      <category domain="https://zerohertz.github.io/tags/statistics/">Statistics</category>
      
      <category domain="https://zerohertz.github.io/tags/matlab/">Matlab</category>
      
      <category domain="https://zerohertz.github.io/tags/r/">R</category>
      
      
      <comments>https://zerohertz.github.io/diagnosis-systems-for-ball-bearing-cage-defects-using-fisher-discriminant-ratio/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>hexo-tag-gdemo</title>
      <link>https://zerohertz.github.io/hexo-tag-gdemo/</link>
      <guid>https://zerohertz.github.io/hexo-tag-gdemo/</guid>
      <pubDate>Tue, 28 Jul 2020 13:01:03 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;멋진-Plug-in&quot;&gt;&lt;a href=&quot;#멋진-Plug-in&quot; class=&quot;headerlink&quot; title=&quot;멋진 Plug in&quot;&gt;&lt;/a&gt;멋진 Plug in&lt;/h1&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.css&quot;&gt;
            &lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/prismjs/themes/prism-tomorrow.css&quot;&gt;
            &lt;script src=&quot;//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.js&quot;&gt;&lt;/script&gt;
            &lt;div id=&#39;demo-teriminal1&#39; style=&#39;height: 80px&#39;&gt;&lt;/div&gt;
            &lt;script&gt;
        new GDemo(&#39;#demo-teriminal1&#39;)
          .openApp(&#39;terminal&#39;, {minHeight: &#39;80px&#39;, windowTitle: &#39;bash&#39;, promptString: &#39;$&#39;})
    .command(`npm install @heowc&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;hexo&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;tag&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;gdemo`, {onCompleteDelay: 500})
        .respond(`install`)
        .end();
    &lt;/script&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="멋진-Plug-in"><a href="#멋진-Plug-in" class="headerlink" title="멋진 Plug in"></a>멋진 Plug in</h1><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.css">            <link rel="stylesheet" href="//cdn.jsdelivr.net/npm/prismjs/themes/prism-tomorrow.css">            <script src="//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.js"></script>            <div id='demo-teriminal1' style='height: 80px'></div>            <script>        new GDemo('#demo-teriminal1')          .openApp('terminal', {minHeight: '80px', windowTitle: 'bash', promptString: '$'})    .command(`npm install @heowc<span class="token operator">/</span>hexo<span class="token operator">-</span>tag<span class="token operator">-</span>gdemo`, {onCompleteDelay: 500})        .respond(`install`)        .end();    </script><a id="more"></a><hr><h1 id="사용법"><a href="#사용법" class="headerlink" title="사용법"></a>사용법</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gdemo_terminal &#39;command1;command2;...&#39; &#39;minHeight&#39; &#39;windowTitle&#39; &#39;onCompleteDelay&#39; &#39;promptString&#39; &#39;id&#39; &#39;highlightingLang&#39; %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endgdemo_terminal %&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.css">            <link rel="stylesheet" href="//cdn.jsdelivr.net/npm/prismjs/themes/prism-tomorrow.css">            <script src="//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.js"></script>            <div id='career' style='height: 150px'></div>            <script>        new GDemo('#career')          .openApp('terminal', {minHeight: '150px', windowTitle: 'Career', promptString: '$'})    .command(`<span class="token number">2017.03</span> ~ <span class="token punctuation">:</span> Konkuk Univ<span class="token operator">.</span> Mechanical Engineering`, {onCompleteDelay: 300}).command(`<span class="token number">2018.06</span> ~ <span class="token number">2019.11</span> <span class="token punctuation">:</span> Former undergraduate researcher at MRV Lab<span class="token operator">.</span><span class="token punctuation">(</span>Medical Robotics and Virtual Reality Laboratory<span class="token punctuation">)</span>`, {onCompleteDelay: 300}).command(`<span class="token number">2019.11</span> ~ <span class="token punctuation">:</span> Undergraduate researcher at SiM Lab<span class="token operator">.</span><span class="token punctuation">(</span>Smart intelligent Manufacturing system Laboratory<span class="token punctuation">)</span>`, {onCompleteDelay: 300})        .respond(``)        .end();    </script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gdemo_terminal &#39;2017.03 ~ : Konkuk Univ. Mechanical Engineering;2018.06 ~ 2019.11 : Former undergraduate researcher at MRV Lab.(Medical Robotics and Virtual Reality Laboratory);2019.11 ~ : Undergraduate researcher at SiM Lab.(Smart intelligent Manufacturing system Laboratory)&#39; &#39;150px&#39; &#39;Career&#39; &#39;300&#39; &#39;$&#39; &#39;career&#39; &#39;vim&#39; %&#125;</span><br><span class="line">&#123;% endgdemo_terminal %&#125;</span><br></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly9oZW93Yy5kZXYvMjAxOC8xMS8xNC9pbnRyb2R1Y3Rpb24taGV4by10YWctZ2RlbW8v">Reference<i class="fa fa-external-link-alt"></i></span></p>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/etc/">Etc.</category>
      
      
      <category domain="https://zerohertz.github.io/tags/git/">Git</category>
      
      
      <comments>https://zerohertz.github.io/hexo-tag-gdemo/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Source Code(Obstructive Sleep Apnea)</title>
      <link>https://zerohertz.github.io/source-code-obstructive-sleep-apnea/</link>
      <guid>https://zerohertz.github.io/source-code-obstructive-sleep-apnea/</guid>
      <pubDate>Mon, 27 Jul 2020 09:27:01 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Prototype-1-Arduino-Computer&quot;&gt;&lt;a href=&quot;#Prototype-1-Arduino-Computer&quot; class=&quot;headerlink&quot; title=&quot;Prototype 1(Arduino, Computer)&quot;&gt;&lt;/a&gt;Prototype 1(Arduino, Computer)&lt;/h1&gt;&lt;h2 id=&quot;Arduino&quot;&gt;&lt;a href=&quot;#Arduino&quot; class=&quot;headerlink&quot; title=&quot;Arduino&quot;&gt;&lt;/a&gt;Arduino&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;figcaption&gt;&lt;span&gt;Senosr.ino&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Serial.begin(&lt;span class=&quot;number&quot;&gt;2000000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x_val = analogRead(A0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; y_val = analogRead(A1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; z_val = analogRead(A2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; AE = analogRead(A7);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(AE &amp;gt;= &lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    AE = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    AE = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Serial.print(x_val);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Serial.print(&lt;span class=&quot;string&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Serial.print(y_val);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Serial.print(&lt;span class=&quot;string&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Serial.print(z_val);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Serial.print(&lt;span class=&quot;string&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Serial.print(AE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Serial.print(&lt;span class=&quot;string&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  delay(&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Prototype-1-Arduino-Computer"><a href="#Prototype-1-Arduino-Computer" class="headerlink" title="Prototype 1(Arduino, Computer)"></a>Prototype 1(Arduino, Computer)</h1><h2 id="Arduino"><a href="#Arduino" class="headerlink" title="Arduino"></a>Arduino</h2><figure class="highlight c++"><figcaption><span>Senosr.ino</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">2000000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> x_val = analogRead(A0);</span><br><span class="line">  <span class="keyword">int</span> y_val = analogRead(A1);</span><br><span class="line">  <span class="keyword">int</span> z_val = analogRead(A2);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> AE = analogRead(A7);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(AE &gt;= <span class="number">500</span>)&#123;</span><br><span class="line">    AE = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    AE = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  Serial.print(x_val);</span><br><span class="line">  Serial.print(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">  Serial.print(y_val);</span><br><span class="line">  Serial.print(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">  Serial.print(z_val);</span><br><span class="line">  Serial.print(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">  Serial.print(AE);</span><br><span class="line">  Serial.print(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  delay(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><figcaption><span>Serial.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;CSerialComm.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CSerialComm SerialComm;</span><br><span class="line"></span><br><span class="line">ofstream file;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;File name : &quot;</span>;</span><br><span class="line"><span class="built_in">string</span> nameOfFile;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; nameOfFile;</span><br><span class="line">nameOfFile = nameOfFile + <span class="string">&quot;.csv&quot;</span>;</span><br><span class="line">file.open(nameOfFile);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Port num : &quot;</span>;</span><br><span class="line"><span class="built_in">string</span> port_name;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; port_name;</span><br><span class="line"><span class="keyword">char</span> port[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(port, port_name.c_str());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SerialComm.connect(port))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Serial port is connected!!\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Sercial connection fail!!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">Sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">BYTE data_init[<span class="number">32</span>];</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (j &lt; <span class="number">10</span>) &#123;</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">SerialComm.readCommand(data_init[i]);</span><br><span class="line"><span class="keyword">if</span> (data_init[i] == <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">j++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; j &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">BYTE data[<span class="number">32</span>];</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line">chrono::system_clock::time_point start = <span class="built_in">std</span>::chrono::system_clock::now();</span><br><span class="line">chrono::duration&lt;<span class="keyword">double</span>&gt; sec = <span class="built_in">std</span>::chrono::system_clock::now() - start;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (GetAsyncKeyState(VK_ESCAPE)) <span class="keyword">break</span>;</span><br><span class="line">sec = <span class="built_in">std</span>::chrono::system_clock::now() - start;</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">SerialComm.readCommand(data[i]);</span><br><span class="line"><span class="keyword">if</span> (data[i] == <span class="string">&#x27;\n&#x27;</span>)&#123;</span><br><span class="line"><span class="built_in">string</span> time = to_string(sec.count());</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">str_data</span><span class="params">(data, data + i + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="built_in">string</span> str = time + <span class="string">&#x27;,&#x27;</span> + str_data;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str;</span><br><span class="line">file &lt;&lt; str;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">file.close();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>CSerialComm.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;serialport.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RETURN_SUCCESS 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RETURN_FAIL 0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CSerialComm</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CSerialComm();</span><br><span class="line">~CSerialComm();</span><br><span class="line"></span><br><span class="line">CSerialPortserial;</span><br><span class="line"><span class="function"><span class="keyword">int</span><span class="title">connect</span><span class="params">(<span class="keyword">char</span>* _portNum)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span><span class="title">readCommand</span><span class="params">(BYTE &amp;p)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span><span class="title">disconnect</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>CSerialComm.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;CSerialComm.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CSerialComm::CSerialComm() &#123;&#125;</span><br><span class="line">CSerialComm::~CSerialComm() &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CSerialComm::connect</span><span class="params">(<span class="keyword">char</span>* portNum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!serial.OpenPort(portNum))</span><br><span class="line"><span class="keyword">return</span> RETURN_FAIL;</span><br><span class="line"></span><br><span class="line">serial.ConfigurePort(<span class="number">2000000</span>, <span class="number">8</span>, FALSE, NOPARITY, ONESTOPBIT);</span><br><span class="line">serial.SetCommunicationTimeouts(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> RETURN_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CSerialComm::readCommand</span><span class="params">(BYTE &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (serial.ReadByte(p))</span><br><span class="line"><span class="keyword">return</span> RETURN_SUCCESS;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> RETURN_FAIL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CSerialComm::disconnect</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">serial.ClosePort();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="Prototype-2-Arduino-nano-33-BLE-RaspberryPi"><a href="#Prototype-2-Arduino-nano-33-BLE-RaspberryPi" class="headerlink" title="Prototype 2(Arduino nano 33 BLE, RaspberryPi)"></a>Prototype 2(Arduino nano 33 BLE, RaspberryPi)</h1><h2 id="Arduino-1"><a href="#Arduino-1" class="headerlink" title="Arduino"></a>Arduino</h2><figure class="highlight c++"><figcaption><span>peripheral.ino</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ArduinoBLE.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Arduino_LSM9DS1.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">BLEService <span class="title">ACC</span><span class="params">(<span class="string">&quot;1001&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">BLEFloatCharacteristic <span class="title">accX</span><span class="params">(<span class="string">&quot;2001&quot;</span>, BLERead | BLENotify)</span></span>;</span><br><span class="line"><span class="function">BLEFloatCharacteristic <span class="title">accY</span><span class="params">(<span class="string">&quot;2002&quot;</span>, BLERead | BLENotify)</span></span>;</span><br><span class="line"><span class="function">BLEFloatCharacteristic <span class="title">accZ</span><span class="params">(<span class="string">&quot;2003&quot;</span>, BLERead | BLENotify)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">BLEService <span class="title">GYRO</span><span class="params">(<span class="string">&quot;1002&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">BLEFloatCharacteristic <span class="title">gyroX</span><span class="params">(<span class="string">&quot;2011&quot;</span>, BLERead | BLENotify)</span></span>;</span><br><span class="line"><span class="function">BLEFloatCharacteristic <span class="title">gyroY</span><span class="params">(<span class="string">&quot;2012&quot;</span>, BLERead | BLENotify)</span></span>;</span><br><span class="line"><span class="function">BLEFloatCharacteristic <span class="title">gyroZ</span><span class="params">(<span class="string">&quot;2013&quot;</span>, BLERead | BLENotify)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">BLEService <span class="title">MAG</span><span class="params">(<span class="string">&quot;1003&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">BLEFloatCharacteristic <span class="title">magX</span><span class="params">(<span class="string">&quot;2021&quot;</span>, BLERead | BLENotify)</span></span>;</span><br><span class="line"><span class="function">BLEFloatCharacteristic <span class="title">magY</span><span class="params">(<span class="string">&quot;2022&quot;</span>, BLERead | BLENotify)</span></span>;</span><br><span class="line"><span class="function">BLEFloatCharacteristic <span class="title">magZ</span><span class="params">(<span class="string">&quot;2023&quot;</span>, BLERead | BLENotify)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> acc_x, acc_y, acc_z;</span><br><span class="line"><span class="keyword">float</span> gyro_x, gyro_y, gyro_z;</span><br><span class="line"><span class="keyword">float</span> mag_x, mag_y, mag_z;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(!BLE.begin()) &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;Starting BLE Failed!&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!IMU.begin()) &#123; <span class="comment">//LSM9DSI센서 시작</span></span><br><span class="line">    Serial.println(<span class="string">&quot;LSM9DSI센서 오류!&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  BLE.setDeviceName(<span class="string">&quot;IMU&quot;</span>);</span><br><span class="line">  BLE.setLocalName(<span class="string">&quot;IMU&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  BLE.setAdvertisedService(ACC);</span><br><span class="line">  BLE.setAdvertisedService(GYRO);</span><br><span class="line">  BLE.setAdvertisedService(MAG);</span><br><span class="line">  ACC.addCharacteristic(accX);</span><br><span class="line">  ACC.addCharacteristic(accY);</span><br><span class="line">  ACC.addCharacteristic(accZ);</span><br><span class="line">  GYRO.addCharacteristic(gyroX);</span><br><span class="line">  GYRO.addCharacteristic(gyroY);</span><br><span class="line">  GYRO.addCharacteristic(gyroZ);</span><br><span class="line">  MAG.addCharacteristic(magX);</span><br><span class="line">  MAG.addCharacteristic(magY);</span><br><span class="line">  MAG.addCharacteristic(magZ);</span><br><span class="line">  BLE.addService(ACC);</span><br><span class="line">  BLE.addService(GYRO);</span><br><span class="line">  BLE.addService(MAG);</span><br><span class="line">  BLE.setConnectable(<span class="literal">true</span>);</span><br><span class="line">  BLE.setAdvertisingInterval(<span class="number">100</span>);</span><br><span class="line">  BLE.advertise();</span><br><span class="line">  Serial.println(<span class="string">&quot;Bluetooth Device Active, Waiting for Connections...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  BLEDevice central = BLE.central();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(central) &#123;</span><br><span class="line">    Serial.print(<span class="string">&quot;Connected to Central: &quot;</span>);</span><br><span class="line">    Serial.println(central.address());</span><br><span class="line">    <span class="keyword">while</span>(central.connected()) &#123;</span><br><span class="line">      IMU.readAcceleration(acc_x, acc_y, acc_z);</span><br><span class="line">      IMU.readGyroscope(gyro_x, gyro_y, gyro_z);</span><br><span class="line">      IMU.readMagneticField(mag_x, mag_y, mag_z);      </span><br><span class="line">      accX.writeValue(acc_x);</span><br><span class="line">      accY.writeValue(acc_y);</span><br><span class="line">      accZ.writeValue(acc_z);</span><br><span class="line">      gyroX.writeValue(gyro_x);</span><br><span class="line">      gyroY.writeValue(gyro_y);</span><br><span class="line">      gyroZ.writeValue(gyro_z);</span><br><span class="line">      magX.writeValue(mag_x);</span><br><span class="line">      magY.writeValue(mag_y);</span><br><span class="line">      magZ.writeValue(mag_z);</span><br><span class="line">      Serial.println(acc_x);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  Serial.print(<span class="string">&quot;Disconnected from Central: &quot;</span>);</span><br><span class="line">  Serial.println(BLE.address());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>central.ino</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ArduinoBLE.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> dat&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> asdf[<span class="number">4</span>];</span><br><span class="line">  <span class="keyword">float</span> zxcv;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">getData</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> data[], <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">  dat dat;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    dat.asdf[i] = data[i]; </span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> dat.zxcv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printcsv</span><span class="params">(BLECharacteristic c1, BLECharacteristic c2, BLECharacteristic c3, BLECharacteristic c4, BLECharacteristic c5, BLECharacteristic c6, BLECharacteristic c7, BLECharacteristic c8, BLECharacteristic c9)</span></span>&#123;</span><br><span class="line">  c1.read();</span><br><span class="line">  c2.read();</span><br><span class="line">  c3.read();</span><br><span class="line">  c4.read();</span><br><span class="line">  c5.read();</span><br><span class="line">  c6.read();</span><br><span class="line">  c7.read();</span><br><span class="line">  c8.read();</span><br><span class="line">  c9.read(); </span><br><span class="line">  <span class="keyword">float</span> f1=getData(c1.value(), c1.valueLength());</span><br><span class="line">  <span class="keyword">float</span> f2=getData(c2.value(), c2.valueLength());</span><br><span class="line">  <span class="keyword">float</span> f3=getData(c3.value(), c3.valueLength());</span><br><span class="line">  <span class="keyword">float</span> f4=getData(c4.value(), c4.valueLength());</span><br><span class="line">  <span class="keyword">float</span> f5=getData(c5.value(), c5.valueLength());</span><br><span class="line">  <span class="keyword">float</span> f6=getData(c6.value(), c6.valueLength());</span><br><span class="line">  <span class="keyword">float</span> f7=getData(c7.value(), c7.valueLength());</span><br><span class="line">  <span class="keyword">float</span> f8=getData(c8.value(), c8.valueLength());</span><br><span class="line">  <span class="keyword">float</span> f9=getData(c9.value(), c9.valueLength());</span><br><span class="line">  Serial.print(f1);</span><br><span class="line">  Serial.print(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  Serial.print(f2);</span><br><span class="line">  Serial.print(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  Serial.print(f3);</span><br><span class="line">  Serial.print(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  Serial.print(f4);</span><br><span class="line">  Serial.print(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  Serial.print(f5);</span><br><span class="line">  Serial.print(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  Serial.print(f6);</span><br><span class="line">  Serial.print(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  Serial.print(f7);</span><br><span class="line">  Serial.print(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  Serial.print(f8);</span><br><span class="line">  Serial.print(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  Serial.print(f9);</span><br><span class="line">  Serial.print(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!BLE.begin()) &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;Starting BLE Failed!&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  BLE.scan();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  BLEDevice peripheral = BLE.available();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(peripheral)&#123;</span><br><span class="line">    <span class="keyword">if</span>(peripheral.localName()==<span class="string">&quot;IMU&quot;</span>)&#123;</span><br><span class="line">      BLE.stopScan();</span><br><span class="line">      <span class="keyword">if</span>(peripheral.connect())&#123;</span><br><span class="line">        Serial.println(<span class="string">&quot;Connect1&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(peripheral.discoverAttributes())&#123;</span><br><span class="line">        Serial.println(<span class="string">&quot;Connect2&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      BLEService acc=peripheral.service(<span class="string">&quot;1001&quot;</span>);</span><br><span class="line">      BLECharacteristic accx=acc.characteristic(<span class="string">&quot;2001&quot;</span>);</span><br><span class="line">      BLECharacteristic accy=acc.characteristic(<span class="string">&quot;2002&quot;</span>);</span><br><span class="line">      BLECharacteristic accz=acc.characteristic(<span class="string">&quot;2003&quot;</span>);</span><br><span class="line">      BLEService gyro=peripheral.service(<span class="string">&quot;1002&quot;</span>);</span><br><span class="line">      BLECharacteristic gyrox=gyro.characteristic(<span class="string">&quot;2011&quot;</span>);</span><br><span class="line">      BLECharacteristic gyroy=gyro.characteristic(<span class="string">&quot;2012&quot;</span>);</span><br><span class="line">      BLECharacteristic gyroz=gyro.characteristic(<span class="string">&quot;2013&quot;</span>);</span><br><span class="line">      BLEService mag=peripheral.service(<span class="string">&quot;1003&quot;</span>);</span><br><span class="line">      BLECharacteristic magx=mag.characteristic(<span class="string">&quot;2021&quot;</span>);</span><br><span class="line">      BLECharacteristic magy=mag.characteristic(<span class="string">&quot;2022&quot;</span>);</span><br><span class="line">      BLECharacteristic magz=mag.characteristic(<span class="string">&quot;2023&quot;</span>);</span><br><span class="line">      <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="comment">//        accx.read();</span></span><br><span class="line"><span class="comment">//        float f1=getData(accx.value(),accx.valueLength());</span></span><br><span class="line"><span class="comment">//        Serial.print(f1);</span></span><br><span class="line"><span class="comment">//        Serial.print(&#x27;,&#x27;);</span></span><br><span class="line"><span class="comment">//        accy.read();</span></span><br><span class="line"><span class="comment">//        float f2=getData(accy.value(),accy.valueLength());</span></span><br><span class="line"><span class="comment">//        Serial.print(f2);</span></span><br><span class="line"><span class="comment">//        Serial.print(&#x27;,&#x27;);</span></span><br><span class="line"><span class="comment">//        accz.read();</span></span><br><span class="line"><span class="comment">//        float f3=getData(accz.value(),accz.valueLength());</span></span><br><span class="line"><span class="comment">//        Serial.println(f3);</span></span><br><span class="line">        <span class="keyword">if</span>(peripheral.connected())&#123;</span><br><span class="line">          printcsv(accx,accy,accz,gyrox,gyroy,gyroz,magx,magy,magz);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">          peripheral.disconnect();</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  BLE.scan();</span><br><span class="line">  Serial.println(<span class="string">&quot;rescan&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><figcaption><span>ser.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> serial</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">ser = serial.Serial(<span class="string">&#x27;/dev/ttyACM0&#x27;</span>, <span class="number">115200</span>)</span><br><span class="line">f = open(<span class="string">&#x27;filename.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">t = time.time()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> ser.in_waiting != <span class="number">0</span>:</span><br><span class="line">            t1 = time.time() - t</span><br><span class="line">            t2 = round(t1, <span class="number">5</span>)</span><br><span class="line">            t3 = str(t2)</span><br><span class="line">            sensor = ser.readline()</span><br><span class="line">            print(t3)</span><br><span class="line">            print(sensor.decode())</span><br><span class="line">            f.write(t3)</span><br><span class="line">            f.write(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">            f.write(sensor.decode())</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><hr><h1 id="R"><a href="#R" class="headerlink" title="R"></a>R</h1><h2 id="Undersampling"><a href="#Undersampling" class="headerlink" title="Undersampling"></a>Undersampling</h2><figure class="highlight r"><figcaption><span>undersampling.R</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">setwd(<span class="string">&quot;/Users/zerohertz/MATLAB/Obstructive Sleep Apnea/&quot;</span>)</span><br><span class="line"></span><br><span class="line">del=read.csv(<span class="string">&quot;delta.csv&quot;</span>,header=<span class="literal">T</span>)</span><br><span class="line"></span><br><span class="line">del0=subset(del,subset=(del$Sleep==<span class="number">0</span>))</span><br><span class="line">del10=subset(del,subset=(del$Sleep==<span class="number">10</span>))</span><br><span class="line">del20=subset(del,subset=(del$Sleep==<span class="number">20</span>))</span><br><span class="line">del30=subset(del,subset=(del$Sleep==<span class="number">30</span>))</span><br><span class="line">del40=subset(del,subset=(del$Sleep==<span class="number">40</span>))</span><br><span class="line"></span><br><span class="line">s1=del10[sample(nrow(del10),<span class="number">1252</span>,replace=<span class="literal">FALSE</span>),]</span><br><span class="line">s2=del20[sample(nrow(del20),<span class="number">10954</span>,replace=<span class="literal">FALSE</span>),]</span><br><span class="line">s3=del30[sample(nrow(del30),<span class="number">1643</span>,replace=<span class="literal">FALSE</span>),]</span><br><span class="line">s4=del40[sample(nrow(del40),<span class="number">4421</span>,replace=<span class="literal">FALSE</span>),]</span><br><span class="line"></span><br><span class="line">sleep=rbind(s1,s2,s3,s4)</span><br><span class="line"></span><br><span class="line">write.table(sleep,file=<span class="string">&quot;sl1.csv&quot;</span>,sep=<span class="string">&quot;,&quot;</span>,row.names=<span class="literal">F</span>,col.names=<span class="literal">T</span>)</span><br></pre></td></tr></table></figure><h2 id="Make-Label-Data"><a href="#Make-Label-Data" class="headerlink" title="Make Label Data"></a>Make Label Data</h2><figure class="highlight r"><figcaption><span>MakeLabelData</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i &lt;= length(raw[,<span class="number">1</span>]))&#123;</span><br><span class="line">time=raw[i,<span class="number">1</span>]</span><br><span class="line">ti=time%/%<span class="number">30</span>+<span class="number">1</span></span><br><span class="line">raw[i,<span class="number">6</span>]=lab[ti,<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">if</span>(lab[ti,<span class="number">1</span>]==<span class="string">&#x27;W&#x27;</span>)&#123;</span><br><span class="line">    raw[i,<span class="number">7</span>]=<span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(lab[ti,<span class="number">1</span>]==<span class="string">&#x27;N1&#x27;</span>)&#123;</span><br><span class="line">    raw[i,<span class="number">7</span>]=<span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(lab[ti,<span class="number">1</span>]==<span class="string">&#x27;N2&#x27;</span>)&#123;</span><br><span class="line">    raw[i,<span class="number">7</span>]=<span class="number">20</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(lab[ti,<span class="number">1</span>]==<span class="string">&#x27;N3&#x27;</span>)&#123;</span><br><span class="line">    raw[i,<span class="number">7</span>]=<span class="number">30</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(lab[ti,<span class="number">1</span>]==<span class="string">&#x27;R&#x27;</span>)&#123;</span><br><span class="line">    raw[i,<span class="number">7</span>]=<span class="number">40</span></span><br><span class="line">  &#125;</span><br><span class="line">  i=i+<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">write.table(raw,file=<span class="string">&quot;label.csv&quot;</span>,sep=<span class="string">&quot;,&quot;</span>,row.names=<span class="literal">F</span>,col.names=<span class="literal">F</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="DNF-Number"><a href="#DNF-Number" class="headerlink" title="DNF Number"></a>DNF Number</h1><figure class="highlight matlab"><figcaption><span>dnf.m</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dnf_num</span> = <span class="title">dnf</span><span class="params">(c1, c2, al, be)</span></span></span><br><span class="line">    dnf_num = <span class="number">1</span>/(al+be)*(al*(kurtosis(c1)/kurtosis(c2))+be*(<span class="built_in">sqrt</span>(var(c1))/<span class="built_in">sqrt</span>(var(c2))));</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/research/">Research</category>
      
      <category domain="https://zerohertz.github.io/categories/research/journal/">Journal</category>
      
      
      <category domain="https://zerohertz.github.io/tags/machine-learning/">Machine Learning</category>
      
      <category domain="https://zerohertz.github.io/tags/signal-processing/">Signal Processing</category>
      
      <category domain="https://zerohertz.github.io/tags/phm/">PHM</category>
      
      <category domain="https://zerohertz.github.io/tags/arduino/">Arduino</category>
      
      <category domain="https://zerohertz.github.io/tags/c-c/">C, C++</category>
      
      <category domain="https://zerohertz.github.io/tags/raspberrypi/">RaspberryPi</category>
      
      <category domain="https://zerohertz.github.io/tags/python/">Python</category>
      
      <category domain="https://zerohertz.github.io/tags/dnn/">DNN</category>
      
      <category domain="https://zerohertz.github.io/tags/statistics/">Statistics</category>
      
      <category domain="https://zerohertz.github.io/tags/matlab/">Matlab</category>
      
      <category domain="https://zerohertz.github.io/tags/sleep-apnea/">Sleep apnea</category>
      
      
      <comments>https://zerohertz.github.io/source-code-obstructive-sleep-apnea/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Matlab(12)</title>
      <link>https://zerohertz.github.io/matlab-12/</link>
      <guid>https://zerohertz.github.io/matlab-12/</guid>
      <pubDate>Fri, 17 Jul 2020 07:07:02 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;제어문&quot;&gt;&lt;a href=&quot;#제어문&quot; class=&quot;headerlink&quot; title=&quot;제어문&quot;&gt;&lt;/a&gt;제어문&lt;/h1&gt;&lt;h2 id=&quot;조건문&quot;&gt;&lt;a href=&quot;#조건문&quot; class=&quot;headerlink&quot; title=&quot;조건문&quot;&gt;&lt;/a&gt;조건문&lt;/h2&gt;&lt;h3 id=&quot;if-elseif-else&quot;&gt;&lt;a href=&quot;#if-elseif-else&quot; class=&quot;headerlink&quot; title=&quot;if-elseif-else&quot;&gt;&lt;/a&gt;if-elseif-else&lt;/h3&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; 조건&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    실행 문장&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;elseif&lt;/span&gt; 조건&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    실행 문장&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;elseif&lt;/span&gt; 조건&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    실행 문장&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    실행 문장&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;switch&quot;&gt;&lt;a href=&quot;#switch&quot; class=&quot;headerlink&quot; title=&quot;switch&quot;&gt;&lt;/a&gt;switch&lt;/h3&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt;(변수)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;(값&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        실행 문장&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;(값&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        실행 문장&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;otherwise&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        실행 문장&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="제어문"><a href="#제어문" class="headerlink" title="제어문"></a>제어문</h1><h2 id="조건문"><a href="#조건문" class="headerlink" title="조건문"></a>조건문</h2><h3 id="if-elseif-else"><a href="#if-elseif-else" class="headerlink" title="if-elseif-else"></a>if-elseif-else</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 조건<span class="number">1</span></span><br><span class="line">    실행 문장</span><br><span class="line"><span class="keyword">elseif</span> 조건<span class="number">2</span></span><br><span class="line">    실행 문장</span><br><span class="line"><span class="keyword">elseif</span> 조건<span class="number">3</span></span><br><span class="line">    실행 문장</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    실행 문장</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(변수)</span><br><span class="line">    <span class="keyword">case</span>(값<span class="number">1</span>)</span><br><span class="line">        실행 문장</span><br><span class="line">    <span class="keyword">case</span>(값<span class="number">2</span>)</span><br><span class="line">        실행 문장</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">otherwise</span></span><br><span class="line">        실행 문장</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="반복문"><a href="#반복문" class="headerlink" title="반복문"></a>반복문</h2><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(조건)</span><br><span class="line">    실행 문장</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 변수 = 시작:끝</span><br><span class="line">    실행 문장</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 변수 = 시작:delta:끝</span><br><span class="line">    실행 문장</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 변수 = [num1, num2, ...]</span><br><span class="line">    실행 문장</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><hr><h1 id="함수"><a href="#함수" class="headerlink" title="함수"></a>함수</h1><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 주석 작성 시 help 명령어에 출력</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 출력 = 함수명<span class="params">(param1, param2, ...)</span></span></span><br><span class="line">실행 문장</span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">함수명 = @(param1, param2, ...) 공식;</span><br></pre></td></tr></table></figure><hr><h1 id="DNN"><a href="#DNN" class="headerlink" title="DNN"></a>DNN</h1><figure class="highlight matlab"><figcaption><span>MNIST.m</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; digitDatasetPath=fullfile(matlabroot,<span class="string">&#x27;toolbox&#x27;</span>,<span class="string">&#x27;nnet&#x27;</span>,<span class="string">&#x27;nndemos&#x27;</span>,<span class="string">&#x27;nndatasets&#x27;</span>,<span class="string">&#x27;DigitDataset&#x27;</span>)</span><br><span class="line"></span><br><span class="line">digitDatasetPath =</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;/Applications/MATLAB_R2020a.app/toolbox/nnet/nndemos/nndatasets/DigitDataset&#x27;</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; imds=imageDatastore(digitDatasetPath,<span class="string">&#x27;IncludeSubfolders&#x27;</span>,<span class="built_in">true</span>,<span class="string">&#x27;LabelSource&#x27;</span>,<span class="string">&#x27;foldernames&#x27;</span>)</span><br><span class="line"></span><br><span class="line">imds = </span><br><span class="line"></span><br><span class="line">  ImageDatastore - 속성 있음:</span><br><span class="line"></span><br><span class="line">                       Files: &#123;</span><br><span class="line">                              <span class="string">&#x27; .../toolbox/nnet/nndemos/nndatasets/DigitDataset/0/image10000.png&#x27;</span>;</span><br><span class="line">                              <span class="string">&#x27; .../toolbox/nnet/nndemos/nndatasets/DigitDataset/0/image9001.png&#x27;</span>;</span><br><span class="line">                              <span class="string">&#x27; .../toolbox/nnet/nndemos/nndatasets/DigitDataset/0/image9002.png&#x27;</span></span><br><span class="line">                               ... and <span class="number">9997</span> more</span><br><span class="line">                              &#125;</span><br><span class="line">                     Folders: &#123;</span><br><span class="line">                              <span class="string">&#x27; .../MATLAB_R2020a.app/toolbox/nnet/nndemos/nndatasets/DigitDataset&#x27;</span></span><br><span class="line">                              &#125;</span><br><span class="line">                      Labels: [<span class="number">0</span>; <span class="number">0</span>; <span class="number">0</span> ... and <span class="number">9997</span> more categorical]</span><br><span class="line">    AlternateFileSystemRoots: &#123;&#125;</span><br><span class="line">                    ReadSize: <span class="number">1</span></span><br><span class="line">      SupportedOutputFormats: [<span class="string">&quot;png&quot;</span>    <span class="string">&quot;jpg&quot;</span>    <span class="string">&quot;jpeg&quot;</span>    <span class="string">&quot;tif&quot;</span>    <span class="string">&quot;tiff&quot;</span>]</span><br><span class="line">         DefaultOutputFormat: <span class="string">&quot;png&quot;</span></span><br><span class="line">                     ReadFcn: @readDatastoreImage</span><br><span class="line"></span><br><span class="line">&gt;&gt; <span class="built_in">figure</span>;</span><br><span class="line">perm=randperm(<span class="number">10000</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">20</span></span><br><span class="line">    subplot(<span class="number">4</span>,<span class="number">5</span>,<span class="built_in">i</span>);</span><br><span class="line">    imshow(imds.Files&#123;perm(<span class="built_in">i</span>)&#125;);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">&gt;&gt; layers=[imageInputLayer([<span class="number">28</span> <span class="number">28</span> <span class="number">1</span>])</span><br><span class="line">convolution2dLayer(<span class="number">3</span>,<span class="number">8</span>,<span class="string">&#x27;Padding&#x27;</span>,<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">batchNormalizationLayer</span><br><span class="line">reluLayer</span><br><span class="line">maxPooling2dLayer(<span class="number">2</span>,<span class="string">&#x27;Stride&#x27;</span>,<span class="number">2</span>)</span><br><span class="line">convolution2dLayer(<span class="number">3</span>,<span class="number">16</span>,<span class="string">&#x27;Padding&#x27;</span>,<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">batchNormalizationLayer</span><br><span class="line">reluLayer</span><br><span class="line">maxPooling2dLayer(<span class="number">2</span>,<span class="string">&#x27;stride&#x27;</span>,<span class="number">2</span>)</span><br><span class="line">convolution2dLayer(<span class="number">3</span>,<span class="number">32</span>,<span class="string">&#x27;Padding&#x27;</span>,<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">batchNormalizationLayer</span><br><span class="line">reluLayer</span><br><span class="line">fullyConnectedLayer(<span class="number">10</span>)</span><br><span class="line">softmaxLayer</span><br><span class="line">classificationLayer];</span><br><span class="line"></span><br><span class="line">&gt;&gt; options=trainingOptions(<span class="string">&#x27;sgdm&#x27;</span>,<span class="string">&#x27;InitialLearnRate&#x27;</span>,<span class="number">0.01</span>,<span class="string">&#x27;MaxEpochs&#x27;</span>,<span class="number">4</span>,<span class="string">&#x27;Shuffle&#x27;</span>,<span class="string">&#x27;every-epoch&#x27;</span>,<span class="string">&#x27;ExecutionEnvironment&#x27;</span>,<span class="string">&#x27;cpu&#x27;</span>,<span class="string">&#x27;Plots&#x27;</span>,<span class="string">&#x27;training-progress&#x27;</span>) <span class="comment">% gpu 가능</span></span><br><span class="line"></span><br><span class="line">options = </span><br><span class="line"></span><br><span class="line">  TrainingOptionsSGDM - 속성 있음:</span><br><span class="line"></span><br><span class="line">                    Momentum: <span class="number">0.9000</span></span><br><span class="line">            InitialLearnRate: <span class="number">0.0100</span></span><br><span class="line">           LearnRateSchedule: <span class="string">&#x27;none&#x27;</span></span><br><span class="line">         LearnRateDropFactor: <span class="number">0.1000</span></span><br><span class="line">         LearnRateDropPeriod: <span class="number">10</span></span><br><span class="line">            L2Regularization: <span class="number">1.0000e-04</span></span><br><span class="line">     GradientThresholdMethod: <span class="string">&#x27;l2norm&#x27;</span></span><br><span class="line">           GradientThreshold: Inf</span><br><span class="line">                   MaxEpochs: <span class="number">4</span></span><br><span class="line">               MiniBatchSize: <span class="number">128</span></span><br><span class="line">                     Verbose: <span class="number">1</span></span><br><span class="line">            VerboseFrequency: <span class="number">50</span></span><br><span class="line">              ValidationData: []</span><br><span class="line">         ValidationFrequency: <span class="number">50</span></span><br><span class="line">          ValidationPatience: Inf</span><br><span class="line">                     Shuffle: <span class="string">&#x27;every-epoch&#x27;</span></span><br><span class="line">              CheckpointPath: <span class="string">&#x27;&#x27;</span></span><br><span class="line">        ExecutionEnvironment: <span class="string">&#x27;cpu&#x27;</span></span><br><span class="line">                  WorkerLoad: []</span><br><span class="line">                   OutputFcn: []</span><br><span class="line">                       Plots: <span class="string">&#x27;training-progress&#x27;</span></span><br><span class="line">              SequenceLength: <span class="string">&#x27;longest&#x27;</span></span><br><span class="line">        SequencePaddingValue: <span class="number">0</span></span><br><span class="line">    SequencePaddingDirection: <span class="string">&#x27;right&#x27;</span></span><br><span class="line">        DispatchInBackground: <span class="number">0</span></span><br><span class="line">     ResetInputNormalization: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; net=trainNetwork(imds,layers,options)</span><br><span class="line">입력 데이터의 정규화를 초기화하는 중입니다.</span><br><span class="line">｜＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝｜</span><br><span class="line">｜　　Ｅｐｏｃｈ　　｜　　반복　횟수　　｜　　　　경과　시간　　　　　｜　　미니　배치　정확도　　｜　　미니　배치　손실　　｜　　기본　학습률　　｜</span><br><span class="line">｜　　　　　　　　　｜　　　　　　　　　｜　　（ｈｈ：ｍｍ：ｓｓ）　　｜　　　　　　　　　　　　　｜　　　　　　　　　　　　｜　　　　　　　　　　｜</span><br><span class="line">｜＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝｜</span><br><span class="line">｜　　　　　　　１　｜　　　　　　　１　｜　　　　　００：００：００　｜　　　　　　１０．９４％　｜　　　　　２．９６０９　｜　　　０．０１００　｜</span><br><span class="line">｜　　　　　　　１　｜　　　　　　５０　｜　　　　　００：００：０３　｜　　　　　　８１．２５％　｜　　　　　０．５８６６　｜　　　０．０１００　｜</span><br><span class="line">｜　　　　　　　２　｜　　　　　１００　｜　　　　　００：００：０５　｜　　　　　　９４．５３％　｜　　　　　０．１７１９　｜　　　０．０１００　｜</span><br><span class="line">｜　　　　　　　２　｜　　　　　１５０　｜　　　　　００：００：０７　｜　　　　　　９８．４４％　｜　　　　　０．１７８４　｜　　　０．０１００　｜</span><br><span class="line">｜　　　　　　　３　｜　　　　　２００　｜　　　　　００：００：１０　｜　　　　　１００．００％　｜　　　　　０．０６１５　｜　　　０．０１００　｜</span><br><span class="line">｜　　　　　　　４　｜　　　　　２５０　｜　　　　　００：００：１２　｜　　　　　　９８．４４％　｜　　　　　０．０７１３　｜　　　０．０１００　｜</span><br><span class="line">｜　　　　　　　４　｜　　　　　３００　｜　　　　　００：００：１４　｜　　　　　１００．００％　｜　　　　　０．０３２６　｜　　　０．０１００　｜</span><br><span class="line">｜　　　　　　　４　｜　　　　　３１２　｜　　　　　００：００：１５　｜　　　　　１００．００％　｜　　　　　０．０２９１　｜　　　０．０１００　｜</span><br><span class="line">｜＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝｜</span><br><span class="line"></span><br><span class="line">net = </span><br><span class="line"></span><br><span class="line">  SeriesNetwork - 속성 있음:</span><br><span class="line"></span><br><span class="line">         Layers: [<span class="number">15</span>×<span class="number">1</span> nnet.cnn.layer.Layer]</span><br><span class="line">     InputNames: &#123;<span class="string">&#x27;imageinput&#x27;</span>&#125;</span><br><span class="line">    OutputNames: &#123;<span class="string">&#x27;classoutput&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt; Out=classify(net,imds)</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/42334717/89501255-ff692500-d7fd-11ea-9cf5-9534f547e3c0.png" alt="trainNetwork"></p><figure class="highlight matlab"><figcaption><span>alex.m</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">camera=webcam;</span><br><span class="line">nnet=alexnet;</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">true</span></span><br><span class="line">    picture=camera.snapshot;</span><br><span class="line">    picture=imresize(picture,[<span class="number">227</span>,<span class="number">227</span>]);</span><br><span class="line">    label=classify(nnet,picture);</span><br><span class="line">    image(picture);</span><br><span class="line">    title(char(label));</span><br><span class="line">    drawnow;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/matlab/">Matlab</category>
      
      
      <category domain="https://zerohertz.github.io/tags/dnn/">DNN</category>
      
      <category domain="https://zerohertz.github.io/tags/matlab/">Matlab</category>
      
      
      <comments>https://zerohertz.github.io/matlab-12/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Development of a Obstructive Sleep Apnea Diagnosis Algorithm Using HRV</title>
      <link>https://zerohertz.github.io/development-of-a-obstructive-sleep-apnea-diagnosis-algorithm-using-hrv/</link>
      <guid>https://zerohertz.github.io/development-of-a-obstructive-sleep-apnea-diagnosis-algorithm-using-hrv/</guid>
      <pubDate>Tue, 14 Jul 2020 07:37:45 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Obstructive Sleep Apnea(폐쇄성 수면무호흡증)&lt;ul&gt;
&lt;li&gt;정의 : 수면 중 상기도가 좁아지거나 막혀 무호흡과 저호흡이 되풀이되는 질환&lt;/li&gt;
&lt;li&gt;위험성 : 혈중 산소포화도 감소 - 산소를 많이 필요로 하는 장기(뇌, 심장)에 영향&lt;ul&gt;
&lt;li&gt;증상 : 두통, 기억력 및 집중력 저하, …&lt;/li&gt;
&lt;li&gt;질환 : 수면질환(불면증), 고혈압, 심부정맥, 신부전 및 관상 동맥, …&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;유병률 : 국내 농촌인구의 3%, 미국 중년 남성의 4%, 여성의 2%&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;현재의 기술 - 야간 수면다원검사&lt;ul&gt;
&lt;li&gt;여러 가지 감지기 부착&lt;/li&gt;
&lt;li&gt;평소의 수면환경이 아닌 수면검사실에서 수면&lt;/li&gt;
&lt;li&gt;장시간 검사에 따른 높은 비용&lt;/li&gt;
&lt;li&gt;현실적 대안 : 간이형 수면다원기록기 or 활동 기록기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;손목부착형 활동기록기(액티그라피)&lt;ul&gt;
&lt;li&gt;손목 운동에 따른 가속을 감지해 몸의 활동량을 측정&lt;/li&gt;
&lt;li&gt;사용이 간편하며 피험자에게 익숙한 환경에서 장기간 검사 가능&lt;/li&gt;
&lt;li&gt;수면다원검사에 비해 경제적 이점&lt;/li&gt;
&lt;li&gt;미국수면학회 : 불면증과 일주기 수면-각성 장애에서 유용&lt;/li&gt;
&lt;li&gt;수면분절지수에 의해 민감도가 특이도가 낮음&lt;ul&gt;
&lt;li&gt;무호흡 및 저호흡과 관련된 움직임의 빈도만 반영&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;수면무호흡수치 반영&lt;ul&gt;
&lt;li&gt;폐쇄성 수면무호흡증 환자의 수면 시간을 짧게 평가하는 현상 개선&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;기술개발계획&lt;ul&gt;
&lt;li&gt;심박변이도 신호 분석을 통한 폐쇄성 수면무호흡증 진단 알고리즘 개발&lt;/li&gt;
&lt;li&gt;음성신호 분석을 위한 마이크 이용&lt;/li&gt;
&lt;li&gt;획득된 폐쇄성 수면무호흡수치를 바탕으로 수면/각성 주기 계산 알고리즘 개발&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><ul><li>Obstructive Sleep Apnea(폐쇄성 수면무호흡증)<ul><li>정의 : 수면 중 상기도가 좁아지거나 막혀 무호흡과 저호흡이 되풀이되는 질환</li><li>위험성 : 혈중 산소포화도 감소 - 산소를 많이 필요로 하는 장기(뇌, 심장)에 영향<ul><li>증상 : 두통, 기억력 및 집중력 저하, …</li><li>질환 : 수면질환(불면증), 고혈압, 심부정맥, 신부전 및 관상 동맥, …</li></ul></li><li>유병률 : 국내 농촌인구의 3%, 미국 중년 남성의 4%, 여성의 2%</li></ul></li><li>현재의 기술 - 야간 수면다원검사<ul><li>여러 가지 감지기 부착</li><li>평소의 수면환경이 아닌 수면검사실에서 수면</li><li>장시간 검사에 따른 높은 비용</li><li>현실적 대안 : 간이형 수면다원기록기 or 활동 기록기</li></ul></li><li>손목부착형 활동기록기(액티그라피)<ul><li>손목 운동에 따른 가속을 감지해 몸의 활동량을 측정</li><li>사용이 간편하며 피험자에게 익숙한 환경에서 장기간 검사 가능</li><li>수면다원검사에 비해 경제적 이점</li><li>미국수면학회 : 불면증과 일주기 수면-각성 장애에서 유용</li><li>수면분절지수에 의해 민감도가 특이도가 낮음<ul><li>무호흡 및 저호흡과 관련된 움직임의 빈도만 반영</li></ul></li><li>수면무호흡수치 반영<ul><li>폐쇄성 수면무호흡증 환자의 수면 시간을 짧게 평가하는 현상 개선</li></ul></li></ul></li><li>기술개발계획<ul><li>심박변이도 신호 분석을 통한 폐쇄성 수면무호흡증 진단 알고리즘 개발</li><li>음성신호 분석을 위한 마이크 이용</li><li>획득된 폐쇄성 수면무호흡수치를 바탕으로 수면/각성 주기 계산 알고리즘 개발</li></ul></li></ul><a id="more"></a><hr><h1 id="Condition-Indicator-HRV"><a href="#Condition-Indicator-HRV" class="headerlink" title="Condition Indicator(HRV)"></a>Condition Indicator(HRV)</h1><ul><li>비침습적인 심박변이도(Heart Rate Variability, HRV)<ul><li>심전도상의 R-R 간격 변화 측정<ul><li>R-R 간격 : 하나의 심장 주기와 다음 심장 주기 사이의 미세한 변이</li></ul></li><li>일반적으로 교감신경과 부교감신경의 영향을 받아 조절되는 것으로 알려짐</li><li>수면은 자율신경계에 영향을 주며, 이는 곧 HRV에 영향을 줌<ul><li>수면무호흡증과의 상관관계</li></ul></li><li>영향을 주는 인자 : 호흡, 혈합, 호르몬, 감정, …</li></ul></li></ul><h2 id="Time-domain-analysis"><a href="#Time-domain-analysis" class="headerlink" title="Time domain analysis"></a>Time domain analysis</h2><h2 id="Frequency-domain-analysis"><a href="#Frequency-domain-analysis" class="headerlink" title="Frequency domain analysis"></a>Frequency domain analysis</h2><hr><h1 id="Data-Result"><a href="#Data-Result" class="headerlink" title="Data Result"></a>Data Result</h1><h2 id="2020-07-22"><a href="#2020-07-22" class="headerlink" title="2020/07/22"></a>2020/07/22</h2><blockquote><p>특수문자 사용으로 인한 .csv 파일 저장 오류</p></blockquote><h2 id="2020-07-27"><a href="#2020-07-27" class="headerlink" title="2020/07/27"></a>2020/07/27</h2><blockquote><p>Acceleration</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/88665268-58a7c900-d119-11ea-9861-3e05d5f4c587.jpg" alt="Acc"></p><blockquote><p>Acoustic Emission</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/88665261-56de0580-d119-11ea-86b5-31a9b10bb816.jpg" alt="AE"></p><blockquote><p>Accerleration &amp; Acoustic Emission</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/88665402-868d0d80-d119-11ea-8e9f-98daa1f4f6a1.png" alt="Acc &amp; AE"></p><blockquote><p>Accerleration &amp; Acoustic Emission &amp; Scoring Data</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/90608792-110aed80-e23e-11ea-9887-a03d635c1e58.jpg" alt="20200813_무호흡_진단_알고리즘_발표_H_Oh-3"></p><p><img src="https://user-images.githubusercontent.com/42334717/90608764-051f2b80-e23e-11ea-9156-8175f6ebb90e.jpg" alt="20200813_무호흡_진단_알고리즘_발표_H_Oh-4"></p><hr><h1 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h1><ul><li>Sleep Fragmentation Index(SFI, 수면분절지수)<ul><li>수면 분절의 정도를 유추하는 계산식을 통해 산출</li><li>기존에는 폐쇄성 수면무호흡증을 78%의 민감도, 95%의 특이도로 진단</li><li>수면무호흡 및 저호흡과 관련된 신체 움직임의 빈도만 반영</li><li>관련이 없는 움직임도 포함시킴으로써 민감도와 특이도가 낮아짐</li></ul></li><li>Apnea-Hypopnea Index(AHI, 수면무호흡지수)<ul><li>수면 시, 호흡의 장애 심각도를 측정하는 지표</li><li>무호흡 및 저호흡의 지속 시간, 혈중 산소 포화도 감소, 뇌파의 변화, 신체적 각성 등을 고려</li></ul></li><li>Heart Rate Variability(HRV, 비침습적인 심박변이도)<ul><li>심전도상의 R-R 간격의 변화를 측정하여 얻음</li><li>일반적으로 교감신경과 부교감신경의 영향을 받아 조절되는 것으로 알려짐</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/research/">Research</category>
      
      <category domain="https://zerohertz.github.io/categories/research/journal/">Journal</category>
      
      
      <category domain="https://zerohertz.github.io/tags/machine-learning/">Machine Learning</category>
      
      <category domain="https://zerohertz.github.io/tags/signal-processing/">Signal Processing</category>
      
      <category domain="https://zerohertz.github.io/tags/phm/">PHM</category>
      
      <category domain="https://zerohertz.github.io/tags/smart-data/">Smart data</category>
      
      <category domain="https://zerohertz.github.io/tags/arduino/">Arduino</category>
      
      <category domain="https://zerohertz.github.io/tags/c-c/">C, C++</category>
      
      <category domain="https://zerohertz.github.io/tags/raspberrypi/">RaspberryPi</category>
      
      <category domain="https://zerohertz.github.io/tags/python/">Python</category>
      
      <category domain="https://zerohertz.github.io/tags/dnn/">DNN</category>
      
      <category domain="https://zerohertz.github.io/tags/statistics/">Statistics</category>
      
      <category domain="https://zerohertz.github.io/tags/matlab/">Matlab</category>
      
      <category domain="https://zerohertz.github.io/tags/sleep-apnea/">Sleep apnea</category>
      
      
      <comments>https://zerohertz.github.io/development-of-a-obstructive-sleep-apnea-diagnosis-algorithm-using-hrv/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Catia</title>
      <link>https://zerohertz.github.io/catia/</link>
      <guid>https://zerohertz.github.io/catia/</guid>
      <pubDate>Tue, 07 Jul 2020 05:26:44 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;시작&quot;&gt;&lt;a href=&quot;#시작&quot; class=&quot;headerlink&quot; title=&quot;시작&quot;&gt;&lt;/a&gt;시작&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Start&lt;/code&gt; - &lt;code&gt;Part Design&lt;/code&gt; - &lt;code&gt;Enable hybrid design&lt;/code&gt; 체크 박스 해제&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;확대&lt;ul&gt;
&lt;li&gt;가운데 누른 상태 - 왼쪽 클릭 - 위아래 이동&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;곡선의-정확도&quot;&gt;&lt;a href=&quot;#곡선의-정확도&quot; class=&quot;headerlink&quot; title=&quot;곡선의 정확도&quot;&gt;&lt;/a&gt;곡선의 정확도&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Tools&lt;/code&gt; - &lt;code&gt;Option&lt;/code&gt; - &lt;code&gt;Display&lt;/code&gt; - &lt;code&gt;Performance&lt;/code&gt; - &lt;code&gt;3D Accuracy&lt;/code&gt; - &lt;code&gt;0.01&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;축-설정&quot;&gt;&lt;a href=&quot;#축-설정&quot; class=&quot;headerlink&quot; title=&quot;축 설정&quot;&gt;&lt;/a&gt;축 설정&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Infrastructure&lt;/code&gt; - &lt;code&gt;Part Infrastructure&lt;/code&gt; - &lt;code&gt;Part Document&lt;/code&gt; - &lt;code&gt;Create an axis system&lt;/code&gt; 체크 - &lt;code&gt;Hybrid Design&lt;/code&gt; 체크 박스 해제&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="시작"><a href="#시작" class="headerlink" title="시작"></a>시작</h1><blockquote><p><code>Start</code> - <code>Part Design</code> - <code>Enable hybrid design</code> 체크 박스 해제</p></blockquote><ul><li>확대<ul><li>가운데 누른 상태 - 왼쪽 클릭 - 위아래 이동</li></ul></li></ul><h1 id="곡선의-정확도"><a href="#곡선의-정확도" class="headerlink" title="곡선의 정확도"></a>곡선의 정확도</h1><blockquote><p><code>Tools</code> - <code>Option</code> - <code>Display</code> - <code>Performance</code> - <code>3D Accuracy</code> - <code>0.01</code></p></blockquote><h1 id="축-설정"><a href="#축-설정" class="headerlink" title="축 설정"></a>축 설정</h1><blockquote><p><code>Infrastructure</code> - <code>Part Infrastructure</code> - <code>Part Document</code> - <code>Create an axis system</code> 체크 - <code>Hybrid Design</code> 체크 박스 해제</p></blockquote><a id="more"></a><h1 id="단축키"><a href="#단축키" class="headerlink" title="단축키"></a>단축키</h1><ul><li><code>Positioned Sketch</code>(Alt + s)<ul><li>일반 <code>Sketch</code>와 다르게 수평축(<code>H</code>), 수직축(<code>V</code>) 설정 가능</li><li><code>Swap</code>으로 <code>H</code>와 <code>V</code>를 바꾸기 가능</li></ul></li><li>구속<ul><li><code>Tools</code> - <code>Customize</code> - <code>Commands</code> - <code>All Commands</code> - <code>Constraint</code> - <code>Show properties...</code> - <code>Accelelator</code> - <code>space</code></li><li>구속 누르고 <code>Coincidence</code></li></ul></li><li>Exit workbench<ul><li><code>Tools</code> - <code>Customize</code> - <code>Commands</code> - <code>All Commands</code> - <code>Exit workbench</code> - <code>Show properties...</code> -<code>Accelelator</code> - <code>Alt + q</code></li></ul></li><li>Positioned Sketch<ul><li><code>Tools</code> - <code>Customize</code> - <code>Commands</code> - <code>All Commands</code> - <code>Positioned Sketch</code> - <code>Show properties...</code> -<code>Accelelator</code> - <code>Alt + s</code></li></ul></li></ul><h1 id="Pad"><a href="#Pad" class="headerlink" title="Pad"></a>Pad</h1><ul><li>높이 생성</li></ul><h1 id="Pocket"><a href="#Pocket" class="headerlink" title="Pocket"></a>Pocket</h1><ul><li>깊이 생성</li></ul><h1 id="Edge-Fillet"><a href="#Edge-Fillet" class="headerlink" title="Edge Fillet"></a>Edge Fillet</h1><ul><li>Fillet을 줄 모서리와 반경 선택</li></ul>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/mechanical-engineering/">Mechanical Engineering</category>
      
      
      <category domain="https://zerohertz.github.io/tags/mechanical-engineering/">Mechanical Engineering</category>
      
      
      <comments>https://zerohertz.github.io/catia/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Computer programming</title>
      <link>https://zerohertz.github.io/computer-programming/</link>
      <guid>https://zerohertz.github.io/computer-programming/</guid>
      <pubDate>Mon, 06 Jul 2020 01:10:44 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Day-1&quot;&gt;&lt;a href=&quot;#Day-1&quot; class=&quot;headerlink&quot; title=&quot;Day 1&quot;&gt;&lt;/a&gt;Day 1&lt;/h1&gt;&lt;h2 id=&quot;C와의-차이점&quot;&gt;&lt;a href=&quot;#C와의-차이점&quot; class=&quot;headerlink&quot; title=&quot;C와의 차이점&quot;&gt;&lt;/a&gt;C와의 차이점&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/code&gt; -&amp;gt; &lt;code&gt;#include &amp;lt;iostream&amp;gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;형식지정자 필요없어짐&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.h&lt;/code&gt; 사라짐&lt;ul&gt;
&lt;li&gt;호환은 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;의 개념&lt;ul&gt;
&lt;li&gt;object&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool&lt;/code&gt;의 개념&lt;ul&gt;
&lt;li&gt;C&lt;ul&gt;
&lt;li&gt;참 : 0 이외의 값&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C++&lt;ul&gt;
&lt;li&gt;true : 1&lt;/li&gt;
&lt;li&gt;false : 0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt;의 개념&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Practice&quot;&gt;&lt;a href=&quot;#Practice&quot; class=&quot;headerlink&quot; title=&quot;Practice&quot;&gt;&lt;/a&gt;Practice&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;practice.cpp&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot;1. a + b / 3 * 3 = &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; a + b / &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot;2. b &amp;lt;&amp;lt; 2 = &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; (b &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot;3. a != b = &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; (a != b) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot;4. b % a = &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; (b % a) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot;5. (a &amp;gt; b) ? a : b = &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; ((a &amp;gt; b) ? a : b) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot;6. sizeof(a) = &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(a) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    c = a++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot;7. C = a++ 이후 c의 값 : &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; c &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a += b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot;8. a += b 이후 a의 값 : &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot;9. a &amp;amp; b = &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; (a &amp;amp; b) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    c = (a + b, a - b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot;10. c = (a + b, a - b) 이후 c의 값 : &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; c &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Output&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt; a + b / &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2.&lt;/span&gt; b &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3.&lt;/span&gt; a != b = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;4.&lt;/span&gt; b % a = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;5.&lt;/span&gt; (a &amp;gt; b) ? a : b = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;6.&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(a) = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;7.&lt;/span&gt; C = a++ 이후 c의 값 : &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;8.&lt;/span&gt; a += b 이후 a의 값 : &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;9.&lt;/span&gt; a &amp;amp; b = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;10.&lt;/span&gt; c = (a + b, a - b) 이후 c의 값 : &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Process finished with &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt; code &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h1><h2 id="C와의-차이점"><a href="#C와의-차이점" class="headerlink" title="C와의 차이점"></a>C와의 차이점</h2><ul><li><code>#include &lt;stdio.h&gt;</code> -&gt; <code>#include &lt;iostream&gt;</code><ul><li>형식지정자 필요없어짐</li></ul></li><li><code>.h</code> 사라짐<ul><li>호환은 가능</li></ul></li><li><code>class</code>의 개념<ul><li>object</li></ul></li><li><code>bool</code>의 개념<ul><li>C<ul><li>참 : 0 이외의 값</li></ul></li><li>C++<ul><li>true : 1</li><li>false : 0</li></ul></li></ul></li><li><code>string</code>의 개념</li></ul><h2 id="Practice"><a href="#Practice" class="headerlink" title="Practice"></a>Practice</h2><blockquote><p>practice.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1. a + b / 3 * 3 = &quot;</span> &lt;&lt; a + b / <span class="number">3</span> * <span class="number">3</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2. b &lt;&lt; 2 = &quot;</span> &lt;&lt; (b &lt;&lt; <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;3. a != b = &quot;</span> &lt;&lt; (a != b) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;4. b % a = &quot;</span> &lt;&lt; (b % a) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;5. (a &gt; b) ? a : b = &quot;</span> &lt;&lt; ((a &gt; b) ? a : b) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;6. sizeof(a) = &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(a) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    c = a++;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;7. C = a++ 이후 c의 값 : &quot;</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    a += b;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;8. a += b 이후 a의 값 : &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;9. a &amp; b = &quot;</span> &lt;&lt; (a &amp; b) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    c = (a + b, a - b);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;10. c = (a + b, a - b) 이후 c의 값 : &quot;</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> a + b / <span class="number">3</span> * <span class="number">3</span> = <span class="number">14</span></span><br><span class="line"><span class="number">2.</span> b &lt;&lt; <span class="number">2</span> = <span class="number">40</span></span><br><span class="line"><span class="number">3.</span> a != b = <span class="number">1</span></span><br><span class="line"><span class="number">4.</span> b % a = <span class="number">0</span></span><br><span class="line"><span class="number">5.</span> (a &gt; b) ? a : b = <span class="number">10</span></span><br><span class="line"><span class="number">6.</span> <span class="keyword">sizeof</span>(a) = <span class="number">4</span></span><br><span class="line"><span class="number">7.</span> C = a++ 이후 c의 값 : <span class="number">5</span></span><br><span class="line"><span class="number">8.</span> a += b 이후 a의 값 : <span class="number">16</span></span><br><span class="line"><span class="number">9.</span> a &amp; b = <span class="number">0</span></span><br><span class="line"><span class="number">10.</span> c = (a + b, a - b) 이후 c의 값 : <span class="number">6</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="연산자"><a href="#연산자" class="headerlink" title="연산자"></a>연산자</h2><ul><li>산술 연산자<ul><li><code>*</code>, <code>/</code>, <code>%</code></li><li><code>+</code>, <code>-</code></li></ul></li><li>비트 이동 연산자<ul><li><code>&lt;&lt;</code>, <code>&gt;&gt;</code></li></ul></li><li>관계 연산자<ul><li><code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code></li><li><code>==</code>, <code>!=</code></li></ul></li><li>논리 연산자<ul><li><code>&amp;&amp;</code></li><li><code>||</code></li></ul></li></ul><h2 id="Plus"><a href="#Plus" class="headerlink" title="Plus"></a>Plus</h2><blockquote><p>plus.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">10</span>, y = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;x = &quot;</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;++x = &quot;</span> &lt;&lt; ++x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;x = &quot;</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;y = &quot;</span> &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;y++ = &quot;</span> &lt;&lt; y++ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;y = &quot;</span> &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line">++x = <span class="number">11</span></span><br><span class="line">x = <span class="number">11</span></span><br><span class="line">y = <span class="number">10</span></span><br><span class="line">y++ = <span class="number">10</span></span><br><span class="line">y = <span class="number">11</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h2><blockquote><p>switch.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;점수를 입력하세요 : &quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">    score = score / <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(score)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;A+ 입니다.&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;A 입니다.&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;B 입니다.&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;C 입니다.&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;F 입니다.&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Continue-amp-Break"><a href="#Continue-amp-Break" class="headerlink" title="Continue &amp; Break"></a>Continue &amp; Break</h2><blockquote><p>continue_break.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;정수 입력 : &quot;</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">        <span class="keyword">if</span>(a == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(a % <span class="number">3</span> != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h1><h2 id="Pointer"><a href="#Pointer" class="headerlink" title="Pointer"></a>Pointer</h2><blockquote><p>pointer1.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">int</span> *pa; <span class="comment">//Pointer 변수</span></span><br><span class="line">    <span class="keyword">int</span> *pb;</span><br><span class="line">    pa = &amp;a;</span><br><span class="line">    pb = &amp;b;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Pointer of a : &quot;</span> &lt;&lt; pa &lt;&lt; <span class="string">&quot; == &quot;</span> &lt;&lt; &amp;a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Pointer of b : &quot;</span> &lt;&lt; pb &lt;&lt; <span class="string">&quot; == &quot;</span> &lt;&lt; &amp;b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Pointer of a : <span class="number">0x7ffee6a4f958</span> == <span class="number">0x7ffee6a4f958</span></span><br><span class="line">Pointer of b : <span class="number">0x7ffee6a4f954</span> == <span class="number">0x7ffee6a4f954</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>pointer2.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> *pa; <span class="comment">//Pointer 변수</span></span><br><span class="line">    pa = &amp;a[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*(pa + 1) = &quot;</span> &lt;&lt; *(pa + <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a[1] = &quot;</span> &lt;&lt; a[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*(pa + <span class="number">1</span>) = <span class="number">2</span></span><br><span class="line">a[<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>포인터는 상수 - 변경 불가</li></ul><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><blockquote><p>function.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">adder</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; adder(<span class="number">13</span>, <span class="number">14</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">adder</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum;</span><br><span class="line">    sum = a + b;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">27</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>Call by Value<ul><li>값 복사 - 수정 불가</li><li>전역변수 - 누구든지 접근 가능</li></ul></li><li>Call by Address</li><li>Call by Reference</li></ul><blockquote><p>call_by_value.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a : &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;\tb : &quot;</span> &lt;&lt; b &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    swap(a, b);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a : &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;\tb : &quot;</span> &lt;&lt; b &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a : <span class="number">2</span>b : <span class="number">3</span></span><br><span class="line">a : <span class="number">2</span>b : <span class="number">3</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>call_by_address.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a : &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;\tb : &quot;</span> &lt;&lt; b &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    swap(&amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a : &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;\tb : &quot;</span> &lt;&lt; b &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = *x;</span><br><span class="line">    *x = *y;</span><br><span class="line">    *y = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>call_by_reference.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a : &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;\tb : &quot;</span> &lt;&lt; b &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    swap(a, b);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a : &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;\tb : &quot;</span> &lt;&lt; b &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a : <span class="number">2</span>b : <span class="number">3</span></span><br><span class="line">a : <span class="number">3</span>b : <span class="number">2</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li><code>swap(int, int)</code>는 기본 제공 함수</li></ul><h2 id="배열"><a href="#배열" class="headerlink" title="배열"></a>배열</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n[<span class="number">10</span>]; <span class="comment">// 정수 10개짜리 빈 메모리 공간</span></span><br><span class="line"><span class="keyword">double</span> d[] = [<span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.5</span>, <span class="number">3.9</span>]; <span class="comment">// d의 크기는 자동 4로 설정</span></span><br><span class="line">n[<span class="number">10</span>] = <span class="number">20</span>; <span class="comment">// 인덱스 0~9까지만</span></span><br><span class="line">n[<span class="number">-1</span>] = <span class="number">9.9</span>; <span class="comment">// 인덱스 음수 불가</span></span><br><span class="line"><span class="keyword">int</span> m[<span class="number">2</span>][<span class="number">5</span>]; <span class="comment">// 2행 5열의 2차원 배열 선언</span></span><br><span class="line"><span class="keyword">int</span> grade[<span class="number">2</span>][<span class="number">3</span>] = &#123;&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;, &#123;<span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><ul><li>배열은 0부터 시작</li><li>함수에 매개변수로 전달 시 배열의 크기도 함께 전달</li></ul><blockquote><p>two_dimension_array.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Ary[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i &gt;= j)&#123;</span><br><span class="line">                    Ary[i][j] = i + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    Ary[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; Ary[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">0</span> </span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> </span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Calling-a-Function-with-an-Array-as-a-Parameter"><a href="#Calling-a-Function-with-an-Array-as-a-Parameter" class="headerlink" title="Calling a Function with an Array as a Parameter"></a>Calling a Function with an Array as a Parameter</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addArray</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> size)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeDouble</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> size)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> size)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sum = addArray(n, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;배열 n의 합은 &quot;</span> &lt;&lt; sum &lt;&lt; <span class="string">&quot;입니다.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    makeDouble(n, <span class="number">5</span>);</span><br><span class="line">    printArray(n, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addArray</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> su = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">        su = su + a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> su;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeDouble</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">        a[i] = a[i] * a[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">배열 n의 합은 <span class="number">15</span>입니다.</span><br><span class="line"><span class="number">1</span><span class="number">4</span><span class="number">9</span><span class="number">16</span><span class="number">25</span></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>배열이 함수의 파라미터로 들어갈 경우<ul><li><code>int *a</code></li><li><code>int a[]</code></li></ul></li></ul><h2 id="Const-and-Pointer"><a href="#Const-and-Pointer" class="headerlink" title="Const and Pointer"></a>Const and Pointer</h2><blockquote><p>const_pointer.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> var1 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> var2 = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> *p1 = &amp;var1;</span><br><span class="line">    <span class="keyword">int</span> *<span class="keyword">const</span> p2 = &amp;var2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//*p1 = 10; 오류</span></span><br><span class="line">    var1 = <span class="number">10</span>;</span><br><span class="line">    *p2 = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; var1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; var2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li><code>const int *pNum</code> - 포인터 자체의 값이 상수</li><li><code>int *const pNum</code> - 포인터가 가리키는 값이 상수</li></ul><blockquote><p>example.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 4</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_arr</span><span class="params">(<span class="keyword">int</span> *arr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">percentage</span><span class="params">(<span class="keyword">int</span> *arr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count[N] = &#123;<span class="number">42</span>, <span class="number">37</span>, <span class="number">83</span>, <span class="number">33</span>&#125;;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;인원수 : &quot;</span>;</span><br><span class="line">    print_arr(count);</span><br><span class="line">    percentage(count);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\n백분율 : &quot;</span>;</span><br><span class="line">    print_arr(count);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_arr</span><span class="params">(<span class="keyword">int</span> *arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *(arr + i) &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">percentage</span><span class="params">(<span class="keyword">int</span> *arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">        sum = sum + *(arr + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">        *(arr + i) = *(arr + i) * <span class="number">100</span> / sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">인원수 : <span class="number">42</span><span class="number">37</span><span class="number">83</span><span class="number">33</span></span><br><span class="line">백분율 : <span class="number">21</span><span class="number">18</span><span class="number">42</span><span class="number">16</span></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><blockquote><p>getline.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">song</span><span class="params">(<span class="string">&quot;Falling in love with you&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">elvis</span><span class="params">(<span class="string">&quot;Elvis Presley&quot;</span>)</span></span>;</span><br><span class="line">    <span class="built_in">string</span> singer;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; song + <span class="string">&quot;를 부른 가수는&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;(힌트 : 첫글자는 &quot;</span> &lt;&lt; elvis[<span class="number">0</span>] &lt;&lt; <span class="string">&quot;)?&quot;</span>;</span><br><span class="line"></span><br><span class="line">    getline(<span class="built_in">cin</span>, singer);</span><br><span class="line">    <span class="keyword">if</span>(singer == elvis)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;맞았습니다.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;틀렸습니다. &quot;</span> + elvis + <span class="string">&quot;입니다.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Falling in love with you를 부른 가수는(힌트 : 첫글자는 E)?Elvis Presley</span><br><span class="line">맞았습니다.</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Falling in love with you를 부른 가수는(힌트 : 첫글자는 E)?asdf</span><br><span class="line">틀렸습니다. Elvis Presley입니다.</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li><code>char</code> - <code>&#39; &#39;</code></li><li><code>string</code> - <code>&quot; &quot;</code></li></ul><h2 id="Quiz"><a href="#Quiz" class="headerlink" title="Quiz"></a>Quiz</h2><blockquote><p>quiz1.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;문자열 입력&gt;&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    getline(<span class="built_in">cin</span>, str);</span><br><span class="line">    <span class="keyword">int</span> len = str.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; str[j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">문자열 입력&gt;&gt;Morning</span><br><span class="line">M</span><br><span class="line">Mo</span><br><span class="line">Mor</span><br><span class="line">Morn</span><br><span class="line">Morni</span><br><span class="line">Mornin</span><br><span class="line">Morning</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>quiz2.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">biggest</span><span class="params">(<span class="keyword">double</span> x[], <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> big = x[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x[i] &gt; big)</span><br><span class="line">            big = x[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> big;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> a[<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;5개의 실수를 입력하라&gt;&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;제일 큰 수 = &quot;</span> &lt;&lt; biggest(a, <span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>개의 실수를 입력하라&gt;&gt;<span class="number">20.0</span></span><br><span class="line"><span class="number">3.44</span></span><br><span class="line"><span class="number">44.66</span></span><br><span class="line"><span class="number">22.0</span></span><br><span class="line"><span class="number">40.0</span></span><br><span class="line">제일 큰 수 = <span class="number">44.66</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><hr><h1 id="Day-3"><a href="#Day-3" class="headerlink" title="Day 3"></a>Day 3</h1><h2 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> name&#123; <span class="comment">// name이라는 이름 공간 생성</span></span><br><span class="line">    <span class="comment">// 이곳에 선언된 모든 이름은 name 이름 공간에 생성된 이름</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">name::function()</span><br></pre></td></tr></table></figure><ul><li>이름(Identifier) 충돌이 발생하는 경우<ul><li>여러 명이 서로 나누어 프로젝트를 개발하는 경우</li><li>오픈 소스 혹은 다른 사람이 작성한 소스나 목적 파일을 가져와서 컴파일하거나 링크하는 경우</li></ul></li><li><code>namespace</code><ul><li>이름 충돌 해결</li><li>개발자가 자신만의 이름 공간을 생성할 수 있도록 함</li></ul></li><li><code>std</code><ul><li>ANSI C++ 표준에서 정의한 이름 공간(<code>namespace</code>) 중 하나</li><li><code>&lt;iostream&gt;</code></li></ul></li></ul><blockquote><p>namespace.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Graphic&#123;</span><br><span class="line">    <span class="keyword">int</span> maximum = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Math&#123;</span><br><span class="line">    <span class="keyword">int</span> maximum = <span class="number">65536</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> a + b;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> a - b;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Radius Maximum = &quot;</span> &lt;&lt; Graphic::maximum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Integer Maximum = &quot;</span> &lt;&lt; Math::maximum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Integer Add = &quot;</span> &lt;&lt; Math::add(<span class="number">2</span>,<span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Integer Sub = &quot;</span> &lt;&lt; Math::sub(<span class="number">2</span>,<span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Radius Maximum = <span class="number">100</span></span><br><span class="line">Integer Maximum = <span class="number">65536</span></span><br><span class="line">Integer Add = <span class="number">6</span></span><br><span class="line">Integer Sub = <span class="number">-2</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="String-1"><a href="#String-1" class="headerlink" title="String"></a>String</h2><ul><li><code>cin.getline(char buf[], int size, char delimitChar)</code><ul><li>공백이 낀 문자열을 입력 받는 방법</li><li><code>buf</code>에 최대 <code>size-1</code>개의 문자 입력(끝에 <code>\0</code> 붙임)</li><li><code>delimitChar</code>를 만나면 입력 중단(끝에 <code>\0</code> 붙임)<ul><li>Default : <code>\n</code>(Enter)</li></ul></li></ul></li><li><code>string</code> 클래스<ul><li>문자열의 크기에 따른 제약 없음<ul><li>스스로 문자열의 버퍼 조정</li></ul></li><li>문자열 복사, 비교, 수정 등을 위한 다양한 함수와 연산자 제공</li><li>객체 지향적</li><li><code>&lt;string&gt;</code> 헤더 파일에 선선</li></ul></li></ul><blockquote><p>cin_getline.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;주소 입력 : &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> address[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">cin</span>.getline(address, <span class="number">100</span>, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;주소는 &quot;</span> &lt;&lt; address &lt;&lt; <span class="string">&quot;입니다.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">주소 입력 : ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇ</span><br><span class="line">주소는 ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ입니다.</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>string_getline.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;주소 입력 : &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> address;</span><br><span class="line">    getline(<span class="built_in">cin</span>, address);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;주소는 &quot;</span> &lt;&lt; address &lt;&lt; <span class="string">&quot;입니다.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">주소 입력 : asdfasdfasdfasdfasdfasdfasdfa</span><br><span class="line">주소는 asdfasdfasdfasdfasdfasdfasdfa입니다.</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>search.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;문자들을 입력하라 : &quot;</span>;</span><br><span class="line">    getline(<span class="built_in">cin</span>, str);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i] == <span class="string">&#x27;o&#x27;</span>)&#123;</span><br><span class="line">            count += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(str[i] == <span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;o&#x27;</span> &lt;&lt; <span class="string">&quot;의 개수는 &quot;</span> &lt;&lt; count &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">문자들을 입력하라 : Hello, World!</span><br><span class="line">o의 개수는 <span class="number">2</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Class-amp-Object"><a href="#Class-amp-Object" class="headerlink" title="Class &amp; Object"></a>Class &amp; Object</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Name::function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>class</code><ul><li>상태 정보(속성) : 멤버 변수</li><li>Action : 멤버 함수</li><li>객체를 만들어내기 위해 정의된 설계도, 틀</li><li>클래스는 객체가 아니며 실체도 아님</li></ul></li><li>Object<ul><li>객체는 생성될 때 클래스의 모양을 그대로 가지고 탄생</li><li>멤버 변수와 멤버 함수로 구성</li><li>메모리에 생성, 실체(Instance)로도 불림</li></ul></li><li>Why <code>class</code>?<ul><li>Encapsulation<ul><li><code>public</code><ul><li>외부에서 접근 가능</li></ul></li><li><code>protectected</code></li><li><code>private</code><ul><li>외부에서 접근 불가</li><li>Default</li></ul></li><li>캡슐화</li><li>클래스로 묶어둠</li></ul></li><li>Inheritance</li><li>Polymorphism</li></ul></li></ul><blockquote><p>circle.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> radius;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Circle::getArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3.14</span>*radius*radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Circle donut;</span><br><span class="line">    donut.radius = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">double</span> area = donut.getArea();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;donut 면적은 &quot;</span> &lt;&lt; area &lt;&lt; <span class="string">&quot;입니다.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    Circle pizza;</span><br><span class="line">    pizza.radius = <span class="number">30</span>;</span><br><span class="line">    area = pizza.getArea();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;pizza 면적은 &quot;</span> &lt;&lt; area &lt;&lt; <span class="string">&quot;입니다.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">donut 면적은 <span class="number">3.14</span>입니다.</span><br><span class="line">pizza 면적은 <span class="number">2826</span>입니다.</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>rectangle.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> width;</span><br><span class="line">    <span class="keyword">int</span> height;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> width*height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Rectangle rect;</span><br><span class="line">    rect.width = <span class="number">3</span>;</span><br><span class="line">    rect.height = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;사각형의 면적은 &quot;</span> &lt;&lt; rect.getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">사각형의 면적은 <span class="number">15</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h2><ul><li>생성자<ul><li>객체가 생성되는 시점에서 자동으로 호출되는 멤버 함수</li><li>생성자는 클래스의 이름과 같음</li><li><code>public</code>으로 선언</li></ul></li><li>종류<ul><li>기본 생성자<ul><li>매개변수 없음</li><li>생성자가 없으면 컴파일러가 자동으로 만들어줌</li></ul></li><li>사용자 정의 생성자<ul><li>매개변수 존재</li><li>객체 생성 및 멤버 변수 초기값 정의</li><li>기본 생성자 자동 생성 X</li></ul></li></ul></li></ul><blockquote><p>constructor.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> radius;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Circle();</span><br><span class="line">    Circle(<span class="keyword">int</span> r);</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Circle donut;</span><br><span class="line">    <span class="keyword">double</span> area = donut.getArea();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;donut 면적은 &quot;</span> &lt;&lt; area &lt;&lt; <span class="string">&quot;입니다.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Circle <span class="title">pizza</span><span class="params">(<span class="number">30</span>)</span></span>;</span><br><span class="line">    area = pizza.getArea();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;pizza 면적은 &quot;</span> &lt;&lt; area &lt;&lt; <span class="string">&quot;입니다.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Circle::getArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3.14</span>*radius*radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Circle::Circle()&#123;</span><br><span class="line">    radius = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Circle::Circle(<span class="keyword">int</span> r)&#123;</span><br><span class="line">    radius = r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">donut 면적은 <span class="number">3.14</span>입니다.</span><br><span class="line">pizza 면적은 <span class="number">2826</span>입니다.</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Quiz-1"><a href="#Quiz-1" class="headerlink" title="Quiz"></a>Quiz</h2><blockquote><p>quiz2.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tower</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> height;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Tower();</span><br><span class="line">    Tower(<span class="keyword">int</span> h);</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getHeight</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Tower myTower;</span><br><span class="line">    <span class="function">Tower <span class="title">seoulTower</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;높이는 &quot;</span> &lt;&lt; myTower.getHeight() &lt;&lt; <span class="string">&quot;미터&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;높이는 &quot;</span> &lt;&lt; seoulTower.getHeight() &lt;&lt; <span class="string">&quot;미터&quot;</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Tower::Tower()&#123;</span><br><span class="line">    height = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">Tower::Tower(<span class="keyword">int</span> h)&#123;</span><br><span class="line">    height = h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Tower::getHeight</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> height;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">높이는 <span class="number">1</span>미터</span><br><span class="line">높이는 <span class="number">100</span>미터</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><hr><h1 id="Day-4"><a href="#Day-4" class="headerlink" title="Day 4"></a>Day 4</h1><h2 id="Class-Practice"><a href="#Class-Practice" class="headerlink" title="Class Practice"></a>Class Practice</h2><blockquote><p>integer.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Integer</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> val1;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Integer(<span class="keyword">int</span> val);</span><br><span class="line">    Integer(<span class="built_in">string</span> val);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> val)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isEven</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Integer <span class="title">n</span><span class="params">(<span class="number">30</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; n.get() &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    n.<span class="built_in">set</span>(<span class="number">50</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; n.get() &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="function">Integer <span class="title">m</span><span class="params">(<span class="string">&quot;300&quot;</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; m.get() &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; m.isEven();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Integer::Integer(<span class="keyword">int</span> val)&#123;</span><br><span class="line">    val1 = val;</span><br><span class="line">&#125;</span><br><span class="line">Integer::Integer(<span class="built_in">string</span> val)&#123;</span><br><span class="line">    val1 = stoi(val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Integer::set</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    val1 = val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Integer::get</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Integer::isEven</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(val1%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">30</span> <span class="number">50</span> <span class="number">300</span> <span class="number">1</span></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Destructor"><a href="#Destructor" class="headerlink" title="Destructor"></a>Destructor</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">name</span>&#123;</span></span><br><span class="line">    ~name();</span><br><span class="line">&#125;</span><br><span class="line">name::~name()&#123;&#125;;</span><br></pre></td></tr></table></figure><ul><li>객체가 소멸되는 시점에서 자동으로 호출되는 함수</li><li>소멸자의 목적<ul><li>객체가 사라질 때 마무리 작업을 위함</li><li>실행 도중 동적으로 할당 받은 메모리 해제, 파일 저장 및 닫기, 네트워크 닫기 등</li></ul></li><li>소멸자는 <code>return</code> 불가</li><li>객체는 생성의 반대순으로 소멸</li><li>동적 메모리 할당 사용 시 소멸자 이용</li></ul><blockquote><p>destructor.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Circle();</span><br><span class="line">    Circle(<span class="keyword">int</span> r);</span><br><span class="line">    <span class="keyword">int</span> radius;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>;</span><br><span class="line">    ~Circle();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Circle donut;</span><br><span class="line">    <span class="keyword">double</span> area = donut.getArea();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;donut 면적은 &quot;</span> &lt;&lt; area &lt;&lt; <span class="string">&quot;입니다.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    donut.~Circle();</span><br><span class="line"></span><br><span class="line">    <span class="function">Circle <span class="title">pizza</span><span class="params">(<span class="number">30</span>)</span></span>;</span><br><span class="line">    area = pizza.getArea();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;pizza 면적은 &quot;</span> &lt;&lt; area &lt;&lt; <span class="string">&quot;입니다.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    pizza.~Circle();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Circle::Circle()&#123;</span><br><span class="line">    radius = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;반지름 &quot;</span> &lt;&lt; radius &lt;&lt; <span class="string">&quot; 원 생성&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Circle::Circle(<span class="keyword">int</span> r)&#123;</span><br><span class="line">    radius = r;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;반지름 &quot;</span> &lt;&lt; radius &lt;&lt; <span class="string">&quot; 원 생성&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Circle::getArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3.14</span>*radius*radius;</span><br><span class="line">&#125;</span><br><span class="line">Circle::~Circle()&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;반지름 &quot;</span> &lt;&lt; radius &lt;&lt; <span class="string">&quot; 원 소멸&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">반지름 <span class="number">1</span> 원 생성</span><br><span class="line">donut 면적은 <span class="number">3.14</span>입니다.</span><br><span class="line">반지름 <span class="number">1</span> 원 소멸</span><br><span class="line">반지름 <span class="number">30</span> 원 생성</span><br><span class="line">pizza 면적은 <span class="number">2826</span>입니다.</span><br><span class="line">반지름 <span class="number">30</span> 원 소멸</span><br><span class="line">반지름 <span class="number">30</span> 원 소멸</span><br><span class="line">반지름 <span class="number">1</span> 원 소멸</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="접근-지정자"><a href="#접근-지정자" class="headerlink" title="접근 지정자"></a>접근 지정자</h2><ul><li>캡슐화의 목적<ul><li>객체 보호, 보안</li><li>C++에서 객체의 캡슐화 전략<ul><li>객체의 상태를 나타내는 데이터 멤버(멤버 변수)에 대한 보호</li><li>중요한 멤버는 다른 클래스나 객체에서 접근할 수 없도록 보호</li><li>외부와으이 인터페이스를 위해서 일부 멤버는 외부에 접근 허용</li></ul></li></ul></li><li>멤버에 대한 3가지 접근 지정자<ul><li><code>private</code><ul><li>동일한 클래스의 멤버 함수에만 제한함</li></ul></li><li><code>public</code><ul><li>모든 다른 클래스에 허용, 외부함수(<code>main()</code>)도 허용</li></ul></li><li><code>protected</code><ul><li>클래스 자신과 상속받은 자식 클래스에만 허용</li></ul></li></ul></li></ul><h2 id="Inline"><a href="#Inline" class="headerlink" title="Inline"></a>Inline</h2><ul><li>짧은 함수의 다수 호출로 인해 오버헤드가 일어남</li><li>이를 <code>inline</code>을 통해 해결</li><li>장점 : 시간 단축</li><li>단점 : 코드가 길어짐</li><li>클래스의 선언부에 구현된 멤버 함수는 자동 <code>inline</code> 함수</li></ul><h2 id="Program"><a href="#Program" class="headerlink" title="Program"></a>Program</h2><ul><li>바람직한 프로그램<ul><li><code>main.cpp</code></li><li><code>class.h</code> : 클래스 선언부 - 헤더 파일(<code>.h</code>)에 저장</li><li><code>class.cpp</code> : 클래스 구현부 - <code>.cpp</code> 파일에 저장</li></ul></li><li>클래스를 헤더 파일과 <code>.cpp</code> 파일로 분리하여 작성</li><li>목적 : 클래스 재사용</li></ul><blockquote><p>main.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Box.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Box <span class="title">b</span><span class="params">(<span class="number">10</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    b.draw();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    b.setSize(<span class="number">7</span>, <span class="number">4</span>);</span><br><span class="line">    b.setFill(<span class="string">&#x27;%&#x27;</span>);</span><br><span class="line">    b.draw();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Box.h</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> UNTITLED_BOX_H <span class="comment">// 조건 컴파일 역할, n은 not, 정의되어있지 않으면 정의, 정의되어있으면 실행 X</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UNTITLED_BOX_H <span class="comment">// 중복 include 실행방지</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> width, height;</span><br><span class="line">    <span class="keyword">char</span> fill;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Box(<span class="keyword">int</span> w, <span class="keyword">int</span> h);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setFill</span><span class="params">(<span class="keyword">char</span> f)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setSize</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// UNTITLED_BOX_H</span></span></span><br></pre></td></tr></table></figure><blockquote><p>Box.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Box.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">Box::Box(<span class="keyword">int</span> w, <span class="keyword">int</span> h)&#123;</span><br><span class="line">    setSize(w, h);</span><br><span class="line">    fill = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Box::setFill</span><span class="params">(<span class="keyword">char</span> f)</span></span>&#123;</span><br><span class="line">    fill = f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Box::setSize</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h)</span></span>&#123;</span><br><span class="line">    width = w;</span><br><span class="line">    height = h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Box::draw</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; height; n++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; width; m++)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; fill;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">**********</span><br><span class="line">**********</span><br><span class="line"></span><br><span class="line">%%%%%%%</span><br><span class="line">%%%%%%%</span><br><span class="line">%%%%%%%</span><br><span class="line">%%%%%%%</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rand</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">srand</span><span class="params">((<span class="keyword">unsigned</span> <span class="keyword">int</span>) time(<span class="literal">NULL</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">srand((<span class="keyword">unsigned</span>) time(<span class="number">0</span>)); <span class="comment">// Seed 값 설정, 현재시간 이용 초기화</span></span><br><span class="line">rand() % (End - Begin + <span class="number">1</span>) + Begin; <span class="comment">// int 스케일링</span></span><br><span class="line">rand() % (End - Begin) / RAND_MAX + Begin; <span class="comment">// float 스케일링</span></span><br></pre></td></tr></table></figure><ul><li><code>rand()</code> = $[0, 2^{15}-1]$</li></ul><blockquote><p>random.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EvenRandom</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    EvenRandom();</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">nextinRange</span><span class="params">(<span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    EvenRandom r;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;-- 0에서 &quot;</span> &lt;&lt; RAND_MAX &lt;&lt; <span class="string">&quot;까지의 랜덤 짝수 정수 10개 : &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> n = r.next();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">&quot;-- 2에서 10까지의 랜덤 짝수 정수 10개 : &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> n = r.nextinRange(<span class="number">2</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EvenRandom::EvenRandom()&#123;</span><br><span class="line">    srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>) time(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EvenRandom::next</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ran = rand();</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ran % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ran;</span><br><span class="line">        &#125;</span><br><span class="line">        ran = rand();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EvenRandom::nextinRange</span><span class="params">(<span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ran = rand() % (high - low + <span class="number">1</span>) + low;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ran % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ran;</span><br><span class="line">        &#125;</span><br><span class="line">        ran = rand() % (high - low + <span class="number">1</span>) + low;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- <span class="number">0</span>에서 <span class="number">2147483647</span>까지의 랜덤 짝수 정수 <span class="number">10</span>개 : </span><br><span class="line"><span class="number">754544228</span><span class="number">1733691306</span><span class="number">1091657446</span><span class="number">454057686</span><span class="number">268781690</span><span class="number">2138855454</span><span class="number">962661234</span><span class="number">305563340</span><span class="number">433726818</span><span class="number">1087132208</span></span><br><span class="line"></span><br><span class="line">-- <span class="number">2</span>에서 <span class="number">10</span>까지의 랜덤 짝수 정수 <span class="number">10</span>개 : </span><br><span class="line"><span class="number">10</span><span class="number">10</span><span class="number">6</span><span class="number">2</span><span class="number">2</span><span class="number">4</span><span class="number">6</span><span class="number">4</span><span class="number">2</span><span class="number">4</span></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><hr><h1 id="Day-5"><a href="#Day-5" class="headerlink" title="Day 5"></a>Day 5</h1><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><blockquote><p>oval.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Oval</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> width, height;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Oval();</span><br><span class="line">    Oval(<span class="keyword">int</span> w, <span class="keyword">int</span> h);</span><br><span class="line">    ~Oval();</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getHeight</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Oval a, b(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    a.<span class="built_in">set</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    a.show();</span><br><span class="line">    b.show();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Oval::Oval()&#123;</span><br><span class="line">    width = <span class="number">1</span>;</span><br><span class="line">    height = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Oval::Oval(<span class="keyword">int</span> w,<span class="keyword">int</span> h)&#123;</span><br><span class="line">    width = w;</span><br><span class="line">    height = h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Oval::~Oval()&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Oval 소멸 &quot;</span>;</span><br><span class="line">    show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Oval::getArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3.14</span>*width*height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Oval::getWidth</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> width;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Oval::getHeight</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Oval::set</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h)</span></span>&#123;</span><br><span class="line">    width = w;</span><br><span class="line">    height = h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Oval::show</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;width = &quot;</span> &lt;&lt; width &lt;&lt; <span class="string">&quot;, height = &quot;</span> &lt;&lt; height &lt;&lt; <span class="string">&quot;, Area = &quot;</span> &lt;&lt; getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">width = <span class="number">10</span>, height = <span class="number">20</span>, Area = <span class="number">628</span></span><br><span class="line">width = <span class="number">3</span>, height = <span class="number">4</span>, Area = <span class="number">37.68</span></span><br><span class="line">Oval 소멸 width = <span class="number">3</span>, height = <span class="number">4</span>, Area = <span class="number">37.68</span></span><br><span class="line">Oval 소멸 width = <span class="number">10</span>, height = <span class="number">20</span>, Area = <span class="number">628</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Object-Pointer"><a href="#Object-Pointer" class="headerlink" title="Object Pointer"></a>Object Pointer</h2><ul><li>객체에 대한 포인터<ul><li>객체의 주소 값을 가지는 변수</li></ul></li><li>포인터로 멤버를 접근할 때<ul><li><code>객체포인터-&gt;멤버</code></li></ul></li></ul><blockquote><p>circle1.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> radius;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Circle()&#123;radius = <span class="number">1</span>;&#125;</span><br><span class="line">    Circle(<span class="keyword">int</span> r)&#123;radius = r;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Circle donut;</span><br><span class="line">    <span class="keyword">double</span> d = donut.getArea();</span><br><span class="line"></span><br><span class="line">    Circle *p;</span><br><span class="line">    p = &amp;donut;</span><br><span class="line">    <span class="keyword">double</span> b = p-&gt;getArea();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; d &lt;&lt; <span class="string">&quot;==&quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Circle::getArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> radius*radius*<span class="number">3.14</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.14</span>==<span class="number">3.14</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>circle2.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> radius;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Circle()&#123;radius = <span class="number">1</span>;&#125;</span><br><span class="line">    Circle(<span class="keyword">int</span> r)&#123;radius = r;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Circle donut;</span><br><span class="line">    <span class="function">Circle <span class="title">pizza</span><span class="params">(<span class="number">30</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; donut.getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    Circle *p;</span><br><span class="line">    p = &amp;donut;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; p-&gt;getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (*p).getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    p = &amp; pizza;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; p-&gt;getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (*p).getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Circle::getArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> radius*radius*<span class="number">3.14</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.14</span></span><br><span class="line"><span class="number">3.14</span></span><br><span class="line"><span class="number">3.14</span></span><br><span class="line"><span class="number">2826</span></span><br><span class="line"><span class="number">2826</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Object-Array"><a href="#Object-Array" class="headerlink" title="Object Array"></a>Object Array</h2><ul><li>객체 배열 선언 가능<ul><li>기본 타이 배열 선언과 형식 동일<ul><li><code>Circle c[3];</code></li></ul></li></ul></li><li>객체 배열 선언<ul><li>객체 배열을 위한 공간 할당</li><li>배열의 각 원소 객체마다 생성자 실행<ul><li>매개변수 없는 생성자 호출</li><li>매개변수 있는 생성자를 한번에는 호출할 수 없음</li></ul></li><li><code>Circle c[3] = &#123;Circle(10), Circle(20), Circle()&#125;;</code></li></ul></li><li>배열 소멸<ul><li>배열의 각 객체마다 소멸자 호출</li><li>생성의 반대순으로 소멸</li></ul></li></ul><blockquote><p>circle1.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> radius;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Circle()&#123;radius = <span class="number">1</span>;&#125;</span><br><span class="line">    Circle(<span class="keyword">int</span> r)&#123;radius = r;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setRadius</span><span class="params">(<span class="keyword">int</span> r)</span></span>&#123;radius = r;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Circle circleArray[<span class="number">3</span>];</span><br><span class="line">    circleArray[<span class="number">0</span>].setRadius(<span class="number">10</span>);</span><br><span class="line">    circleArray[<span class="number">1</span>].setRadius(<span class="number">20</span>);</span><br><span class="line">    circleArray[<span class="number">2</span>].setRadius(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Circle &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;의 면적은 &quot;</span> &lt;&lt; circleArray[i].getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Circle *p;</span><br><span class="line">    p = circleArray;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Circle &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;의 면적은 &quot;</span> &lt;&lt; p-&gt;getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Circle::getArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> radius*radius*<span class="number">3.14</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Circle <span class="number">0</span>의 면적은 <span class="number">314</span></span><br><span class="line">Circle <span class="number">1</span>의 면적은 <span class="number">1256</span></span><br><span class="line">Circle <span class="number">2</span>의 면적은 <span class="number">2826</span></span><br><span class="line">Circle <span class="number">0</span>의 면적은 <span class="number">314</span></span><br><span class="line">Circle <span class="number">1</span>의 면적은 <span class="number">1256</span></span><br><span class="line">Circle <span class="number">2</span>의 면적은 <span class="number">2826</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>circle2.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> radius;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Circle()&#123;radius = <span class="number">1</span>;&#125;</span><br><span class="line">    Circle(<span class="keyword">int</span> r)&#123;radius = r;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setRadius</span><span class="params">(<span class="keyword">int</span> r)</span></span>&#123;radius = r;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">3.14</span>*radius*radius;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Circle c[<span class="number">3</span>] = &#123;Circle(<span class="number">10</span>), Circle(<span class="number">20</span>), Circle()&#125;;</span><br><span class="line">    Circle *p = c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;c[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;]의 면적은 &quot;</span> &lt;&lt; c[i].getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;(c+&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;)의 면적은 &quot;</span> &lt;&lt; (c+i)-&gt;getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*(c+&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;)의 면적은 &quot;</span> &lt;&lt; (*(c+i)).getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;]의 면적은 &quot;</span> &lt;&lt; p[i].getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;(p+&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;)의 면적은 &quot;</span> &lt;&lt; (p+i)-&gt;getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*(p+&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;)의 면적은 &quot;</span> &lt;&lt; (*(p+i)).getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p-&gt;&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;의 면적은 &quot;</span> &lt;&lt; p-&gt;getArea() &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">c[<span class="number">0</span>]의 면적은 <span class="number">314</span></span><br><span class="line">c[<span class="number">1</span>]의 면적은 <span class="number">1256</span></span><br><span class="line">c[<span class="number">2</span>]의 면적은 <span class="number">3.14</span></span><br><span class="line">(c+<span class="number">0</span>)의 면적은 <span class="number">314</span></span><br><span class="line">(c+<span class="number">1</span>)의 면적은 <span class="number">1256</span></span><br><span class="line">(c+<span class="number">2</span>)의 면적은 <span class="number">3.14</span></span><br><span class="line">*(c+<span class="number">0</span>)의 면적은 <span class="number">314</span></span><br><span class="line">*(c+<span class="number">1</span>)의 면적은 <span class="number">1256</span></span><br><span class="line">*(c+<span class="number">2</span>)의 면적은 <span class="number">3.14</span></span><br><span class="line">p[<span class="number">0</span>]의 면적은 <span class="number">314</span></span><br><span class="line">p[<span class="number">1</span>]의 면적은 <span class="number">1256</span></span><br><span class="line">p[<span class="number">2</span>]의 면적은 <span class="number">3.14</span></span><br><span class="line">(p+<span class="number">0</span>)의 면적은 <span class="number">314</span></span><br><span class="line">(p+<span class="number">1</span>)의 면적은 <span class="number">1256</span></span><br><span class="line">(p+<span class="number">2</span>)의 면적은 <span class="number">3.14</span></span><br><span class="line">*(p+<span class="number">0</span>)의 면적은 <span class="number">314</span></span><br><span class="line">*(p+<span class="number">1</span>)의 면적은 <span class="number">1256</span></span><br><span class="line">*(p+<span class="number">2</span>)의 면적은 <span class="number">3.14</span></span><br><span class="line">p-&gt;<span class="number">0</span>의 면적은 <span class="number">314</span></span><br><span class="line">p-&gt;<span class="number">1</span>의 면적은 <span class="number">1256</span></span><br><span class="line">p-&gt;<span class="number">2</span>의 면적은 <span class="number">3.14</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Dynamic-Memory"><a href="#Dynamic-Memory" class="headerlink" title="Dynamic Memory"></a>Dynamic Memory</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">데이터타입 *포인터변수 = <span class="keyword">new</span> 데이터타입;</span><br><span class="line">데이터타입 *포인터변수 = <span class="keyword">new</span> 데이터타입(초기값); <span class="comment">// 배열의 초기화는 for문</span></span><br><span class="line"><span class="keyword">delete</span> 포인터변수;</span><br><span class="line"></span><br><span class="line">데이터타입 *포인터변수 = <span class="keyword">new</span> 데이터타입[배열의크기]; <span class="comment">// 배열의 동적 할당</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; 배열의크기; i++)&#123;</span><br><span class="line">    포인터변수[i] = 값;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> [] 포인터변수;</span><br><span class="line"></span><br><span class="line">클래스이름 *포인터변수 = <span class="keyword">new</span> 클래스이름; <span class="comment">// 객체의 동적 할당</span></span><br><span class="line">클래스이름 *포인터변수 = <span class="keyword">new</span> 클래스이름(생성자매개변수리스트);</span><br><span class="line"><span class="keyword">delete</span> 포인터변수;</span><br></pre></td></tr></table></figure><ul><li>정적 할당<ul><li>변수 선언을 통해 필요한 메모리 할당</li><li>많은 양의 메모리는 배열 선언을 통해 할당</li></ul></li><li>동적 할당<ul><li>필요한 양이 예측되지 않는 경우, 프로그램 작성 시 할당 받을 수 없음</li><li>실행 중에 운영체제로부터 할당 받음<ul><li>힙(<code>heap</code>)으로부터 할당</li><li>힙은 운영체제가 소유하고 관리하는 메모리, 모든 프로세스가 공유할 수 있는 메모리</li></ul></li></ul></li><li><code>C</code>의 동적 메모리 할당<ul><li><code>malloc()</code></li><li><code>free()</code></li></ul></li><li><code>C++</code>의 동적 메모리 할당, 반환<ul><li><code>new</code> 연산자<ul><li>기본 타입 메모리 할당, 배열 할당, 객체 할당, 객체 배열 할당</li><li>객체의 동적 생성 - 힙 메모리로부터 객체를 위한 메모리 할당 요청</li><li>객체 할당 시 생성자 호출</li></ul></li><li><code>delete</code><ul><li><code>new</code>로 할당 받은 메모리 반환</li><li>객체의 동적 소멸 - 소멸자 호출 뒤 객체를 힙에 반환</li></ul></li></ul></li></ul><table><thead><tr><th align="center">Data Type</th><th align="center">정적 할당</th><th align="center">동적 할당</th></tr></thead><tbody><tr><td align="center">Integer</td><td align="center"><code>int a = val; int *pa = &amp;a;</code></td><td align="center"><code>int *p = new int(val);</code></td></tr><tr><td align="center">Array</td><td align="center"><code>int arr[num];</code></td><td align="center"><code>int *parr = new int[100];</code></td></tr><tr><td align="center">Object</td><td align="center"><code>Class instance(val); Class *pc = &amp;instance;</code></td><td align="center"><code>Class *pc = new Class;</code></td></tr></tbody></table><blockquote><p>circle.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> radius;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Circle()&#123;radius = <span class="number">1</span>; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;생성자 실행&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">    Circle(<span class="keyword">int</span> r)&#123;radius = r; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;생성자 실행&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">    ~Circle()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;소멸자 실행&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">3.14</span>*radius*radius;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> radius;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;정수 반지름 입력(음수이면 종료 &gt;&gt; &quot;</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; radius;</span><br><span class="line">        <span class="keyword">if</span>(radius &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        Circle *p = <span class="keyword">new</span> Circle(radius);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;원의 면적은 &quot;</span> &lt;&lt; p-&gt;getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">정수 반지름 입력(음수이면 종료 &gt;&gt; <span class="number">5</span></span><br><span class="line">생성자 실행</span><br><span class="line">원의 면적은 <span class="number">78.5</span></span><br><span class="line">소멸자 실행</span><br><span class="line">정수 반지름 입력(음수이면 종료 &gt;&gt; <span class="number">9</span></span><br><span class="line">생성자 실행</span><br><span class="line">원의 면적은 <span class="number">254.34</span></span><br><span class="line">소멸자 실행</span><br><span class="line">정수 반지름 입력(음수이면 종료 &gt;&gt; <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="This-Pointer"><a href="#This-Pointer" class="headerlink" title="This Pointer"></a>This Pointer</h2><ul><li>현재의 실행중인 객체를 가리키는 <code>pointer</code> 변수</li><li>포인터, 객체 자신 포인터</li><li>클래스의 멤버 함수 내에서만 사용</li><li>개발자가 선언하는 변수가 아닌 컴파일러가 선언한 변수</li><li>용도<ul><li>매개변수 이름 == 멤버 변수 이름</li><li>매개변수가 자신의 객체주소를 <code>return</code></li></ul></li><li>사용범위<ul><li>멤버 함수</li></ul></li></ul><h2 id="Quiz-2"><a href="#Quiz-2" class="headerlink" title="Quiz"></a>Quiz</h2><blockquote><p>quiz1.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sample</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> *p;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Sample(<span class="keyword">int</span> n)&#123;</span><br><span class="line">        size = n; p = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">big</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> size;&#125;</span><br><span class="line">    ~Sample()&#123;<span class="keyword">delete</span> [] p;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Sample <span class="title">s</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    s.read();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;동적배열 정수 &quot;</span> &lt;&lt; s.getSize() &lt;&lt; <span class="string">&quot;개를 출력합니다. &quot;</span>;</span><br><span class="line">    s.write();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;가장 큰 수는 &quot;</span> &lt;&lt; s.big() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sample::read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;입력하려는 정수의 개수는? &quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; size;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; size &lt;&lt; <span class="string">&quot;개의 정수를 입력하시오. &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sample::write</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; p[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sample::big</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> b = p[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">        b = (b &lt; p[i]) ? p[i] : b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">입력하려는 정수의 개수는? <span class="number">5</span></span><br><span class="line"><span class="number">5</span>개의 정수를 입력하시오. <span class="number">11</span> <span class="number">22</span> <span class="number">44</span> <span class="number">55</span> <span class="number">23</span></span><br><span class="line">동적배열 정수 <span class="number">5</span>개를 출력합니다. <span class="number">11</span> <span class="number">22</span> <span class="number">44</span> <span class="number">55</span> <span class="number">23</span> </span><br><span class="line">가장 큰 수는 <span class="number">55</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>quiz2.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> radius;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Circle()&#123;radius = <span class="number">1</span>;&#125;</span><br><span class="line">    Circle(<span class="keyword">int</span> r)&#123;radius = <span class="number">1</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setRadius</span><span class="params">(<span class="keyword">int</span> r)</span></span>&#123;radius = r;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getRadius</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> radius;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">3.14</span> * radius * radius;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sample</span>&#123;</span></span><br><span class="line">    Circle *p;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Sample(<span class="keyword">int</span> n)&#123;</span><br><span class="line">        size = n; p = <span class="keyword">new</span> Circle[n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Circle <span class="title">big</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> size;&#125;</span><br><span class="line">    ~Sample()&#123;<span class="keyword">delete</span> [] p;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Sample <span class="title">s</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    s.read();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;각 원 객체의 반지름 &quot;</span> &lt;&lt; s.getSize() &lt;&lt; <span class="string">&quot;개를 출력합니다. &quot;</span>;</span><br><span class="line">    s.write();</span><br><span class="line">    Circle big = s.big();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;가장 큰 원의 넓이 : &quot;</span> &lt;&lt; big.getArea() &lt;&lt; <span class="string">&quot;\t 가장 큰 원의 반지름 : &quot;</span> &lt;&lt; big.getRadius() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sample::read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;입력하려는 원의 개수는? &quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; size;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; size &lt;&lt; <span class="string">&quot;개의 원의 반지름을 입력하시오. &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">        p[i].setRadius(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sample::write</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; p[i].getRadius() &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Circle <span class="title">Sample::big</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Circle b = p[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">        b.setRadius((b.getRadius() &lt; p[i].getRadius()) ? p[i].getRadius() : b.getRadius());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">입력하려는 원의 개수는? <span class="number">3</span></span><br><span class="line"><span class="number">3</span>개의 원의 반지름을 입력하시오. <span class="number">3</span> <span class="number">16</span> <span class="number">2</span></span><br><span class="line">각 원 객체의 반지름 <span class="number">3</span>개를 출력합니다. <span class="number">3</span> <span class="number">16</span> <span class="number">2</span> </span><br><span class="line">가장 큰 원의 넓이 : <span class="number">803.84</span> 가장 큰 원의 반지름 : <span class="number">16</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><hr><h1 id="Day-6"><a href="#Day-6" class="headerlink" title="Day 6"></a>Day 6</h1><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><ul><li>문자열 생성<ul><li><code>string str0(&quot;name&quot;);</code></li><li><code>string str1 = &quot;name&quot;;</code></li><li><code>string str2(str);</code> - 복사생성자</li><li>주의 : 문자열 끝에 <code>&#39;\0(NULL)</code>가 없음</li></ul></li><li>문자열 연산자<ul><li>산술 연산자<ul><li><code>+=</code>, <code>+</code></li></ul></li><li>관계 연산자<ul><li><code>&gt;=</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>!=</code>, <code>==</code></li><li>비교는 사전식</li></ul></li><li>배열처럼 사용 가능</li></ul></li><li>문자열 변환 함수<ul><li>문자열 -&gt; 숫자<ul><li><code>stoi();</code></li><li><code>stof();</code></li><li><code>stod();</code></li></ul></li><li>숫자 -&gt; 문자열<ul><li><code>to_string();</code></li></ul></li><li>문자열 -&gt; C언어 문자열(<code>\0</code>)<ul><li><code>str.c_str();</code></li></ul></li></ul></li><li>문자열 크기 함수<ul><li><code>str.size();</code></li><li><code>str.length();</code></li><li><code>str.capacity();</code> - 시스템이 정해줌</li></ul></li><li>문자열 조작 함수<ul><li><code>str.append(string);</code><ul><li>문자열 뒤에 파라미터의 문자열 추가</li></ul></li><li><code>str.substr(시작 index, 크기);</code><ul><li>시작부터 크기만큼 추출</li></ul></li><li><code>str.replace(index, length, string);</code><ul><li><code>index</code>에서 <code>length</code>만큼 <code>string</code>으로 대체</li></ul></li><li><code>str.find(string, index);</code><ul><li><code>index</code>부터 <code>string</code>이 시작하는 위치 <code>int</code>값으로 <code>return</code></li></ul></li><li><code>str.resize(unsigned, char);</code><ul><li>숫자만큼의 크기로 바꾸며 남는다면 <code>char</code>으로 채움</li></ul></li></ul></li></ul><blockquote><p>string1.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">address</span><span class="params">(<span class="string">&quot;서울시 서울시 서울시&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">copyAddress</span><span class="params">(address)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> text[] = &#123;<span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">title</span><span class="params">(text)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; address &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; copyAddress &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; title &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">서울시 서울시 서울시</span><br><span class="line">서울시 서울시 서울시</span><br><span class="line">LOVE C++</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><blockquote><p>string2.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;문자열을 입력하세요 : &quot;</span>;</span><br><span class="line"></span><br><span class="line">    getline(<span class="built_in">cin</span>, str, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">int</span> len = str.length();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="built_in">string</span> first = str.substr(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">string</span> sub = str.substr(<span class="number">1</span>, len<span class="number">-1</span>);</span><br><span class="line">        str = sub + first;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; str &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">문자열을 입력하세요 : asdfasdfasdfasdf</span><br><span class="line">sdfasdfasdfasdfa</span><br><span class="line">dfasdfasdfasdfas</span><br><span class="line">fasdfasdfasdfasd</span><br><span class="line">asdfasdfasdfasdf</span><br><span class="line">sdfasdfasdfasdfa</span><br><span class="line">dfasdfasdfasdfas</span><br><span class="line">fasdfasdfasdfasd</span><br><span class="line">asdfasdfasdfasdf</span><br><span class="line">sdfasdfasdfasdfa</span><br><span class="line">dfasdfasdfasdfas</span><br><span class="line">fasdfasdfasdfasd</span><br><span class="line">asdfasdfasdfasdf</span><br><span class="line">sdfasdfasdfasdfa</span><br><span class="line">dfasdfasdfasdfas</span><br><span class="line">fasdfasdfasdfasd</span><br><span class="line">asdfasdfasdfasdf</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>string3.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> year;</span><br><span class="line">    <span class="built_in">string</span> month;</span><br><span class="line">    <span class="built_in">string</span> day;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Date(<span class="keyword">int</span> y, <span class="keyword">int</span> m, <span class="keyword">int</span> d)&#123;year = to_string(y); month = to_string(m); day = to_string(d);&#125;</span><br><span class="line">    Date(<span class="built_in">string</span> when);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">getYear</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> year;&#125;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">getMonth</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> month;&#125;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">getDay</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> day;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Date <span class="title">birth</span><span class="params">(<span class="number">2014</span>, <span class="number">3</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="function">Date <span class="title">independenceDay</span><span class="params">(<span class="string">&quot;1945/8/15&quot;</span>)</span></span>;</span><br><span class="line">    independenceDay.show();</span><br><span class="line">    birth.show();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; birth.getYear() &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; birth.getMonth() &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; birth.getDay() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Date::Date(<span class="built_in">string</span> when)&#123;</span><br><span class="line">    <span class="keyword">int</span> where1;</span><br><span class="line">    <span class="keyword">int</span> where2;</span><br><span class="line">    where1 = when.find(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    year = when.substr(<span class="number">0</span>, where1);</span><br><span class="line">    where2 = when.find(<span class="string">&#x27;/&#x27;</span>, where1 + <span class="number">1</span>);</span><br><span class="line">    month = when.substr(where1 + <span class="number">1</span>, where2 - where1 - <span class="number">1</span>);</span><br><span class="line">    day = when.substr(where2 + <span class="number">1</span>, when.size());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Date::show</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; year &lt;&lt; <span class="string">&quot;년&quot;</span> &lt;&lt; month &lt;&lt; <span class="string">&quot;월&quot;</span> &lt;&lt; day &lt;&lt; <span class="string">&quot;일&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1945</span>년<span class="number">8</span>월<span class="number">15</span>일</span><br><span class="line"><span class="number">2014</span>년<span class="number">3</span>월<span class="number">20</span>일</span><br><span class="line"><span class="number">2014</span>,<span class="number">3</span>,<span class="number">20</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Call-by-Reference"><a href="#Call-by-Reference" class="headerlink" title="Call by Reference"></a>Call by Reference</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;refn = n;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">c</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> &amp;<span class="title">refc</span> = <span class="title">c</span>;</span></span><br></pre></td></tr></table></figure><ul><li>참조 변수<ul><li>참조자 <code>&amp;</code>의 도입</li><li>이미 존재하는 변수에 대한 다른 이름(별명)을 선언<ul><li>참조 변수는 이름만 존재</li><li>참조 변수에 새로운 공간 할당 X</li><li>초기화로 지정된 기존 변수 공유</li></ul></li></ul></li></ul><blockquote><p>reference1.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;i&#x27;</span> &lt;&lt; <span class="string">&#x27;\t&#x27;</span> &lt;&lt; <span class="string">&#x27;n&#x27;</span> &lt;&lt; <span class="string">&#x27;\t&#x27;</span> &lt;&lt; <span class="string">&quot;refn&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> &amp;refn = n;</span><br><span class="line">    n = <span class="number">4</span>;</span><br><span class="line">    refn++;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">&#x27;\t&#x27;</span> &lt;&lt; n &lt;&lt; <span class="string">&#x27;\t&#x27;</span> &lt;&lt; refn &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    refn = i;</span><br><span class="line">    refn++;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">&#x27;\t&#x27;</span> &lt;&lt; n &lt;&lt; <span class="string">&#x27;\t&#x27;</span> &lt;&lt; refn &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> *p = &amp;refn;</span><br><span class="line">    *p = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">&#x27;\t&#x27;</span> &lt;&lt; n &lt;&lt; <span class="string">&#x27;\t&#x27;</span> &lt;&lt; refn &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">inrefn</span><br><span class="line"><span class="number">1</span><span class="number">5</span><span class="number">5</span></span><br><span class="line"><span class="number">1</span><span class="number">2</span><span class="number">2</span></span><br><span class="line"><span class="number">1</span><span class="number">20</span><span class="number">20</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>reference2.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> radius;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Circle()&#123;radius = <span class="number">1</span>;&#125;</span><br><span class="line">    Circle(<span class="keyword">int</span> radius)&#123;<span class="keyword">this</span>-&gt;radius = radius;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setRadius</span><span class="params">(<span class="keyword">int</span> radius)</span></span>&#123;<span class="keyword">this</span>-&gt;radius = radius;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">3.14</span>*radius*radius;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readRadius</span><span class="params">(Circle &amp;c)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Circle donut;</span><br><span class="line">    readRadius(donut);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;donut의 면적 = &quot;</span> &lt;&lt; donut.getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readRadius</span><span class="params">(Circle &amp;c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;정수 값으로 반지름을 입력하세요 &gt;&gt; &quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; r;</span><br><span class="line">    c.setRadius(r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">정수 값으로 반지름을 입력하세요 &gt;&gt; <span class="number">3</span></span><br><span class="line">donut의 면적 = <span class="number">28.26</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>reference3.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyintStack</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> p[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> tos;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MyintStack();</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">(<span class="keyword">int</span> &amp;refn)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MyintStack a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.push(i))</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;번째 stack full&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.pop(n))</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;번째 stack empty&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyintStack::MyintStack()&#123;</span><br><span class="line">    tos = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">MyintStack::push</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tos == <span class="number">10</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    p[tos] = n;</span><br><span class="line">    tos++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">MyintStack::pop</span><span class="params">(<span class="keyword">int</span> &amp;refn)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tos == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    tos--;</span><br><span class="line">    refn = p[tos];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span><span class="number">1</span><span class="number">2</span><span class="number">3</span><span class="number">4</span><span class="number">5</span><span class="number">6</span><span class="number">7</span><span class="number">8</span><span class="number">9</span></span><br><span class="line"><span class="number">11</span>번째 <span class="built_in">stack</span> full</span><br><span class="line"><span class="number">9</span><span class="number">8</span><span class="number">7</span><span class="number">6</span><span class="number">5</span><span class="number">4</span><span class="number">3</span><span class="number">2</span><span class="number">1</span><span class="number">0</span></span><br><span class="line"><span class="number">11</span>번째 <span class="built_in">stack</span> empty</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Quiz-3"><a href="#Quiz-3" class="headerlink" title="Quiz"></a>Quiz</h2><blockquote><p>quiz.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Player(<span class="built_in">string</span> name = <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="built_in">string</span> name)</span></span>&#123;<span class="keyword">this</span>-&gt;name = name;&#125;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> name;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getEnterKey</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line">        <span class="built_in">cin</span>.getline(buf, <span class="number">99</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GamblingGame</span>&#123;</span></span><br><span class="line">    Player p[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">3</span>];</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">matchAll</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    GamblingGame();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    GamblingGame game;</span><br><span class="line">    game.run();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GamblingGame::GamblingGame()&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;***** 갬블링 게임을 시작합니다. *****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>) time(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        num[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;첫번째 선수 이름&gt;&gt;&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line">    p[<span class="number">0</span>].setName(name);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;두번째 선수 이름&gt;&gt;&quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line">    p[<span class="number">1</span>].setName(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GamblingGame::run</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> n;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; p[i % <span class="number">2</span>].getName() &lt;&lt; <span class="string">&quot; : &lt;Enter&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        p[i % <span class="number">2</span>].getEnterKey();</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;matchAll())&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; p[i % <span class="number">2</span>].getName() &lt;&lt; <span class="string">&quot;님 승리!!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;아쉽군요!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GamblingGame::matchAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> n = rand() % <span class="number">3</span>;</span><br><span class="line">        num[i] = n;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; num[i] &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (num[<span class="number">0</span>] == num[<span class="number">1</span>] &amp;&amp; num[<span class="number">0</span>] == num[<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">***** 갬블링 게임을 시작합니다. *****</span><br><span class="line">첫번째 선수 이름&gt;&gt;Kim</span><br><span class="line">두번째 선수 이름&gt;&gt;Park</span><br><span class="line">Kim : &lt;Enter&gt;</span><br><span class="line"><span class="number">0</span><span class="number">1</span><span class="number">1</span>아쉽군요!</span><br><span class="line">Park : &lt;Enter&gt;</span><br><span class="line"><span class="number">2</span><span class="number">0</span><span class="number">2</span>아쉽군요!</span><br><span class="line">Kim : &lt;Enter&gt;</span><br><span class="line"><span class="number">1</span><span class="number">2</span><span class="number">1</span>아쉽군요!</span><br><span class="line">Park : &lt;Enter&gt;</span><br><span class="line"><span class="number">1</span><span class="number">1</span><span class="number">1</span>Park님 승리!!</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><hr><h1 id="Day-7"><a href="#Day-7" class="headerlink" title="Day 7"></a>Day 7</h1><h2 id="Dynamic-Memory-1"><a href="#Dynamic-Memory-1" class="headerlink" title="Dynamic Memory"></a>Dynamic Memory</h2><blockquote><p>stack.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyintStack</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> *parr;</span><br><span class="line">    <span class="keyword">int</span> tos;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MyintStack(<span class="keyword">int</span> size);</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">(<span class="keyword">int</span> &amp;refn)</span></span>;</span><br><span class="line">    ~MyintStack()&#123;<span class="keyword">delete</span> [] parr;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">MyintStack <span class="title">a</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.push(i))</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;번째 stack full&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.pop(n))</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;번째 stack empty&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyintStack::MyintStack(<span class="keyword">int</span> size)&#123;</span><br><span class="line">    tos = <span class="number">0</span>;</span><br><span class="line">    parr = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">MyintStack::push</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tos == <span class="number">10</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    parr[tos] = n;</span><br><span class="line">    tos++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">MyintStack::pop</span><span class="params">(<span class="keyword">int</span> &amp;refn)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tos == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    tos--;</span><br><span class="line">    refn = parr[tos];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span><span class="number">1</span><span class="number">2</span><span class="number">3</span><span class="number">4</span><span class="number">5</span><span class="number">6</span><span class="number">7</span><span class="number">8</span><span class="number">9</span></span><br><span class="line"><span class="number">11</span>번째 <span class="built_in">stack</span> full</span><br><span class="line"><span class="number">9</span><span class="number">8</span><span class="number">7</span><span class="number">6</span><span class="number">5</span><span class="number">4</span><span class="number">3</span><span class="number">2</span><span class="number">1</span><span class="number">0</span></span><br><span class="line"><span class="number">11</span>번째 <span class="built_in">stack</span> empty</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Return-Reference"><a href="#Return-Reference" class="headerlink" title="Return Reference"></a>Return Reference</h2><blockquote><p>return_ref1.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> &amp;<span class="title">find</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a = find();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> &amp;ref = find();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ref &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    find() = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; find() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>return_ref2.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> &amp;<span class="title">find</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> name[] = <span class="string">&quot;Zerohertz&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    find(name, <span class="number">0</span>) = <span class="string">&#x27;5&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> &amp;ref = find(name, <span class="number">2</span>);</span><br><span class="line">    ref = <span class="string">&#x27;t&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Zerohertz</span><br><span class="line"><span class="number">5</span>erohertz</span><br><span class="line"><span class="number">5</span>etohertz</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>reference.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addConst</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    x = x + <span class="number">200</span>;</span><br><span class="line">    y = y + <span class="number">200</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;addConst&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&amp;x = &quot;</span> &lt;&lt; &amp;x &lt;&lt; <span class="string">&quot;\tx = &quot;</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&amp;y = &quot;</span> &lt;&lt; &amp;y &lt;&lt; <span class="string">&quot;\ty = &quot;</span> &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">100</span>;</span><br><span class="line">    addConst(a, b);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Main&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&amp;a = &quot;</span> &lt;&lt; &amp;a &lt;&lt; <span class="string">&quot;\ta = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&amp;b = &quot;</span> &lt;&lt; &amp;b &lt;&lt; <span class="string">&quot;\tb = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">addConst</span><br><span class="line">&amp;x = <span class="number">0x7ffee84d09a8</span>x = <span class="number">300</span></span><br><span class="line">&amp;y = <span class="number">0x7ffee84d0964</span>y = <span class="number">300</span></span><br><span class="line">Main</span><br><span class="line">&amp;a = <span class="number">0x7ffee84d09a8</span>a = <span class="number">300</span></span><br><span class="line">&amp;b = <span class="number">0x7ffee84d09a4</span>b = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>return_ref3.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> &amp;<span class="title">addConst</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    x = x + <span class="number">200</span>;</span><br><span class="line">    y = y + <span class="number">200</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;addConst&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&amp;x = &quot;</span> &lt;&lt; &amp;x &lt;&lt; <span class="string">&quot;\tx = &quot;</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&amp;y = &quot;</span> &lt;&lt; &amp;y &lt;&lt; <span class="string">&quot;\ty = &quot;</span> &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">100</span>;</span><br><span class="line">    addConst(a, b) = <span class="number">555</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Main&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&amp;a = &quot;</span> &lt;&lt; &amp;a &lt;&lt; <span class="string">&quot;\ta = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&amp;b = &quot;</span> &lt;&lt; &amp;b &lt;&lt; <span class="string">&quot;\tb = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">addConst</span><br><span class="line">&amp;x = <span class="number">0x7ffee834b9a8</span>x = <span class="number">300</span></span><br><span class="line">&amp;y = <span class="number">0x7ffee834b964</span>y = <span class="number">300</span></span><br><span class="line">Main</span><br><span class="line">&amp;a = <span class="number">0x7ffee834b9a8</span>a = <span class="number">555</span></span><br><span class="line">&amp;b = <span class="number">0x7ffee834b9a4</span>b = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Shallow-Copy-amp-Deep-Copy"><a href="#Shallow-Copy-amp-Deep-Copy" class="headerlink" title="Shallow Copy &amp; Deep Copy"></a>Shallow Copy &amp; Deep Copy</h2><ul><li>Shallow copy<ul><li>객체 복사 시, 객체의 멤버를 1:1로 복사</li><li>객체의 멤버 변수에 동적 메모리가 할당된 경우<ul><li>사본은 원본 객체가 할당 받은 메모리를 공유하는 문제 발생</li></ul></li></ul></li><li>Deep copy<ul><li>객체 복사 시, 객체의 멤버를 1:1로 복사</li><li>객체의 멤버 변수에 동적 메모리가 할당된 경우<ul><li>사본은 원본이 가진 메모리 크기만큼 별도로 동적 할당</li><li>원본의 동적 메모리에 있는 내용을 사본에 복사</li></ul></li><li>완전한 형태의 복사<ul><li>사본과 원본은 메모리를 공유하는데 문제 없음</li></ul></li></ul></li></ul><blockquote><p>shallow1_copy.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *a = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">int</span> *b = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a의 주소(복사전) : &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;b의 주소(복사전) : &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    a = b;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a의 주소(복사후) : &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;b의 주소(복사후) : &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a의 값 : &quot;</span> &lt;&lt; *a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;b의 값 : &quot;</span> &lt;&lt; *b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> a;</span><br><span class="line">    <span class="keyword">delete</span> b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">untitled(<span class="number">997</span>,<span class="number">0x11451edc0</span>) <span class="built_in">malloc</span>: *** error <span class="keyword">for</span> object <span class="number">0x7fefdc405980</span>: pointer being freed was <span class="keyword">not</span> allocated</span><br><span class="line">untitled(<span class="number">997</span>,<span class="number">0x11451edc0</span>) <span class="built_in">malloc</span>: *** <span class="built_in">set</span> a breakpoint in malloc_error_break to debug</span><br><span class="line">a의 주소(복사전) : <span class="number">0x7fefdc405970</span></span><br><span class="line">b의 주소(복사전) : <span class="number">0x7fefdc405980</span></span><br><span class="line">a의 주소(복사후) : <span class="number">0x7fefdc405980</span></span><br><span class="line">b의 주소(복사후) : <span class="number">0x7fefdc405980</span></span><br><span class="line">a의 값 : <span class="number">5</span></span><br><span class="line">b의 값 : <span class="number">5</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">6</span></span><br></pre></td></tr></table></figure><blockquote><p>shallow2_copy.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> *name;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person(Person &amp;p)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = p.name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;id = p.id;</span><br><span class="line">    &#125;</span><br><span class="line">    Person(<span class="keyword">int</span> id, <span class="keyword">const</span> <span class="keyword">char</span> *name);</span><br><span class="line">    ~Person();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">changeName</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span> &lt;&lt; id &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">zerohertz</span><span class="params">(<span class="number">1</span>, <span class="string">&quot;zerohertz&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">zhz</span><span class="params">(zerohertz)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;***** zhz 객체 생성 후 *****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    zerohertz.show();</span><br><span class="line">    zhz.show();</span><br><span class="line"></span><br><span class="line">    zhz.changeName(<span class="string">&quot;0Hz&quot;</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;***** zhz 이름 변경 후 *****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    zerohertz.show();</span><br><span class="line">    zhz.show();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// zhz, zerohertz 순으로 소멸, zerohertz 소멸 시 오류</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person::Person(<span class="keyword">int</span> id, <span class="keyword">const</span> <span class="keyword">char</span> *name)&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;id = id;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(name);</span><br><span class="line">    <span class="keyword">this</span>-&gt;name = <span class="keyword">new</span> <span class="keyword">char</span>[len + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;name, name);</span><br><span class="line">&#125;</span><br><span class="line">Person::~Person()&#123;</span><br><span class="line">    <span class="keyword">delete</span> [] name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Person::changeName</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strlen</span>(name) &gt; <span class="built_in">strlen</span>(<span class="keyword">this</span>-&gt;name))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;name, name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">untitled(<span class="number">1347</span>,<span class="number">0x11c7dddc0</span>) <span class="built_in">malloc</span>: *** error <span class="keyword">for</span> object <span class="number">0x7f9184c05970</span>: pointer being freed was <span class="keyword">not</span> allocated</span><br><span class="line">untitled(<span class="number">1347</span>,<span class="number">0x11c7dddc0</span>) <span class="built_in">malloc</span>: *** <span class="built_in">set</span> a breakpoint in malloc_error_break to debug</span><br><span class="line">***** zhz 객체 생성 후 *****</span><br><span class="line"><span class="number">1</span>,zerohertz</span><br><span class="line"><span class="number">1</span>,zerohertz</span><br><span class="line">***** zhz 이름 변경 후 *****</span><br><span class="line"><span class="number">1</span>,<span class="number">0</span>Hz</span><br><span class="line"><span class="number">1</span>,<span class="number">0</span>Hz</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">6</span></span><br></pre></td></tr></table></figure><h2 id="Copy-Constructor"><a href="#Copy-Constructor" class="headerlink" title="Copy Constructor"></a>Copy Constructor</h2><blockquote><p>copy_constructor1.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> *name;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person(Person &amp;p);</span><br><span class="line">    Person(<span class="keyword">int</span> id, <span class="keyword">const</span> <span class="keyword">char</span> *name);</span><br><span class="line">    ~Person();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">changeName</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span> &lt;&lt; id &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">zerohertz</span><span class="params">(<span class="number">1</span>, <span class="string">&quot;zerohertz&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">zhz</span><span class="params">(zerohertz)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;***** zhz 객체 생성 후 *****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    zerohertz.show();</span><br><span class="line">    zhz.show();</span><br><span class="line"></span><br><span class="line">    zhz.changeName(<span class="string">&quot;0Hz&quot;</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;***** zhz 이름 변경 후 *****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    zerohertz.show();</span><br><span class="line">    zhz.show();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person::Person(Person &amp;p)&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;id = p.id;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(p.name);</span><br><span class="line">    <span class="keyword">this</span>-&gt;name = <span class="keyword">new</span> <span class="keyword">char</span>[len + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;name, p.name);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;복사 생성자 실행, 원본 객체의 이름 : &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Person::Person(<span class="keyword">int</span> id, <span class="keyword">const</span> <span class="keyword">char</span> *name)&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;id = id;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(name);</span><br><span class="line">    <span class="keyword">this</span>-&gt;name = <span class="keyword">new</span> <span class="keyword">char</span>[len + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;name, name);</span><br><span class="line">&#125;</span><br><span class="line">Person::~Person()&#123;</span><br><span class="line">    <span class="keyword">delete</span> [] name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Person::changeName</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strlen</span>(name) &gt; <span class="built_in">strlen</span>(<span class="keyword">this</span>-&gt;name))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;name, name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">복사 생성자 실행, 원본 객체의 이름 : zerohertz</span><br><span class="line">***** zhz 객체 생성 후 *****</span><br><span class="line"><span class="number">1</span>,zerohertz</span><br><span class="line"><span class="number">1</span>,zerohertz</span><br><span class="line">***** zhz 이름 변경 후 *****</span><br><span class="line"><span class="number">1</span>,zerohertz</span><br><span class="line"><span class="number">1</span>,<span class="number">0</span>Hz</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>copy_constructor2.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyString</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> *pBuf;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MyString(<span class="keyword">const</span> <span class="keyword">char</span> *s = <span class="literal">NULL</span>);</span><br><span class="line">    MyString(MyString &amp;MyStr);</span><br><span class="line">    ~MyString();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MyString str1;</span><br><span class="line">    <span class="function">MyString <span class="title">str2</span><span class="params">(<span class="string">&quot;Hello&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">MyString <span class="title">str3</span><span class="params">(<span class="string">&quot;World!&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">MyString <span class="title">str4</span><span class="params">(str3)</span></span>;</span><br><span class="line">    str1.print();</span><br><span class="line">    str2.print();</span><br><span class="line">    str3.print();</span><br><span class="line">    str4.print();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyString::MyString(<span class="keyword">const</span> <span class="keyword">char</span> *s)&#123;</span><br><span class="line">    <span class="keyword">if</span>(s == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        pBuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1</span>];</span><br><span class="line">        pBuf[<span class="number">0</span>] = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        pBuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(s) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(pBuf, s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">MyString::MyString(MyString &amp;MyStr)&#123;</span><br><span class="line">    <span class="keyword">int</span> len = MyStr.getSize();</span><br><span class="line">    <span class="keyword">this</span>-&gt;pBuf = <span class="keyword">new</span> <span class="keyword">char</span>[len + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;pBuf, MyStr.pBuf);</span><br><span class="line">&#125;</span><br><span class="line">MyString::~MyString()&#123;</span><br><span class="line">    <span class="keyword">if</span>(pBuf) <span class="keyword">delete</span> [] pBuf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyString::print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; pBuf &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MyString::getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strlen</span>(pBuf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Hello</span><br><span class="line">World!</span><br><span class="line">World!</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>객체에서 동적 메모리 사용 시 복사 생성자 직접 생성</strong></p><hr><h1 id="Day-9"><a href="#Day-9" class="headerlink" title="Day 9"></a>Day 9</h1><h2 id="Polymorphism-다형성"><a href="#Polymorphism-다형성" class="headerlink" title="Polymorphism(다형성)"></a>Polymorphism(다형성)</h2><ul><li>Overloading<ul><li>함수 중복</li><li>연산자 중복</li><li>Default Parameter</li></ul></li><li>Overriding<ul><li>함수 재정의</li></ul></li></ul><h2 id="Function-Overloading"><a href="#Function-Overloading" class="headerlink" title="Function Overloading"></a>Function Overloading</h2><ul><li>다른 함수로 인식</li><li>함수의 이름 동일</li><li>함수의 매개변수 type, 개수 다름</li><li>return type 무관</li><li>소멸자 불가 - 매개변수 X</li><li>모호하지 않게 선언</li></ul><blockquote><p>overloading.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">big</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a &gt; b) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">big</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; size; i++)</span><br><span class="line">        <span class="keyword">if</span>(res &lt; a[i]) res = a[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">9</span>, <span class="number">-2</span>, <span class="number">8</span>, <span class="number">6</span>&#125;;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; big(<span class="number">2</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; big(<span class="built_in">array</span>, <span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Default-Parameter"><a href="#Default-Parameter" class="headerlink" title="Default Parameter"></a>Default Parameter</h2><ul><li>사전에 값을 선언한 함수의 매개변수</li><li>생략 가능</li><li>일반 매개변수 뒤에 존재</li></ul><blockquote><p>default_param.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">char</span> c=<span class="string">&#x27; &#x27;</span>, <span class="keyword">int</span> line = <span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    f();</span><br><span class="line">    f(<span class="string">&#x27;%&#x27;</span>);</span><br><span class="line">    f(<span class="string">&#x27;@&#x27;</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">char</span> c, <span class="keyword">int</span> line)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; line; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">          </span><br><span class="line">%%%%%%%%%%</span><br><span class="line">@@@@@@@@@@</span><br><span class="line">@@@@@@@@@@</span><br><span class="line">@@@@@@@@@@</span><br><span class="line">@@@@@@@@@@</span><br><span class="line">@@@@@@@@@@</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>myvec.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyVector</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> *p;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MyVector(<span class="keyword">int</span> n = <span class="number">100</span>)&#123;p = <span class="keyword">new</span> <span class="keyword">int</span>[n]; size = n;&#125;</span><br><span class="line">    ~MyVector()&#123;<span class="keyword">delete</span> [] p;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MyVector *v1, *v2;</span><br><span class="line">    v1 = <span class="keyword">new</span> MyVector();</span><br><span class="line">    v2 = <span class="keyword">new</span> MyVector();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> v1;</span><br><span class="line">    <span class="keyword">delete</span> v2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Static-amp-Non-static"><a href="#Static-amp-Non-static" class="headerlink" title="Static &amp; Non-static"></a>Static &amp; Non-static</h2><ul><li><code>static</code><ul><li>변수와 함수에 대한 기억 부류의 한 종류<ul><li>생명 주기 : 프로그램이 시작될 때 생성, 프로그램 종료 시 소멸</li><li>사용 범위 : 선언된 범위, 접근 지정에 따름</li></ul></li><li>전역 변수나 전역변수를 클래스에 캡슐화<ul><li>전역 변수나 전역 함수를 가능한 사용하지 않도록</li><li>전역 변수나 전역 함수를 <code>static</code>으로 선언하여 클래스 멤버로 선언</li></ul></li><li>객체 사이에 공유 변수를 만들고자 할 때<ul><li><code>static</code> 멤버를 선언하여 모든 객체들이 공유</li></ul></li></ul></li><li>클래스의 멤버<ul><li><code>static</code><ul><li>프로그램이 시작할 때 생성</li><li>클래스당 한번만 생성, 클래스 멤버라고 불림</li><li>클래스의 모든 인스턴스(객체)들이 공유하는 멤버</li></ul></li><li>non-<code>static</code><ul><li>객체가 생성될 때 함께 생성</li><li>객체마다 객체 내에 생성</li><li>인스턴스 멤버라고 불림</li></ul></li></ul></li></ul><blockquote><p>person.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">double</span> money;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addMoney</span><span class="params">(<span class="keyword">int</span> money)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;money += money;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> sharedMoney;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addShared</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        sharedMoney += n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Person::sharedMoney = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person han;</span><br><span class="line">    han.money = <span class="number">100</span>;</span><br><span class="line">    han.sharedMoney = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    Person lee;</span><br><span class="line">    lee.money = <span class="number">150</span>;</span><br><span class="line">    lee.addMoney(<span class="number">200</span>);</span><br><span class="line">    lee.addShared(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; han.money &lt;&lt; <span class="string">&#x27;\t&#x27;</span> &lt;&lt; lee.money &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; han.sharedMoney &lt;&lt; <span class="string">&#x27;\t&#x27;</span> &lt;&lt; lee.sharedMoney &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    Person::sharedMoney = <span class="number">1000</span>;</span><br><span class="line">    Person::addShared(<span class="number">20000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; han.money &lt;&lt; <span class="string">&#x27;\t&#x27;</span> &lt;&lt; lee.money &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; han.sharedMoney &lt;&lt; <span class="string">&#x27;\t&#x27;</span> &lt;&lt; lee.sharedMoney &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span><span class="number">350</span></span><br><span class="line"><span class="number">400</span><span class="number">400</span></span><br><span class="line"><span class="number">100</span><span class="number">350</span></span><br><span class="line"><span class="number">21000</span><span class="number">21000</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>employee.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">double</span> salary;</span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">static</span> count;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Employee(<span class="built_in">string</span> name = <span class="string">&quot;&quot;</span>, <span class="keyword">double</span> salary = <span class="number">0</span>):name(name), salary(salary)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="keyword">static</span> <span class="title">getCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Employee()&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;count--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Employee::count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Employee <span class="title">e1</span><span class="params">(<span class="string">&quot;김철수&quot;</span>)</span></span>;</span><br><span class="line">    Employee e2;</span><br><span class="line">    <span class="function">Employee <span class="title">e3</span><span class="params">(<span class="string">&quot;김철호&quot;</span>, <span class="number">20000</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n = Employee::getCount();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;현재의 직원 수 : &quot;</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">현재의 직원 수 : <span class="number">3</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>circle.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> numOfCircles;</span><br><span class="line">    <span class="keyword">int</span> radius;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Circle(<span class="keyword">int</span> r = <span class="number">1</span>):radius(r)&#123;numOfCircles++;&#125;</span><br><span class="line">    ~Circle()&#123;numOfCircles--;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">3.14</span>*radius*radius;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getNumOfCircles</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> numOfCircles;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Circle::numOfCircles = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Circle *p = <span class="keyword">new</span> Circle[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;할당된 원의 개수 : &quot;</span> &lt;&lt; Circle::getNumOfCircles() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> [] p;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;할당된 원의 개수 : &quot;</span> &lt;&lt; Circle::getNumOfCircles() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    Circle a;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;할당된 원의 개수 : &quot;</span> &lt;&lt; Circle::getNumOfCircles() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    Circle b;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;할당된 원의 개수 : &quot;</span> &lt;&lt; Circle::getNumOfCircles() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">할당된 원의 개수 : <span class="number">10</span></span><br><span class="line">할당된 원의 개수 : <span class="number">0</span></span><br><span class="line">할당된 원의 개수 : <span class="number">1</span></span><br><span class="line">할당된 원의 개수 : <span class="number">2</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="Timeline-of-Program"><a href="#Timeline-of-Program" class="headerlink" title="Timeline of Program"></a>Timeline of Program</h3><ol><li>프로그램 시작<ul><li>전역 변수</li><li><code>static</code> 멤버<ul><li>멤버 변수</li><li>멤버 함수</li></ul></li></ul></li><li>객체<ul><li>non-<code>static</code> 멤버</li></ul></li><li>객체 종료<ul><li>non-<code>static</code> 멤버 종료</li></ul></li><li>프로그램 끝<ul><li>전역 변수 종료</li><li><code>static</code> 멤버 종료</li></ul></li></ol><h3 id="Access"><a href="#Access" class="headerlink" title="Access"></a>Access</h3><ul><li><code>static</code> 멤버 함수 -&gt; <code>static</code> 멤버 변수 : 가능</li><li><code>static</code> 멤버 함수 -&gt; non-<code>static</code> 멤버 변수 : 불가능</li><li><code>static</code> 멤버 함수 -&gt; non-<code>static</code> 멤버 함수 : 불가능</li><li>non-<code>static</code> 멤버 함수 -&gt; non-<code>static</code> 멤버 변수 : 가능</li><li>non-<code>static</code> 멤버 함수 -&gt; <code>static</code> 멤버 변수 : 가능</li><li>non-<code>static</code> 멤버 함수 -&gt; <code>static</code> 멤버 함수 : 가능</li><li><code>static</code> 멤버 함수가 접근할 수 있는 것<ul><li><code>static</code> 멤버 함수</li><li><code>static</code> 멤버 변수</li><li>함수 내의 지역 변수</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>-&gt;sharedMoney += n; <span class="comment">// static 이후 객체 생성 - 오류</span></span><br></pre></td></tr></table></figure><h2 id="Quiz-4"><a href="#Quiz-4" class="headerlink" title="Quiz"></a>Quiz</h2><blockquote><p>quiz.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Random</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="keyword">static</span> <span class="title">seed</span><span class="params">()</span></span>&#123;srand(time(<span class="literal">NULL</span>));&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="keyword">static</span> <span class="title">nextInt</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">char</span> <span class="keyword">static</span> <span class="title">nextAlphabet</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="keyword">static</span> <span class="title">nextDouble</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Random::seed();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1에서 100까지 랜덤한 정수 10개를 출력합니다.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) <span class="built_in">cout</span> &lt;&lt; Random::nextInt(<span class="number">1</span>, <span class="number">100</span>) &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;알파벳을 랜덤하게 10개를 출력합니다.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) <span class="built_in">cout</span> &lt;&lt; Random::nextAlphabet() &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;랜덤한 실수를 10개 출력합니다.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) <span class="built_in">cout</span> &lt;&lt; Random::nextDouble() &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) <span class="built_in">cout</span> &lt;&lt; Random::nextDouble() &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Random::nextInt</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> rand() % (end - start + <span class="number">1</span>) + start;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Random::nextAlphabet</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        num = nextInt(<span class="number">65</span>, <span class="number">122</span>);</span><br><span class="line">        <span class="keyword">if</span>(num &gt;= <span class="number">91</span> &amp;&amp; num &lt;= <span class="number">96</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Random::nextDouble</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">double</span>) rand() / RAND_MAX;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>에서 <span class="number">100</span>까지 랜덤한 정수 <span class="number">10</span>개를 출력합니다.</span><br><span class="line"><span class="number">47</span><span class="number">98</span><span class="number">79</span><span class="number">68</span><span class="number">45</span><span class="number">18</span><span class="number">87</span><span class="number">76</span><span class="number">88</span><span class="number">15</span></span><br><span class="line">알파벳을 랜덤하게 <span class="number">10</span>개를 출력합니다.</span><br><span class="line">lKWkddyfXX</span><br><span class="line">랜덤한 실수를 <span class="number">10</span>개 출력합니다.</span><br><span class="line"><span class="number">0.891485</span><span class="number">0.195258</span><span class="number">0.707381</span><span class="number">0.95967</span><span class="number">0.167292</span></span><br><span class="line"><span class="number">0.673519</span><span class="number">0.836099</span><span class="number">0.318814</span><span class="number">0.307098</span><span class="number">0.397495</span></span><br></pre></td></tr></table></figure><hr><h1 id="Day-10"><a href="#Day-10" class="headerlink" title="Day 10"></a>Day 10</h1><h2 id="Friend"><a href="#Friend" class="headerlink" title="Friend"></a>Friend</h2><ul><li>클래스의 멤버 함수가 아닌 외부 함수<ul><li>전역 함수</li><li>다른 클래스의 멤버 함수</li></ul></li><li><code>friend</code>로 클래스 내에 선언된 함수<ul><li>클래스의 모든 멤버를 접근할 수 있는 권한 부여</li><li>프렌드 함수라고 부름</li></ul></li><li>friend<ul><li>전역 함수</li><li>다른 클래스의 멤버 함수</li><li>다른 클래스 전체</li></ul></li></ul><blockquote><p>friend1.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span>;</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">equals</span><span class="params">(Rect r, Rect s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> width, height;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Rect(<span class="keyword">int</span> width, <span class="keyword">int</span> height):width(width), height(height)&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="title">equals</span><span class="params">(Rect r, Rect s)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Rect a(3, 4), b(4, 5);</span><br><span class="line">    <span class="keyword">if</span>(equals(a, b)) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;equal&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;not equal&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">equals</span><span class="params">(Rect r, Rect s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(r.width == s.width &amp;&amp; r.height == s.height) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>friend2.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span>;</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">equals</span><span class="params">(Rect r, Rect s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RectManager</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">equals</span><span class="params">(Rect r, Rect s)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> width, height;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Rect(<span class="keyword">int</span> width, <span class="keyword">int</span> height):width(width), height(height)&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="title">RectManager::equals</span><span class="params">(Rect r, Rect s)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Rect a(3, 4), b(4, 5);</span><br><span class="line">    RectManager Man;</span><br><span class="line">    <span class="keyword">if</span>(Man.equals(a, b)) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;equal&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;not equal&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">RectManager::equals</span><span class="params">(Rect r, Rect s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(r.width == s.width &amp;&amp; r.height == s.height) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>friend3.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span>;</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">equals</span><span class="params">(Rect r, Rect s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RectManager</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">equals</span><span class="params">(Rect r, Rect s)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> width, height;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Rect(<span class="keyword">int</span> width, <span class="keyword">int</span> height):width(width), height(height)&#123;&#125;;</span><br><span class="line">    <span class="keyword">friend</span> RectManager;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Rect a(3, 4), b(4, 5);</span><br><span class="line">    RectManager Man;</span><br><span class="line">    <span class="keyword">if</span>(Man.equals(a, b)) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;equal&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;not equal&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">RectManager::equals</span><span class="params">(Rect r, Rect s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(r.width == s.width &amp;&amp; r.height == s.height) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">not</span> equal</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Operator-Overloading"><a href="#Operator-Overloading" class="headerlink" title="Operator Overloading"></a>Operator Overloading</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">리턴타입 <span class="keyword">operator</span>연산자(매개변수)</span><br></pre></td></tr></table></figure><ul><li><code>C++</code>에 본래 있는 연산자만 중복 가능</li><li>피 연산자 타입이 다른 새로운 연산 정의</li><li>연산자는 함수 형태로 구현 - 연산자 함수(Operator function)<ul><li>클래스의 멤버 함수로 구현</li><li>외부 함수로 구현하고 클래스에 프렌드 함수로 선언</li></ul></li><li>반드시 클래스와 관계를 가짐</li><li>피연산자의 개수를 바꿀 수 없음</li><li>연산의 우선 순위 변경 안됨</li><li>모든 연산자가 중복 가능하진 않음</li></ul><blockquote><p>power_by_member_function.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Power</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> kick;</span><br><span class="line">    <span class="keyword">int</span> punch;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Power(<span class="keyword">int</span> kick = <span class="number">0</span>, <span class="keyword">int</span> punch = <span class="number">0</span>):kick(kick), punch(punch)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">    Power <span class="keyword">operator</span>+(Power op2);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Power a(3, 5), b(4, 6), c;</span><br><span class="line">    c = a + b; <span class="comment">// a.operator+(b)</span></span><br><span class="line">    a.show();</span><br><span class="line">    b.show();</span><br><span class="line">    c.show();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Power::show</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Kick = &quot;</span> &lt;&lt; kick &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; <span class="string">&quot; Punch = &quot;</span> &lt;&lt; punch &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Power Power::<span class="keyword">operator</span>+(Power op2)&#123;</span><br><span class="line">    Power tmp;</span><br><span class="line">    tmp.kick = <span class="keyword">this</span>-&gt;kick + op2.kick;</span><br><span class="line">    tmp.punch = <span class="keyword">this</span>-&gt;punch + op2.punch;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>power_by_friend_function.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Power</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> kick;</span><br><span class="line">    <span class="keyword">int</span> punch;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Power(<span class="keyword">int</span> kick = <span class="number">0</span>, <span class="keyword">int</span> punch = <span class="number">0</span>):kick(kick), punch(punch)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">friend</span> Power <span class="keyword">operator</span>+(Power op1, Power op2);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Power a(3, 5), b(4, 6), c;</span><br><span class="line">    c = a + b; <span class="comment">// operator+(a, b)</span></span><br><span class="line">    a.show();</span><br><span class="line">    b.show();</span><br><span class="line">    c.show();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Power::show</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Kick = &quot;</span> &lt;&lt; kick &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; <span class="string">&quot; Punch = &quot;</span> &lt;&lt; punch &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Power <span class="keyword">operator</span>+(Power op1, Power op2)&#123;</span><br><span class="line">    Power tmp;</span><br><span class="line">    tmp.kick = op1.kick + op2.kick;</span><br><span class="line">    tmp.punch = op1.punch + op2.punch;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Kick = <span class="number">3</span>, Punch = <span class="number">5</span></span><br><span class="line">Kick = <span class="number">4</span>, Punch = <span class="number">6</span></span><br><span class="line">Kick = <span class="number">7</span>, Punch = <span class="number">11</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>cpoint_by_member_function.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPoint</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CPoint(<span class="keyword">int</span> a = <span class="number">0</span>, <span class="keyword">int</span> b = <span class="number">0</span>):x(a), y(b)&#123;&#125;</span><br><span class="line">    CPoint <span class="keyword">operator</span>-();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;(&#x27;</span> &lt;&lt; x &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; y &lt;&lt; <span class="string">&#x27;)&#x27;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">CPoint <span class="title">P1</span><span class="params">(<span class="number">2</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    CPoint P2 = -P1;</span><br><span class="line">    CPoint P3 = -(-P1);</span><br><span class="line"></span><br><span class="line">    P1.Print();</span><br><span class="line">    P2.Print();</span><br><span class="line">    P3.Print();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CPoint CPoint::<span class="keyword">operator</span>-()&#123;</span><br><span class="line">    <span class="keyword">return</span>(CPoint(-<span class="keyword">this</span>-&gt;x, -<span class="keyword">this</span>-&gt;y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>cpoint_by_friend_function.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPoint</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CPoint(<span class="keyword">int</span> a = <span class="number">0</span>, <span class="keyword">int</span> b = <span class="number">0</span>):x(a), y(b)&#123;&#125;</span><br><span class="line">    <span class="keyword">friend</span> CPoint <span class="keyword">operator</span>-(CPoint obj);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;(&#x27;</span> &lt;&lt; x &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; y &lt;&lt; <span class="string">&#x27;)&#x27;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">CPoint <span class="title">P1</span><span class="params">(<span class="number">2</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    CPoint P2 = -P1;</span><br><span class="line">    CPoint P3 = -(-P1);</span><br><span class="line"></span><br><span class="line">    P1.Print();</span><br><span class="line">    P2.Print();</span><br><span class="line">    P3.Print();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CPoint <span class="keyword">operator</span>-(CPoint obj)&#123;</span><br><span class="line">    <span class="keyword">return</span> CPoint(-obj.x, -obj.y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">(<span class="number">-2</span>,<span class="number">-2</span>)</span><br><span class="line">(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>prefix_by_member_function.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Power</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> kick;</span><br><span class="line">    <span class="keyword">int</span> punch;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Power(<span class="keyword">int</span> kick = <span class="number">0</span>, <span class="keyword">int</span> punch = <span class="number">0</span>):kick(kick), punch(punch)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">    Power <span class="keyword">operator</span>++(); <span class="comment">// 매개변수 존재 -&gt; postfix</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Power a(3, 5), b;</span><br><span class="line">    a.show();</span><br><span class="line">    b = ++a;</span><br><span class="line">    a.show();</span><br><span class="line">    b.show();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Power::show</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Kick = &quot;</span> &lt;&lt; kick &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; <span class="string">&quot; Punch = &quot;</span> &lt;&lt; punch &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Power Power::<span class="keyword">operator</span>++()&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;kick++;</span><br><span class="line">    <span class="keyword">this</span>-&gt;punch++;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>postfix_by_friend_function.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Power</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> kick;</span><br><span class="line">    <span class="keyword">int</span> punch;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Power(<span class="keyword">int</span> kick = <span class="number">0</span>, <span class="keyword">int</span> punch = <span class="number">0</span>):kick(kick), punch(punch)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">friend</span> Power <span class="keyword">operator</span>++(Power &amp;p, <span class="keyword">int</span> x); <span class="comment">// x 삭제 -&gt; prefix</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Power a(3, 5), b;</span><br><span class="line">    a.show();</span><br><span class="line">    b = a++;</span><br><span class="line">    a.show();</span><br><span class="line">    b.show();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Power::show</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Kick = &quot;</span> &lt;&lt; kick &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; <span class="string">&quot; Punch = &quot;</span> &lt;&lt; punch &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Power <span class="keyword">operator</span>++(Power &amp;p, <span class="keyword">int</span> x)&#123;</span><br><span class="line">    p.kick++;</span><br><span class="line">    p.punch++;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Kick = <span class="number">3</span>, Punch = <span class="number">5</span></span><br><span class="line">Kick = <span class="number">4</span>, Punch = <span class="number">6</span></span><br><span class="line">Kick = <span class="number">4</span>, Punch = <span class="number">6</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>pre_post.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Power</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> kick;</span><br><span class="line">    <span class="keyword">int</span> punch;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Power(<span class="keyword">int</span> kick = <span class="number">0</span>, <span class="keyword">int</span> punch = <span class="number">0</span>):kick(kick), punch(punch)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">friend</span> Power <span class="keyword">operator</span>++(Power &amp;p);</span><br><span class="line">    <span class="keyword">friend</span> Power <span class="keyword">operator</span>++(Power &amp;p, <span class="keyword">int</span> x);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Power a(3, 5), b;</span><br><span class="line">    a.show();</span><br><span class="line">    b = ++a;</span><br><span class="line">    a.show();</span><br><span class="line">    b.show();</span><br><span class="line">    Power c(3, 5), d;</span><br><span class="line">    d = c++;</span><br><span class="line">    c.show();</span><br><span class="line">    d.show();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Power::show</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Kick = &quot;</span> &lt;&lt; kick &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; <span class="string">&quot; Punch = &quot;</span> &lt;&lt; punch &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Power <span class="keyword">operator</span>++(Power &amp;p)&#123;</span><br><span class="line">    p.kick++;</span><br><span class="line">    p.punch++;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line">Power <span class="keyword">operator</span>++(Power &amp;p, <span class="keyword">int</span> x)&#123;</span><br><span class="line">    p.kick++;</span><br><span class="line">    p.punch++;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Kick = <span class="number">3</span>, Punch = <span class="number">5</span></span><br><span class="line">Kick = <span class="number">4</span>, Punch = <span class="number">6</span></span><br><span class="line">Kick = <span class="number">4</span>, Punch = <span class="number">6</span></span><br><span class="line">Kick = <span class="number">4</span>, Punch = <span class="number">6</span></span><br><span class="line">Kick = <span class="number">4</span>, Punch = <span class="number">6</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>complex.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span>&#123;</span></span><br><span class="line">    <span class="keyword">friend</span> ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;os, <span class="keyword">const</span> Complex &amp;v);</span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Complex(<span class="keyword">double</span> x = <span class="number">0</span>, <span class="keyword">double</span> y = <span class="number">0</span>):x(x), y(y)&#123;&#125;</span><br><span class="line">    Complex <span class="keyword">operator</span>+(<span class="keyword">const</span> Complex &amp;v2) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="function">Complex <span class="title">v</span><span class="params">(<span class="number">0.0</span>, <span class="number">0.0</span>)</span></span>;</span><br><span class="line">        v.x = <span class="keyword">this</span>-&gt;x + v2.x;</span><br><span class="line">        v.y = <span class="keyword">this</span>-&gt;y + v2.y;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;(&#x27;</span> &lt;&lt; x &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; y &lt;&lt; <span class="string">&#x27;i&#x27;</span> &lt;&lt; <span class="string">&#x27;)&#x27;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Complex v1(1.1,2.1), v2(12.12, 13.13), v3;</span><br><span class="line">    v3 = v1 + v2;</span><br><span class="line">    v1.display();</span><br><span class="line">    v2.display();</span><br><span class="line">    v3.display();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v1 &lt;&lt; v2 &lt;&lt; v3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;os, <span class="keyword">const</span> Complex &amp;v)&#123;</span><br><span class="line">    os &lt;&lt; <span class="string">&#x27;(&#x27;</span> &lt;&lt; v.x &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; v.y &lt;&lt; <span class="string">&#x27;i&#x27;</span> &lt;&lt; <span class="string">&#x27;)&#x27;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1.1</span>,<span class="number">2.1</span>i)</span><br><span class="line">(<span class="number">12.12</span>,<span class="number">13.13</span>i)</span><br><span class="line">(<span class="number">13.22</span>,<span class="number">15.23</span>i)</span><br><span class="line">(<span class="number">1.1</span>,<span class="number">2.1</span>i)</span><br><span class="line">(<span class="number">12.12</span>,<span class="number">13.13</span>i)</span><br><span class="line">(<span class="number">13.22</span>,<span class="number">15.23</span>i)</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Quiz-5"><a href="#Quiz-5" class="headerlink" title="Quiz"></a>Quiz</h2><blockquote><p>quiz.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> re, im;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Complex(<span class="keyword">double</span> r):re(r), im(<span class="number">0</span>)&#123;&#125;</span><br><span class="line">    Complex(<span class="keyword">double</span> x = <span class="number">0</span>, <span class="keyword">double</span> y = <span class="number">0</span>):re(x),im(y)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Output</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; re &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; im &lt;&lt; <span class="string">&#x27;i&#x27;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Complex &amp;<span class="keyword">operator</span>+=(Complex com);</span><br><span class="line">    Complex &amp;<span class="keyword">operator</span>-();</span><br><span class="line">    <span class="keyword">friend</span> Complex <span class="keyword">operator</span>+(Complex &amp;com1, Complex &amp;com2);</span><br><span class="line">    <span class="keyword">friend</span> Complex <span class="keyword">operator</span>++(Complex &amp;com);</span><br><span class="line">    <span class="keyword">friend</span> Complex <span class="keyword">operator</span>++(Complex &amp;com, <span class="keyword">int</span> x);</span><br><span class="line">    <span class="keyword">friend</span> ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;os, Complex &amp;com)&#123;</span><br><span class="line">        os &lt;&lt; <span class="string">&#x27;(&#x27;</span> &lt;&lt; com.re &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; com.im &lt;&lt; <span class="string">&#x27;i&#x27;</span> &lt;&lt; <span class="string">&#x27;)&#x27;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> os;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Complex c1(1, 2), c2(3 ,4), c(9, 200);</span><br><span class="line">    c1.Output(); c2.Output(); c1 += c2; c1.Output();</span><br><span class="line">    Complex c3 = c1 + c2;</span><br><span class="line">    Complex c4 = c1 += c2, c5, c6; c3.Output();</span><br><span class="line">    c5 = ++c4; c4.Output(); c5.Output();</span><br><span class="line">    c6 = c4++; c4.Output(); c6.Output();</span><br><span class="line">    c2 = -c2; <span class="built_in">cout</span> &lt;&lt; c2; <span class="built_in">cout</span> &lt;&lt; c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Complex &amp;Complex::<span class="keyword">operator</span>+=(Complex com)&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;re = <span class="keyword">this</span>-&gt;re + com.re;</span><br><span class="line">    <span class="keyword">this</span>-&gt;im = <span class="keyword">this</span>-&gt;im + com.im;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">Complex &amp;Complex::<span class="keyword">operator</span>-()&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">com</span><span class="params">(-<span class="keyword">this</span>-&gt;re, -<span class="keyword">this</span>-&gt;im)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> com;</span><br><span class="line">&#125;</span><br><span class="line">Complex <span class="keyword">operator</span>+(Complex &amp;com1, Complex &amp;com2)&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">com</span><span class="params">(com1.re + com2.re, com1.im + com2.im)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> com;</span><br><span class="line">&#125;</span><br><span class="line">Complex <span class="keyword">operator</span>++(Complex &amp;com)&#123;</span><br><span class="line">    com.re++;</span><br><span class="line">    com.im++;</span><br><span class="line">    <span class="keyword">return</span> com;</span><br><span class="line">&#125;</span><br><span class="line">Complex <span class="keyword">operator</span>++(Complex &amp;com, <span class="keyword">int</span> x)&#123;</span><br><span class="line">    com.re++;</span><br><span class="line">    com.im++;</span><br><span class="line">    <span class="keyword">return</span> com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="number">2</span>i</span><br><span class="line"><span class="number">3</span> + <span class="number">4</span>i</span><br><span class="line"><span class="number">4</span> + <span class="number">6</span>i</span><br><span class="line"><span class="number">7</span> + <span class="number">10</span>i</span><br><span class="line"><span class="number">8</span> + <span class="number">11</span>i</span><br><span class="line"><span class="number">8</span> + <span class="number">11</span>i</span><br><span class="line"><span class="number">9</span> + <span class="number">12</span>i</span><br><span class="line"><span class="number">9</span> + <span class="number">12</span>i</span><br><span class="line">(<span class="number">-3</span>,<span class="number">-4</span>i)</span><br><span class="line">(<span class="number">9</span>,<span class="number">200</span>i)</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><hr><h1 id="Day-11"><a href="#Day-11" class="headerlink" title="Day 11"></a>Day 11</h1><h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><blockquote><p>stack.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">int</span> *mem;</span><br><span class="line">    <span class="keyword">int</span> tos;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Stack(<span class="keyword">int</span> size = <span class="number">4</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;size = size;</span><br><span class="line">        mem = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">        tos = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Stack()&#123;<span class="keyword">delete</span> [] mem;&#125;</span><br><span class="line">    Stack &amp;<span class="keyword">operator</span>&lt;&lt;(<span class="keyword">int</span> n);</span><br><span class="line">    Stack &amp;<span class="keyword">operator</span>&gt;&gt;(<span class="keyword">int</span> &amp;n);</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Stack <span class="title">stack</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="built_in">stack</span> &lt;&lt; 1 &lt;&lt; 2 &lt;&lt; 3 &lt;&lt; 4 &lt;&lt; 5;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">stack</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">stack</span> &gt;&gt; x;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stack &amp;Stack::<span class="keyword">operator</span>&lt;&lt;(<span class="keyword">int</span> n)&#123;</span><br><span class="line">    <span class="keyword">if</span>(tos == size - <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>-&gt;tos++;</span><br><span class="line">    <span class="keyword">this</span>-&gt;mem[tos] = n;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">Stack &amp;Stack::<span class="keyword">operator</span>&gt;&gt;(<span class="keyword">int</span> &amp;n)&#123;</span><br><span class="line">    <span class="keyword">if</span>(tos == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    n = <span class="keyword">this</span>-&gt;mem[tos];</span><br><span class="line">    <span class="keyword">this</span>-&gt;tos--;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> Stack::<span class="keyword">operator</span>!()&#123;</span><br><span class="line">    <span class="keyword">if</span>(tos == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span><span class="number">4</span><span class="number">3</span><span class="number">2</span><span class="number">1</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Const-Member-amp-Const-Object"><a href="#Const-Member-amp-Const-Object" class="headerlink" title="Const Member &amp; Const Object"></a>Const Member &amp; Const Object</h2><ul><li><code>const</code> member variable : 객체 생성과 동시에 초기화 필요<ul><li>멤버 초기화 구문 사용</li></ul></li><li><code>const</code> member function : 멤버 변수의 값을 읽을 수 있으나 변경 불가능<ul><li>멤버 변수의 주소 반환 불가</li><li>비<code>const</code> 멤버 함수의 호출 불가</li></ul></li><li><code>const</code> object<ul><li>객체 생성 시 <code>const</code> 접두사 추가</li><li>멤버 변수의 값 변경 불가</li><li><code>const</code> 멤버 함수 이외의 멤버 함수에 대한 호출 불가</li></ul></li></ul><h2 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h2><ul><li>기본 클래스(Base class) - 상속해주는 클래스, 부모 클래스</li><li>파생 클래스(Derived class) - 상속받는 클래스, 자식 클래스</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> :</span> <span class="keyword">public</span> Base&#123; <span class="comment">//public, private, protected</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>간결한 클래스 작성</li><li>클래스 간의 계층적 분류 및 관리의 용이함</li><li>클래스 재사용과 확장을 통한 소프트웨어 생산성 향상</li></ul><blockquote><p>inheritance.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">this</span>-&gt;x = x; <span class="keyword">this</span>-&gt;y = y;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showPoint</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;(&#x27;</span> &lt;&lt; x &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; y &lt;&lt; <span class="string">&#x27;)&#x27;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> :</span> <span class="keyword">public</span> Point&#123;</span><br><span class="line">    <span class="built_in">string</span> color;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setColor</span><span class="params">(<span class="built_in">string</span> color)</span></span>&#123;<span class="keyword">this</span>-&gt;color = color;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showColorPoint</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Point p;</span><br><span class="line">    ColorPoint cp;</span><br><span class="line">    cp.<span class="built_in">set</span>(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    cp.setColor(<span class="string">&quot;Red&quot;</span>);</span><br><span class="line">    cp.showColorPoint();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ColorPoint::showColorPoint</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; color &lt;&lt; <span class="string">&quot; : &quot;</span>;</span><br><span class="line">    showPoint();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Red : (<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Casting"><a href="#Casting" class="headerlink" title="Casting"></a>Casting</h2><ul><li>업 캐스팅(Up-casting)<ul><li>파생 클래스의 객체를 기본 클래스의 포인터로 가리키는 것</li><li>포인터 : 기본</li><li>객체 : 파생</li></ul></li><li>다운 캐스팅(Down-casting)<ul><li>기본 클래스 포인터가 가리키는 객체를 파생 클래스의 포인터로 가리키는 것</li><li>명시적 형변환 필요</li><li>포인터 : 파생</li><li>객체 : 기본</li></ul></li></ul><h2 id="접근-지정자-1"><a href="#접근-지정자-1" class="headerlink" title="접근 지정자"></a>접근 지정자</h2><ul><li>private 멤버<ul><li>선언된 클래스 내에서만 접근 가능</li><li>파생 클래스에서도 기본 클래스의 private 멤버 직접 접근 불가</li></ul></li><li>public 멤버<ul><li>선언된 클래스나 외부 어떤 클래스, 모든 외부 함수에 접근 허용</li><li>파생 클래스에서 기본 클래스의 public 멤버 접근 가능</li></ul></li><li>protected 멤버<ul><li>선언된 클래스에서 접근 가능</li><li>파생 클래스에서만 접근 허용</li></ul></li></ul><blockquote><p>point.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Point(<span class="keyword">int</span> x, <span class="keyword">int</span> y):x(x), y(y)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> x;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> y;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">this</span>-&gt;x = x; <span class="keyword">this</span>-&gt;y = y;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> :</span> <span class="keyword">public</span> Point&#123;</span><br><span class="line">    <span class="built_in">string</span> color;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ColorPoint():Point(<span class="number">0</span>, <span class="number">0</span>)&#123;color = <span class="string">&quot;BLACK&quot;</span>;&#125;</span><br><span class="line">    ColorPoint(<span class="keyword">int</span> x, <span class="keyword">int</span> y):Point(x, y)&#123;&#125;</span><br><span class="line">    ColorPoint(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="built_in">string</span> color):Point(x, y)&#123;<span class="keyword">this</span>-&gt;color = color;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPoint</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;move(x, y);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setColor</span><span class="params">(<span class="built_in">string</span> color)</span></span>&#123;<span class="keyword">this</span>-&gt;color = color;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(ColorPoint &amp;p)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ColorPoint zeroPoint;</span><br><span class="line">    show(zeroPoint);</span><br><span class="line">    <span class="function">ColorPoint <span class="title">cp</span><span class="params">(<span class="number">5</span>, <span class="number">5</span>)</span></span>;</span><br><span class="line">    cp.setPoint(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    cp.setColor(<span class="string">&quot;BLUE&quot;</span>);</span><br><span class="line">    show(cp);</span><br><span class="line">    <span class="function">ColorPoint <span class="title">cpRed</span><span class="params">(<span class="number">23</span>, <span class="number">33</span>, <span class="string">&quot;RED&quot;</span>)</span></span>;</span><br><span class="line">    show(cpRed);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(ColorPoint &amp;p)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; p.color &lt;&lt; <span class="string">&quot;색으로 &quot;</span> &lt;&lt; <span class="string">&#x27;(&#x27;</span> &lt;&lt; p.getX() &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; p.getY() &lt;&lt; <span class="string">&#x27;)&#x27;</span> &lt;&lt; <span class="string">&quot;에 위치한 점입니다.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BLACK색으로 (<span class="number">0</span>,<span class="number">0</span>)에 위치한 점입니다.</span><br><span class="line">BLUE색으로 (<span class="number">10</span>,<span class="number">20</span>)에 위치한 점입니다.</span><br><span class="line">RED색으로 (<span class="number">23</span>,<span class="number">33</span>)에 위치한 점입니다.</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Quiz-6"><a href="#Quiz-6" class="headerlink" title="Quiz"></a>Quiz</h2><blockquote><p>quiz.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseArray</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> capacity;</span><br><span class="line">    <span class="keyword">int</span> *mem;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    BaseArray(<span class="keyword">int</span> capacity = <span class="number">100</span>):capacity(capacity)&#123;mem = <span class="keyword">new</span> <span class="keyword">int</span>[capacity];&#125;</span><br><span class="line">    ~BaseArray()&#123;<span class="keyword">delete</span> [] mem;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> val)</span></span>&#123;mem[index] = val;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;<span class="keyword">return</span> mem[index];&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getCapacity</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> capacity;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> :</span> BaseArray&#123;</span><br><span class="line">    <span class="keyword">int</span> head;</span><br><span class="line">    <span class="keyword">int</span> tail;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MyQueue(<span class="keyword">int</span> capacity):BaseArray(capacity)&#123;head = <span class="number">0</span>; tail = <span class="number">-1</span>; size = <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dequeue</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">capacity</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> getCapacity();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> size;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setSize</span><span class="params">(<span class="keyword">int</span> S = <span class="number">0</span>)</span></span>&#123;size = S;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> size;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">MyQueue <span class="title">mQ</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> Size;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;큐의 사이즈를 입력하라&gt;&gt; &quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; Size;</span><br><span class="line">    mQ.setSize(Size);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;큐에 삽입할 &quot;</span>&lt;&lt; mQ.getSize() &lt;&lt; <span class="string">&quot;개의 정수를 입력하라&gt;&gt; &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mQ.getSize(); i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        mQ.enqueue(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;큐의 용량 : &quot;</span> &lt;&lt; mQ.capacity() &lt;&lt; <span class="string">&quot;,\t큐의 크기 : &quot;</span> &lt;&lt; mQ.length() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;큐의 원소를 순서대로 제거하여 출력한다&gt;&gt; &quot;</span>;</span><br><span class="line">    <span class="keyword">while</span>(mQ.length() != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; mQ.dequeue() &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">&quot;큐의 현재 크기 : &quot;</span> &lt;&lt; mQ.length() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyQueue::enqueue</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> he = head % getCapacity();</span><br><span class="line">    put(he, n);</span><br><span class="line">    head++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MyQueue::dequeue</span><span class="params">()</span></span>&#123;</span><br><span class="line">    tail++;</span><br><span class="line">    <span class="keyword">int</span> ta = tail % getCapacity();</span><br><span class="line">    size--;</span><br><span class="line">    <span class="keyword">return</span> get(ta);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">큐의 사이즈를 입력하라&gt;&gt; <span class="number">5</span></span><br><span class="line">큐에 삽입할 <span class="number">5</span>개의 정수를 입력하라&gt;&gt; <span class="number">12</span> <span class="number">34</span> <span class="number">44</span> <span class="number">33</span> <span class="number">22</span></span><br><span class="line">큐의 용량 : <span class="number">100</span>,큐의 크기 : <span class="number">5</span></span><br><span class="line">큐의 원소를 순서대로 제거하여 출력한다&gt;&gt; <span class="number">12</span> <span class="number">34</span> <span class="number">44</span> <span class="number">33</span> <span class="number">22</span> </span><br><span class="line">큐의 현재 크기 : <span class="number">0</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><hr><h1 id="Day-12"><a href="#Day-12" class="headerlink" title="Day 12"></a>Day 12</h1><h2 id="Constructor-of-Inheritance"><a href="#Constructor-of-Inheritance" class="headerlink" title="Constructor of Inheritance"></a>Constructor of Inheritance</h2><blockquote><p>constructor.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TV</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TV()&#123;size = <span class="number">20</span>;&#125;</span><br><span class="line">    TV(<span class="keyword">int</span> size):size(size)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> size;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WideTV</span> :</span> <span class="keyword">public</span> TV&#123;</span><br><span class="line">    <span class="keyword">bool</span> videoIn;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    WideTV(<span class="keyword">int</span> size, <span class="keyword">bool</span> videoIn) : TV(size)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;videoIn = videoIn;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">getVideoIn</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> videoIn;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartTV</span> :</span> <span class="keyword">public</span> WideTV&#123;</span><br><span class="line">    <span class="built_in">string</span> ipAddr;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    SmartTV(<span class="built_in">string</span> ipAddr, <span class="keyword">int</span> size) : WideTV(size, <span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ipAddr = ipAddr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">getipAddr</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> ipAddr;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">SmartTV <span class="title">htv</span><span class="params">(<span class="string">&quot;192.0.0.1&quot;</span>, <span class="number">32</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;size = &quot;</span> &lt;&lt; htv.getSize() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;videoIn = &quot;</span> &lt;&lt; htv.getVideoIn() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;IP = &quot;</span> &lt;&lt; htv.getipAddr() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">size = <span class="number">32</span></span><br><span class="line">videoIn = <span class="number">1</span></span><br><span class="line">IP = <span class="number">192.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Virtual-Function-amp-Overriding"><a href="#Virtual-Function-amp-Overriding" class="headerlink" title="Virtual Function &amp; Overriding"></a>Virtual Function &amp; Overriding</h2><ul><li>Virtual function<ul><li><code>virtual</code> 키워드로 선언된 멤버 함수</li><li>동적 바인딩 지시어</li><li>컴파일러에게 함수에 대한 호출 바인딩을 실행 시간까지 미루도록 지시</li></ul></li><li>Function overriding<ul><li>파생 클래스에서 기본 클래스의 가상 함수와 동일한 이름의 함수 선언</li><li>기본 클래스 : 가상 함수의 존재감 상실</li><li>파생 클래스 : 오버라이딩한 함수가 호출되도록 동적 바인딩</li><li>함수 재정의라고도 부름</li><li>다형성의 한 종류</li></ul></li><li>조건<ul><li><code>virtual</code>으로 함수 선언(파생 클래스는 생략 가능)</li><li>upcasting</li><li>함수 동일</li></ul></li></ul><blockquote><p>overriding.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> :</span> <span class="keyword">public</span> Base&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Derived&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GrandDerived</span> :</span> <span class="keyword">public</span> Derived&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;GrandDerived&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Base *bp = <span class="keyword">new</span> GrandDerived;</span><br><span class="line">    bp-&gt;f();</span><br><span class="line">    Derived *dp = <span class="keyword">new</span> GrandDerived;</span><br><span class="line">    dp-&gt;f();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GrandDerived</span><br><span class="line">GrandDerived</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>destructor1.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~Base()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;~Base&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> :</span> <span class="keyword">public</span> Base&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~Derived()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;~Derived&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GrandDerived</span> :</span> <span class="keyword">public</span> Derived&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~GrandDerived()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;~GrandDerived&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Base *bp = <span class="keyword">new</span> GrandDerived;</span><br><span class="line">    Derived *dp = <span class="keyword">new</span> GrandDerived;</span><br><span class="line">    GrandDerived *gp = <span class="keyword">new</span> GrandDerived;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> bp;</span><br><span class="line">    <span class="keyword">delete</span> dp;</span><br><span class="line">    <span class="keyword">delete</span> gp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">~Base</span><br><span class="line">~Derived</span><br><span class="line">~Base</span><br><span class="line">~GrandDerived</span><br><span class="line">~Derived</span><br><span class="line">~Base</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>destructor2.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~Base()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;~Base&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> :</span> <span class="keyword">public</span> Base&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~Derived()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;~Derived&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GrandDerived</span> :</span> <span class="keyword">public</span> Derived&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~GrandDerived()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;~GrandDerived&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Base *bp = <span class="keyword">new</span> GrandDerived;</span><br><span class="line">    Derived *dp = <span class="keyword">new</span> GrandDerived;</span><br><span class="line">    GrandDerived *gp = <span class="keyword">new</span> GrandDerived;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> bp;</span><br><span class="line">    <span class="keyword">delete</span> dp;</span><br><span class="line">    <span class="keyword">delete</span> gp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">~GrandDerived</span><br><span class="line">~Derived</span><br><span class="line">~Base</span><br><span class="line">~GrandDerived</span><br><span class="line">~Derived</span><br><span class="line">~Base</span><br><span class="line">~GrandDerived</span><br><span class="line">~Derived</span><br><span class="line">~Base</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Overloading-vs-Overrding"><a href="#Overloading-vs-Overrding" class="headerlink" title="Overloading vs. Overrding"></a>Overloading vs. Overrding</h2><ul><li>Overloading<ul><li>이름만 같은 함수 중복 작성</li><li>하나의 클래스</li></ul></li><li>Overriding<ul><li>모든 것이 완벽히 같은 함수 재작성</li><li>상속</li></ul></li></ul><h2 id="Quiz-7"><a href="#Quiz-7" class="headerlink" title="Quiz"></a>Quiz</h2><blockquote><p>quiz.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseArray</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> capacity;</span><br><span class="line">    <span class="keyword">int</span> *mem;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    BaseArray(<span class="keyword">int</span> capacity = <span class="number">100</span>):capacity(capacity)&#123;mem = <span class="keyword">new</span> <span class="keyword">int</span>[capacity];&#125;</span><br><span class="line">    ~BaseArray()&#123;<span class="keyword">delete</span> [] mem;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> val)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getCapacity</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> capacity;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> :</span> <span class="keyword">public</span> BaseArray&#123;</span><br><span class="line">    <span class="keyword">int</span> tos;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MyStack(<span class="keyword">int</span> capacity) : BaseArray(capacity)&#123;tos = <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">capacity</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> getCapacity();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> tos;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">MyStack <span class="title">mStack</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;스택에 삽입할 5개의 정수를 입력하라&gt;&gt; &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        mStack.push(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;스택 용량:&quot;</span> &lt;&lt; mStack.capacity() &lt;&lt; <span class="string">&quot;, 스택 크기:&quot;</span> &lt;&lt; mStack.length() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;스택의 모든 원소를 팝하여 출력한다&gt;&gt; &quot;</span>;</span><br><span class="line">    <span class="keyword">while</span>(mStack.length() != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; mStack.pop() &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">&quot;스택의 현재 크기 : &quot;</span> &lt;&lt; mStack.length() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BaseArray::put</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    mem[index] = val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BaseArray::get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mem[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyStack::push</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    put(tos, n);</span><br><span class="line">    tos++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MyStack::pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    tos--;</span><br><span class="line">    <span class="keyword">return</span> get(tos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">스택에 삽입할 <span class="number">5</span>개의 정수를 입력하라&gt;&gt; <span class="number">34</span> <span class="number">52</span> <span class="number">41</span> <span class="number">12</span> <span class="number">78</span></span><br><span class="line">스택 용량:<span class="number">100</span>, 스택 크기:<span class="number">5</span></span><br><span class="line">스택의 모든 원소를 팝하여 출력한다&gt;&gt; <span class="number">78</span> <span class="number">12</span> <span class="number">41</span> <span class="number">52</span> <span class="number">34</span> </span><br><span class="line">스택의 현재 크기 : <span class="number">0</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><hr><h1 id="Day-13"><a href="#Day-13" class="headerlink" title="Day 13"></a>Day 13</h1><h2 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h2><ul><li>인터페이스만 선언하고 구현을 분리하여 작업자마다 다양한 구현 가능</li><li>사용자는 구현의 내용을 모르지만 인터페이스에 선언된 순수 가상 함수가 구현되어있기 때문에 호출하여 사용하기만 하면 됨</li></ul><blockquote><p>shape.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span>&#123;</span></span><br><span class="line">    Shape *next;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>= <span class="number">0</span>; <span class="comment">// 순수 가상 함수</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Shape()&#123;next = <span class="literal">NULL</span>;&#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~Shape()&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span></span>&#123;draw();&#125;</span><br><span class="line">    <span class="function">Shape *<span class="title">add</span><span class="params">(Shape *p)</span></span>&#123;<span class="keyword">this</span>-&gt;next = p; <span class="keyword">return</span> p;&#125;;</span><br><span class="line">    <span class="function">Shape *<span class="title">getNext</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> next;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> :</span> <span class="keyword">public</span> Shape&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Circle&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">    ~Circle()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;del Circle&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span> :</span> <span class="keyword">public</span> Shape&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Rect&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">    ~Rect()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;del Rect&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Shape *pStart = <span class="literal">NULL</span>;</span><br><span class="line">    Shape *pLast;</span><br><span class="line">    pStart = <span class="keyword">new</span> Circle();</span><br><span class="line">    pLast = pStart;</span><br><span class="line">    pLast = pLast-&gt;add(<span class="keyword">new</span> Rect());</span><br><span class="line">    pLast = pLast-&gt;add(<span class="keyword">new</span> Rect());</span><br><span class="line">    pLast = pLast-&gt;add(<span class="keyword">new</span> Circle());</span><br><span class="line">    pLast = pLast-&gt;add(<span class="keyword">new</span> Rect());</span><br><span class="line">    Shape *p = pStart;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        p-&gt;paint();</span><br><span class="line">        p = p-&gt;getNext();</span><br><span class="line">    &#125;</span><br><span class="line">    p = pStart;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        Shape *q = p-&gt;getNext();</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        p = q;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Circle</span><br><span class="line">Rect</span><br><span class="line">Rect</span><br><span class="line">Circle</span><br><span class="line">Rect</span><br><span class="line">del Circle</span><br><span class="line">del Rect</span><br><span class="line">del Rect</span><br><span class="line">del Circle</span><br><span class="line">del Rect</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Abstract-Class"><a href="#Abstract-Class" class="headerlink" title="Abstract Class"></a>Abstract Class</h2><ul><li>최소한 하나의 순수 가상 함수를 가진 클래스</li><li>온전한 클래스가 아니므로 객체 생성 불가능</li><li>추상 클래스의 포인터는 선언 가능</li><li>순수 가상 함수를 통해 파생 클래스에서 구현할 함수의 형태(원형)을 보여주는 인터페이스 역할</li></ul><blockquote><p>calculator.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;정수 2개를 입력하세요&gt;&gt;&quot;</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        input();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;계산된 값은 &quot;</span> &lt;&lt; calc(a, b) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adder</span> :</span> <span class="keyword">public</span> Calculator&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> a + b;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subtract</span> :</span> <span class="keyword">public</span> Calculator&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> a - b;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Calculator *c;</span><br><span class="line">    c = <span class="keyword">new</span> Adder;</span><br><span class="line">    c-&gt;run();</span><br><span class="line">    c = <span class="keyword">new</span> Subtract;</span><br><span class="line">    c-&gt;run();</span><br><span class="line">    <span class="keyword">delete</span> c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">정수 <span class="number">2</span>개를 입력하세요&gt;&gt;<span class="number">4</span> <span class="number">3</span></span><br><span class="line">계산된 값은 <span class="number">7</span></span><br><span class="line">정수 <span class="number">2</span>개를 입력하세요&gt;&gt;<span class="number">4</span> <span class="number">3</span></span><br><span class="line">계산된 값은 <span class="number">1</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Generalization-of-Function"><a href="#Generalization-of-Function" class="headerlink" title="Generalization of Function"></a>Generalization of Function</h2><ul><li>Generic 혹은 일반화<ul><li>함수나 클래스를 일반화시키고, 매개변수 타입을 지정하여 틀에서 찍어내듯이 함수나 클래스 코드를 생산하는 기법</li></ul></li><li>Template<ul><li>함수나 클래스를 일반화하는 <code>C++</code> 도구</li><li><code>template</code> 키워드로 함수나 클래스 선언</li><li>Generic type - 일반화를 위한 Data type</li></ul></li></ul><blockquote><p>sum.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">Sum</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>)&#123;</span></span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Sum(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Sum(<span class="number">1.1</span>, <span class="number">2.2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Sum(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">3.3</span></span><br><span class="line">c</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>search.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">bool</span> <span class="title">search</span>(<span class="title">T</span> <span class="title">one</span>, <span class="title">T</span> <span class="title">arr</span>[], <span class="title">int</span> <span class="title">size</span>)&#123;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] == one)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x[] = &#123;<span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">5</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(search(<span class="number">100</span>, x, <span class="keyword">sizeof</span>(x) / <span class="number">4</span>))</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;100이 배열 x에 포함되어 있다.&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;100이 배열 x에 포함되어 있지 않다.&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> c[] = &#123;<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(search(<span class="string">&#x27;e&#x27;</span>, c, <span class="number">5</span>))</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;e가 배열 x에 포함되어 있다.&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;e가 배열 x에 포함되어 있지 않다.&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span>이 배열 x에 포함되어 있다.</span><br><span class="line">e가 배열 x에 포함되어 있다.</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Generalization-of-Class"><a href="#Generalization-of-Class" class="headerlink" title="Generalization of Class"></a>Generalization of Class</h2><ul><li>선언 : <code>template&lt;class T&gt;</code><ul><li>class의 정의 앞에 선언</li><li>선언부, 구현부 - 멤버 함수 앞 선언</li><li><code>T class&lt;T&gt;::function(T param);</code></li></ul></li><li>일반화할 변수만 <code>T</code>로 선언</li></ul><blockquote><p>generic.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Point(<span class="keyword">int</span> x = <span class="number">0</span>, <span class="keyword">int</span> y = <span class="number">0</span>):x(x), y(y)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;(&#x27;</span> &lt;&lt; x &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; y &lt;&lt; <span class="string">&#x27;)&#x27;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">MyStack</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> tos;</span><br><span class="line">    T data[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MyStack();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(T element)</span></span>;</span><br><span class="line">    <span class="function">T <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MyStack&lt;<span class="keyword">int</span> *&gt; ipStack;</span><br><span class="line">    <span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        p[i] = i * <span class="number">10</span>;</span><br><span class="line">    ipStack.push(p);</span><br><span class="line">    <span class="keyword">int</span> *q = ipStack.pop();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; q[i] &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">delete</span> [] p;</span><br><span class="line"></span><br><span class="line">    MyStack&lt;Point&gt; pointStack;</span><br><span class="line">    Point a(2, 3), b;</span><br><span class="line">    pointStack.push(a);</span><br><span class="line">    b = pointStack.pop();</span><br><span class="line">    b.show();</span><br><span class="line"></span><br><span class="line">    MyStack&lt;Point *&gt; pStack;</span><br><span class="line">    pStack.push(<span class="keyword">new</span> Point(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line">    Point *pPoint = pStack.pop();</span><br><span class="line">    pPoint-&gt;show();</span><br><span class="line"></span><br><span class="line">    MyStack&lt;<span class="built_in">string</span>&gt; stringStack;</span><br><span class="line">    <span class="built_in">string</span> s = <span class="string">&quot;C++&quot;</span>;</span><br><span class="line">    stringStack.push(s);</span><br><span class="line">    stringStack.push(<span class="string">&quot;Zerohertz&quot;</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; stringStack.pop() &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; stringStack.pop() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">MyStack</span>&lt;T&gt;:</span>:MyStack()&#123;</span><br><span class="line">    tos = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">MyStack</span>&lt;T&gt;:</span>:push(T element)&#123;</span><br><span class="line">    <span class="keyword">if</span>(tos == <span class="number">99</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Stack full&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tos++;</span><br><span class="line">    data[tos] = element;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">MyStack</span>&lt;T&gt;:</span>:pop()&#123;</span><br><span class="line">    T Data;</span><br><span class="line">    <span class="keyword">if</span>(tos == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Stack empty&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Data = data[tos--];</span><br><span class="line">    <span class="keyword">return</span> Data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span><span class="number">10</span><span class="number">20</span></span><br><span class="line">(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line">ZerohertzC++</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>gclass.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="title">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">GClass</span>&#123;</span></span><br><span class="line">    T1 data1;</span><br><span class="line">    T2 data2;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    GClass()&#123;data1 = <span class="number">0</span>; data2 = <span class="number">0</span>;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(T1 a, T2 b)</span></span>&#123;</span><br><span class="line">        data1 = a; data2 = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">(T1 &amp;a, T2 &amp;b)</span></span>&#123;</span><br><span class="line">        a = data1; b = data2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">double</span> b;</span><br><span class="line">    GClass&lt;<span class="keyword">int</span>, <span class="keyword">double</span>&gt; x;</span><br><span class="line">    x.<span class="built_in">set</span>(<span class="number">2</span>, <span class="number">0.5</span>);</span><br><span class="line">    x.get(a, b);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;\tb = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">float</span> d;</span><br><span class="line">    GClass&lt;<span class="keyword">char</span>, <span class="keyword">float</span>&gt; y;</span><br><span class="line">    y.<span class="built_in">set</span>(<span class="string">&#x27;m&#x27;</span>, <span class="number">12.5</span>);</span><br><span class="line">    y.get(c, d);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; <span class="string">&quot;\td = &quot;</span> &lt;&lt; d &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">2</span>b = <span class="number">0.5</span></span><br><span class="line">c = md = <span class="number">12.5</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Quiz-8"><a href="#Quiz-8" class="headerlink" title="Quiz"></a>Quiz</h2><blockquote><p>quiz.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span>&#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> width, height;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Shape(<span class="built_in">string</span> n = <span class="string">&quot;&quot;</span>, <span class="keyword">int</span> w = <span class="number">0</span>, <span class="keyword">int</span> h = <span class="number">0</span>)&#123;name = n; width = w; height = h;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> name;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Oval</span> :</span> <span class="keyword">public</span> Shape&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Oval(<span class="built_in">string</span> n = <span class="string">&quot;&quot;</span>, <span class="keyword">int</span> w = <span class="number">0</span>, <span class="keyword">int</span> h = <span class="number">0</span>):Shape(n, w, h)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">3.14</span> * width * height;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span> :</span> <span class="keyword">public</span> Shape&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Rect(<span class="built_in">string</span> n = <span class="string">&quot;&quot;</span>, <span class="keyword">int</span> w = <span class="number">0</span>, <span class="keyword">int</span> h = <span class="number">0</span>):Shape(n, w, h)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> width * height;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangular</span> :</span> <span class="keyword">public</span> Shape&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Triangular(<span class="built_in">string</span> n = <span class="string">&quot;&quot;</span>, <span class="keyword">int</span> w = <span class="number">0</span>, <span class="keyword">int</span> h = <span class="number">0</span>):Shape(n, w, h)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> width * height / <span class="number">2</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Shape *p[<span class="number">3</span>];</span><br><span class="line">    p[<span class="number">0</span>] = <span class="keyword">new</span> Oval(<span class="string">&quot;빈대떡&quot;</span>, <span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    p[<span class="number">1</span>] = <span class="keyword">new</span> Rect(<span class="string">&quot;찰떡&quot;</span>, <span class="number">30</span>, <span class="number">40</span>);</span><br><span class="line">    p[<span class="number">2</span>] = <span class="keyword">new</span> Triangular(<span class="string">&quot;토스트&quot;</span>, <span class="number">30</span>, <span class="number">40</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; p[i]-&gt;getName() &lt;&lt; <span class="string">&quot; 넓이는 &quot;</span> &lt;&lt; p[i]-&gt;getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) <span class="keyword">delete</span> p[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">빈대떡 넓이는 <span class="number">628</span></span><br><span class="line">찰떡 넓이는 <span class="number">1200</span></span><br><span class="line">토스트 넓이는 <span class="number">600</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><hr><h1 id="Day-14"><a href="#Day-14" class="headerlink" title="Day 14"></a>Day 14</h1><h2 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h2><ul><li>STL(Standard Template Library)<ul><li>표준 템플릿 라이브러리</li><li>많은 제네릭 클래스와 제네릭 함수 포함</li></ul></li><li>STL의 구성<ul><li>컨테이너 : 템플릿 클래스<ul><li>데이터를 담아두는 자료 구조를 표현한 클래스</li><li>리스트, 큐, 스택, 맵, 셋, 벡터</li></ul></li><li>iterator : 컨테이너 원소에 대한 포인터<ul><li>컨테이너의 원소들을 순회하면서 접근하기 위해 만들어진 컨테이너 원소에 대한 포인터</li></ul></li><li>알고리즘 : 템플릿 함수<ul><li>컨테이너 원소에 대한 복사, 검색, 삭제, 정렬 등의 기능을 구현한 템플릿 함수</li><li>컨테이너의 멤버 함수 아님</li></ul></li></ul></li></ul><blockquote><p>STL 컨테이너의 종류</p></blockquote><table><thead><tr><th align="center">컨테이너 클래스</th><th align="center">설명</th><th align="center">헤더 파일</th></tr></thead><tbody><tr><td align="center">vector</td><td align="center">동적 크기의 배열을 일반화한 클래스</td><td align="center"><code>&lt;vector&gt;</code></td></tr><tr><td align="center">deque</td><td align="center">앞뒤 모두 입력 가능한 큐 클래스</td><td align="center"><code>&lt;deque&gt;</code></td></tr><tr><td align="center">list</td><td align="center">빠른 삽입/삭제 가능한 리스트 클래스</td><td align="center"><code>&lt;list&gt;</code></td></tr><tr><td align="center">set</td><td align="center">정렬된 순서로 값을 저장하는 집합 클래스, 값은 유일</td><td align="center"><code>&lt;set&gt;</code></td></tr><tr><td align="center">map</td><td align="center">(key, value)쌍으로 값을 저장하는 맵 클래스</td><td align="center"><code>&lt;map&gt;</code></td></tr><tr><td align="center">stack</td><td align="center">스택을 일반화한 클래스</td><td align="center"><code>&lt;stack&gt;</code></td></tr><tr><td align="center">queue</td><td align="center">큐를 일반화한 클래스</td><td align="center"><code>&lt;queue&gt;</code></td></tr></tbody></table><blockquote><p>STL iterator의 종류</p></blockquote><table><thead><tr><th align="center">iterator의 종류</th><th align="center">iterator에 <code>++</code> 연산 후 방향</th><th align="center">read/write</th></tr></thead><tbody><tr><td align="center">iterator</td><td align="center">다음 원소로 전진</td><td align="center">read/write</td></tr><tr><td align="center">const_iterator</td><td align="center">다음 원소로 전진</td><td align="center">read</td></tr><tr><td align="center">reverse_iterator</td><td align="center">지난 원소로 후진</td><td align="center">read/write</td></tr><tr><td align="center">const_reverse_iterator</td><td align="center">지난 원소로 후진</td><td align="center">read</td></tr></tbody></table><blockquote><p>STL 알고리즘 함수들</p></blockquote><ul><li>copy</li><li>merge</li><li>random</li><li>rotate</li><li>equal</li><li>min</li><li>remove</li><li>search</li><li>find</li><li>move</li><li>replace</li><li>sort</li><li>max</li><li>partition</li><li>reverse</li><li>swap</li></ul><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><ul><li>가변 길이 배열을 구현한 <code>Generic</code> 클래스</li><li>원소의 저장, 삭제, 검색 등 다양한 멤버 함수 지원</li><li>벡터에 저장된 원소는 인덱스로 접근 가능</li></ul><blockquote><p>vector.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line">    v.push_back(<span class="number">1</span>);</span><br><span class="line">    v.push_back(<span class="number">2</span>);</span><br><span class="line">    v.push_back(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; v[i] &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    v[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> n = v[<span class="number">2</span>];</span><br><span class="line">    v.at(<span class="number">2</span>) = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; v[i] &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="number">2</span><span class="number">3</span></span><br><span class="line"><span class="number">10</span><span class="number">2</span><span class="number">5</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h2><ul><li>반복자라고도 부름</li><li><code>*</code>, <code>++</code> 연산자 사용 가능</li><li>컨테이너의 원소를 가리키는 포인터</li></ul><blockquote><p>iterator.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;5개의 정수를 입력하시오.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        v.push_back(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort(v.begin(), v.end()); <span class="comment">// sort(v.begin() + a, v.begin() + b) -&gt; a에서 b - 1까지</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(it = v.begin(); it != v.end(); it++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>개의 정수를 입력하시오.</span><br><span class="line"><span class="number">30</span> <span class="number">-7</span> <span class="number">250</span> <span class="number">6</span> <span class="number">120</span></span><br><span class="line"><span class="number">-7</span><span class="number">6</span><span class="number">30</span><span class="number">120</span><span class="number">250</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><ul><li>탐색(<code>find</code>) : 컨테이너 안에서 특정한 자료를 찾음</li><li>정렬(<code>sort</code>) : 자료들을 크기 순으로 정렬<ul><li><code>param1</code> : 정렬을 시작한 원소의 주소</li><li><code>param2</code> : 소팅 범위의 마지막 원소 다음 주소</li></ul></li><li>반전(<code>reverse</code>) : 자료들의 순서 역순</li><li>삭제(<code>remove</code>) : 조건이 만족되는 자료 삭제</li><li>변환(<code>transform</code>) : 컨테이너 요소들을 사용자가 제공하는 변환 함수에 따라 변환</li></ul><blockquote><p>algorithm.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> radius;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Circle(<span class="keyword">int</span> radius = <span class="number">1</span>, <span class="built_in">string</span> name = <span class="string">&quot;&quot;</span>):radius(radius), name(name)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">3.14</span> * radius * radius;&#125;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> name;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(Circle b);</span><br><span class="line">    <span class="keyword">friend</span> ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;os, <span class="built_in">vector</span>&lt;Circle&gt; &amp;b);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(<span class="built_in">vector</span>&lt;Circle&gt; vec)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Circle&gt; v;</span><br><span class="line">    v.push_back(Circle(<span class="number">2</span>, <span class="string">&quot;waffle&quot;</span>));</span><br><span class="line">    v.push_back(Circle(<span class="number">3</span>, <span class="string">&quot;pizza&quot;</span>));</span><br><span class="line">    v.push_back(Circle(<span class="number">1</span>, <span class="string">&quot;donut&quot;</span>));</span><br><span class="line">    v.push_back(Circle(<span class="number">5</span>, <span class="string">&quot;pizzaLarge&quot;</span>));</span><br><span class="line">    printVector(v);</span><br><span class="line">    <span class="comment">// int it = v.size() - 1;</span></span><br><span class="line">    sort(v.begin(), v.end()); <span class="comment">// sort(&amp;v[0], &amp;v[it]);</span></span><br><span class="line">    printVector(v);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">&quot;프렌드함수 operator&lt;&lt;로 출력하는 경우&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> Circle::<span class="keyword">operator</span>&lt;(Circle b)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;radius &lt; b.radius)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;os, <span class="built_in">vector</span>&lt;Circle&gt; &amp;b)&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Circle&gt;::iterator it;</span><br><span class="line">    os &lt;&lt; <span class="string">&quot;모든 원소를 출력한다.&gt;&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(it = b.begin(); it != b.end(); it++)</span><br><span class="line">        os &lt;&lt; it-&gt;getName() &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">    os &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(<span class="built_in">vector</span>&lt;Circle&gt; vec)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;모든 원소를 출력한다.&gt;&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it = vec.begin(); it != vec.end(); it++) <span class="comment">// auto는 자동형변환</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; it-&gt;getName() &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">모든 원소를 출력한다.&gt;&gt;waffle   pizza   donut   pizzaLarge</span><br><span class="line">모든 원소를 출력한다.&gt;&gt;donut    waffle  pizza   pizzaLarge</span><br><span class="line"></span><br><span class="line">프렌드함수 <span class="keyword">operator</span>&lt;&lt;로 출력하는 경우</span><br><span class="line">모든 원소를 출력한다.&gt;&gt;donut    waffle  pizza   pizzaLarge</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/c-c/">C, C++</category>
      
      <category domain="https://zerohertz.github.io/categories/c-c/basic/">Basic</category>
      
      
      <category domain="https://zerohertz.github.io/tags/c-c/">C, C++</category>
      
      
      <comments>https://zerohertz.github.io/computer-programming/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Selection and Iteration</title>
      <link>https://zerohertz.github.io/selection-and-iteration/</link>
      <guid>https://zerohertz.github.io/selection-and-iteration/</guid>
      <pubDate>Thu, 02 Jul 2020 06:30:43 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;제어문&quot;&gt;&lt;a href=&quot;#제어문&quot; class=&quot;headerlink&quot; title=&quot;제어문&quot;&gt;&lt;/a&gt;제어문&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;제어문(Control statement)을 사용하여 조건에 의해 문장들의 실행 순서 변경&lt;ul&gt;
&lt;li&gt;조건문 : 조건에 따라서 여러 개의 실행 경로 가운데 하나를 선택&lt;ul&gt;
&lt;li&gt;&lt;code&gt;if-else&lt;/code&gt; 문장&lt;/li&gt;
&lt;li&gt;&lt;code&gt;switch&lt;/code&gt; 문장&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;반복문 : 조건이 유지되는 한, 혹은 정해진 횟수만큼 처리를 되풀이하는 문장&lt;ul&gt;
&lt;li&gt;&lt;code&gt;for&lt;/code&gt; 문장&lt;/li&gt;
&lt;li&gt;&lt;code&gt;while&lt;/code&gt; 문장&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="제어문"><a href="#제어문" class="headerlink" title="제어문"></a>제어문</h1><ul><li>제어문(Control statement)을 사용하여 조건에 의해 문장들의 실행 순서 변경<ul><li>조건문 : 조건에 따라서 여러 개의 실행 경로 가운데 하나를 선택<ul><li><code>if-else</code> 문장</li><li><code>switch</code> 문장</li></ul></li><li>반복문 : 조건이 유지되는 한, 혹은 정해진 횟수만큼 처리를 되풀이하는 문장<ul><li><code>for</code> 문장</li><li><code>while</code> 문장</li></ul></li></ul></li></ul><a id="more"></a><hr><h1 id="조건문"><a href="#조건문" class="headerlink" title="조건문"></a>조건문</h1><h2 id="if문"><a href="#if문" class="headerlink" title="if문"></a>if문</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(조건식<span class="number">1</span>)&#123;</span><br><span class="line">    문장<span class="number">1</span>; <span class="comment">// 조건식1이 true이면 실행</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(조건식<span class="number">2</span>)&#123;</span><br><span class="line">    문장<span class="number">2</span>; <span class="comment">// 조건식1이 false이고 조건식2가 true이면 실행</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    문장<span class="number">3</span>; <span class="comment">// 조건식1과 조건식2가 false이면 실행</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>&#123;&#125;</code>로 묶인 문장 그룹핑을 복합문(Compound statement) 또는 블록(Block)이라고 함<ul><li>하나의 작업으로 분류될 수 있는 문장들을 묶는데 사용</li><li>단일문이 들어갈 수 있는 곳이면 어디나 단일문 대신 넣을 수 있음</li></ul></li></ul><hr><h1 id="반복문"><a href="#반복문" class="headerlink" title="반복문"></a>반복문</h1><ul><li>while문 : 조건이 만족되면 반복을 계속하는 구조, 미리 반복 횟수를 알 수 없음</li><li>for문 : 정해진 횟수만큼 반복</li></ul><h2 id="while문"><a href="#while문" class="headerlink" title="while문"></a>while문</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(조건식)&#123;</span><br><span class="line">    반복문장</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>무한 루프 : <code>while(true)</code></li></ul><h2 id="for문"><a href="#for문" class="headerlink" title="for문"></a>for문</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(초기식 ; 조건식 ; 증감식)&#123;</span><br><span class="line">    반복문장</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>무한 루프 : <code>for( ; ; )</code></li></ul><hr><h1 id="break문과-continue문"><a href="#break문과-continue문" class="headerlink" title="break문과 continue문"></a>break문과 continue문</h1><ul><li>break문 : 반복 루프를 벗어나기 위하여 사용<ul><li>반복 루프 안에서 실행되면 반복 루프는 즉시 중단되고 반복 루프 다음에 있는 문장 실행</li></ul></li><li>continue문 : 현재 수행하고 있는 반복 과정의 나머지를 건너뛰고 다음 반복 과정을 강제적 실행<ul><li>반복 루프 안에서 실행되면 continue문 다음에 있는 후속 코드들은 실행되지 않고 건너뜀</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/c-c/">C, C++</category>
      
      <category domain="https://zerohertz.github.io/categories/c-c/basic/">Basic</category>
      
      
      <category domain="https://zerohertz.github.io/tags/c-c/">C, C++</category>
      
      
      <comments>https://zerohertz.github.io/selection-and-iteration/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
