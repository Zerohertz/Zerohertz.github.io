<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Zerohertz</title>
    <link>https://zerohertz.github.io/</link>
    
    <atom:link href="https://zerohertz.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>#800a0a</description>
    <pubDate>Fri, 18 Sep 2020 15:53:34 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>라즈베리파이로 간단한 서버 만들기</title>
      <link>https://zerohertz.github.io/raspberry-pi-server/</link>
      <guid>https://zerohertz.github.io/raspberry-pi-server/</guid>
      <pubDate>Fri, 18 Sep 2020 11:29:40 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;RASPBERRY-PI-OS-설치&quot;&gt;&lt;a href=&quot;#RASPBERRY-PI-OS-설치&quot; class=&quot;headerlink&quot; title=&quot;RASPBERRY PI OS 설치&quot;&gt;&lt;/a&gt;RASPBERRY PI OS 설치&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.raspberrypi.org/downloads/&quot;&gt;RASPBERRY PI OS&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;위 사이트에서 프로그램을 받은 뒤, SD카드 연결 후 아래와 같이 WRITE하면 설치가 된다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/42334717/93593200-a096ee00-f9ee-11ea-9ea0-e0eb7fb979b4.png&quot; alt=&quot;Raspbian&quot;&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="RASPBERRY-PI-OS-설치"><a href="#RASPBERRY-PI-OS-설치" class="headerlink" title="RASPBERRY PI OS 설치"></a>RASPBERRY PI OS 설치</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmFzcGJlcnJ5cGkub3JnL2Rvd25sb2Fkcy8=">RASPBERRY PI OS<i class="fa fa-external-link-alt"></i></span></p><blockquote><p>위 사이트에서 프로그램을 받은 뒤, SD카드 연결 후 아래와 같이 WRITE하면 설치가 된다.</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/93593200-a096ee00-f9ee-11ea-9ea0-e0eb7fb979b4.png" alt="Raspbian"></p><a id="more"></a><hr><h1 id="ssh-연결-허용"><a href="#ssh-연결-허용" class="headerlink" title="ssh 연결 허용"></a>ssh 연결 허용</h1><blockquote><p>RASPBERRY PI OS는 기본적으로 ssh가 disable이므로 설정을 바꿔줘야 한다. SD카드의 최상위 디렉토리에 확장자가 없는 ssh라는 파일을 생성하면 ssh가 enable이 된다.</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/93593734-975a5100-f9ef-11ea-98c6-06172342eaad.png" alt="ssh"></p><blockquote><p>만약 WiFi를 통하여 라즈베리 파이를 이용할 예정이라면, 아래의 이름과 소스를 작성하여 최상위 디렉토리에 저장해야한다.</p></blockquote><figure class="highlight cpp"><figcaption><span>wpa_supplicant.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class="line">update_config=<span class="number">1</span></span><br><span class="line">network=&#123;</span><br><span class="line">    ssid=<span class="string">&quot;WiFi 이름&quot;</span></span><br><span class="line">    psk=<span class="string">&quot;WiFi 비밀번호&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="라즈베리-파이의-IP"><a href="#라즈베리-파이의-IP" class="headerlink" title="라즈베리 파이의 IP"></a>라즈베리 파이의 IP</h1><blockquote><p>라즈베리 파이에 연결된 공유기의 Gateway 주소로 접속 후, 라즈베리 파이의 IP를 알아낸다. Gateway는 아래의 코드를 입력하여 알 수 있다.</p></blockquote><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.css">            <link rel="stylesheet" href="//cdn.jsdelivr.net/npm/prismjs/themes/prism-tomorrow.css">            <script src="//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.js"></script>            <div id='zerohertz1' style='height: 30px'></div>            <script>        new GDemo('#zerohertz1')          .openApp('terminal', {minHeight: '30px', windowTitle: 'zerohertz@zerohertz: ~', promptString: 'zerohertz@zerohertz ~'})    .command(`route <span class="token keyword">get</span> default`, {onCompleteDelay: 300})        .respond(``)        .end();    </script><br/><br/><p><img src="https://user-images.githubusercontent.com/42334717/93594589-2025bc80-f9f1-11ea-869b-eecafaf3e4d8.png" alt="IP"></p><hr><h1 id="ssh-접속"><a href="#ssh-접속" class="headerlink" title="ssh 접속"></a>ssh 접속</h1><blockquote><p>위의 IP를 이용해 ssh로 접속할 수 있다.</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/93594705-4f3c2e00-f9f1-11ea-915d-cf68fa265a84.png" alt="ssh"></p><p><img src="https://user-images.githubusercontent.com/42334717/93594775-75fa6480-f9f1-11ea-9b75-73e182a4ef75.png" alt="ssh"></p><hr><h1 id="고정-IP-할당"><a href="#고정-IP-할당" class="headerlink" title="고정 IP 할당"></a>고정 IP 할당</h1><blockquote><p>WiFi 내에서 라즈베리 파이가 항상 같은 IP(192.168.123.123)를 갖도록 설정하였다.</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/93595293-71827b80-f9f2-11ea-9afd-218e8805b629.png" alt="IP_Config"></p><p><img src="https://user-images.githubusercontent.com/42334717/93595386-a098ed00-f9f2-11ea-9600-c2e1231ae1a0.png" alt="IP_Config"></p><blockquote><p>이후 공유기 자체의 IP를 고정 IP로 설정을 바꿔준다. 또한 포트포워딩을 통해 내부 포트는 22로, 외부 포트는 자유로 설정하고 IP는 위에서 라즈베리 파이에 할당한 IP를 기입한다.</p></blockquote><hr><h1 id="외부에서-ssh-접속"><a href="#외부에서-ssh-접속" class="headerlink" title="외부에서 ssh 접속"></a>외부에서 ssh 접속</h1><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.css">            <link rel="stylesheet" href="//cdn.jsdelivr.net/npm/prismjs/themes/prism-tomorrow.css">            <script src="//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.js"></script>            <div id='zerohertz2' style='height: 30px'></div>            <script>        new GDemo('#zerohertz2')          .openApp('terminal', {minHeight: '30px', windowTitle: 'zerohertz@zerohertz: ~', promptString: 'zerohertz@zerohertz ~'})    .command(`ssh pi@xxx.xxx.xxx.xxx<span class="token punctuation">(</span>고정IP<span class="token punctuation">)</span> <span class="token operator">-</span>p<span class="token punctuation">(</span>외부 포트<span class="token punctuation">)</span>`, {onCompleteDelay: 300})        .respond(``)        .end();    </script><br/><br/><blockquote><p>만약 외부 포트를 22로 할당해주었다면, -p를 제외하고 실행해도 무방하다.</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/raspberrypi/">RaspberryPi</category>
      
      
      <category domain="https://zerohertz.github.io/tags/raspberrypi/">RaspberryPi</category>
      
      
      <comments>https://zerohertz.github.io/raspberry-pi-server/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Manufacturing process laboratory</title>
      <link>https://zerohertz.github.io/manufacturing-process-laboratory/</link>
      <guid>https://zerohertz.github.io/manufacturing-process-laboratory/</guid>
      <pubDate>Wed, 02 Sep 2020 04:20:21 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;측정&quot;&gt;&lt;a href=&quot;#측정&quot; class=&quot;headerlink&quot; title=&quot;측정&quot;&gt;&lt;/a&gt;측정&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;측정 : 도구 또는 장치를 이용하여 물리량(길이, 온도 질량, 압력 등)을 수치로 나타낸 것&lt;/li&gt;
&lt;li&gt;정밀측정(Precision measurement) : 기계가공 부품 또는 조립 완성품에 대해 치수, 각도, 형상 및 위치, 표면상태 등을 가공 도중 또는 완료 후에 측정과 검사를 하는 것&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="측정"><a href="#측정" class="headerlink" title="측정"></a>측정</h1><ul><li>측정 : 도구 또는 장치를 이용하여 물리량(길이, 온도 질량, 압력 등)을 수치로 나타낸 것</li><li>정밀측정(Precision measurement) : 기계가공 부품 또는 조립 완성품에 대해 치수, 각도, 형상 및 위치, 표면상태 등을 가공 도중 또는 완료 후에 측정과 검사를 하는 것</li></ul><a id="more"></a><h2 id="측정의-목적"><a href="#측정의-목적" class="headerlink" title="측정의 목적"></a>측정의 목적</h2><blockquote><p>다른 기계 및 장소에서 제작되어도 조립에 지장이 없고, 치수의 표준화로 국제규격에 일치해야 한다.</p></blockquote><ul><li>도기(Standard) : 직접 측정<ul><li>일정한 길이 또는 각도를 눈금 또는 측정 가능한 형상으로 구체화한 것</li><li>Ex.) 각도기, 줄자, 삼각자, 버니어 캘리퍼스, 마이크로 미터 등</li></ul></li><li>정반(Surface plate)<ul><li>기계 부품의 조립 및 검사를 위해 만든 두꺼운 평판으로 금속 또는 화강암으로 만듬</li><li>표면은 정밀하게 다듬어진 평면을 가지고 있고, 내마모성 재료의 블록 또는 테이블</li><li>정반의 종류<ul><li>주철 정반 : 보통 주철로 주조, 가공하여 다듬질한 것(철로 만든 것)</li><li>석 정반 : 자연석(화강암)을 가공하여 다듬질한 것(돌로 만든 것)</li></ul></li><li>정밀 정반에 요구되는 조건<ul><li>사용면의 평면도가 정확해야 함</li><li>높은 하중에 충분한 강성을 가져야 함</li><li>내마모성 재료를 사용해야 함</li><li>온도 변형이 작아야 함</li><li>사용면 위에서 밀착(Wringing)을 방지할 수 있어야 함</li></ul></li><li>석 정반의 장단점<ul><li>장점<ul><li>온도에 의한 변형이 적음</li><li>경도가 높고 내마모성이며 수명이 김</li></ul></li><li>단점<ul><li>단순한 형상으로 용도 한정적</li><li>파손 취약</li><li>사용면의 평면도 수정 어려움</li></ul></li></ul></li></ul></li></ul><h2 id="길이의-측정-Length-of-the-measure-ment"><a href="#길이의-측정-Length-of-the-measure-ment" class="headerlink" title="길이의 측정(Length of the measure ment)"></a>길이의 측정(Length of the measure ment)</h2><h3 id="버니어-캘리퍼스-Vernier-calipers"><a href="#버니어-캘리퍼스-Vernier-calipers" class="headerlink" title="버니어 캘리퍼스(Vernier calipers)"></a>버니어 캘리퍼스(Vernier calipers)</h3>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/mechanical-engineering/">Mechanical Engineering</category>
      
      
      <category domain="https://zerohertz.github.io/tags/mechanical-engineering/">Mechanical Engineering</category>
      
      
      <comments>https://zerohertz.github.io/manufacturing-process-laboratory/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CAM and CNC</title>
      <link>https://zerohertz.github.io/cam-and-cnc/</link>
      <guid>https://zerohertz.github.io/cam-and-cnc/</guid>
      <pubDate>Wed, 02 Sep 2020 04:19:07 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;h2 id=&quot;유연생산시스템-FMS&quot;&gt;&lt;a href=&quot;#유연생산시스템-FMS&quot; class=&quot;headerlink&quot; title=&quot;유연생산시스템(FMS)&quot;&gt;&lt;/a&gt;유연생산시스템(FMS)&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;생산성과 유연성의 양립을 목적으로 한 시스템으로서, 가공, 반송, 자재의 착탈, 제어의 기능을 유기적으로 결합한 자동화된 생산시스템&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;FMS(Flexible Manufacturing System) : 기계와 외부적인 연결&lt;ul&gt;
&lt;li&gt;다양한 순서의 자동 재료흐름&lt;/li&gt;
&lt;li&gt;AGV(Automatic Guidied Vehicle), 산업용 Robot, Tooling, Pallet, Fixture&lt;/li&gt;
&lt;li&gt;공장무인화&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FMC(Flexible Manufacturing Cell) : 독자적으로 작동&lt;ul&gt;
&lt;li&gt;Machining center : 공작기계 내에서의 Pallet를 이용한 자동생산, 자동공구교환&lt;/li&gt;
&lt;li&gt;기계간 Pallet는 도움 필요&lt;/li&gt;
&lt;li&gt;40 ~ 800 부품&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FTL(Flexible Transfer Line) : 기계와 내부적인 연결&lt;ul&gt;
&lt;li&gt;자동재료 이송시스템, NC 공작기계, 자동헤드 교환장치&lt;/li&gt;
&lt;li&gt;직접적인 재료흐름, 공작물의 순환운동&lt;/li&gt;
&lt;li&gt;1,500 ~ 15,000&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;특성\종류&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Transfer Line(FTL)&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;FMS&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Standard-alone NC machines(FMC)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;생산량&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;상&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;중&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;하&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;제품종류/유연성&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;하&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;중&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;상&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><h2 id="유연생산시스템-FMS"><a href="#유연생산시스템-FMS" class="headerlink" title="유연생산시스템(FMS)"></a>유연생산시스템(FMS)</h2><blockquote><p>생산성과 유연성의 양립을 목적으로 한 시스템으로서, 가공, 반송, 자재의 착탈, 제어의 기능을 유기적으로 결합한 자동화된 생산시스템</p></blockquote><ul><li>FMS(Flexible Manufacturing System) : 기계와 외부적인 연결<ul><li>다양한 순서의 자동 재료흐름</li><li>AGV(Automatic Guidied Vehicle), 산업용 Robot, Tooling, Pallet, Fixture</li><li>공장무인화</li></ul></li><li>FMC(Flexible Manufacturing Cell) : 독자적으로 작동<ul><li>Machining center : 공작기계 내에서의 Pallet를 이용한 자동생산, 자동공구교환</li><li>기계간 Pallet는 도움 필요</li><li>40 ~ 800 부품</li></ul></li><li>FTL(Flexible Transfer Line) : 기계와 내부적인 연결<ul><li>자동재료 이송시스템, NC 공작기계, 자동헤드 교환장치</li><li>직접적인 재료흐름, 공작물의 순환운동</li><li>1,500 ~ 15,000</li></ul></li></ul><table><thead><tr><th align="center">특성\종류</th><th align="center">Transfer Line(FTL)</th><th align="center">FMS</th><th align="center">Standard-alone NC machines(FMC)</th></tr></thead><tbody><tr><td align="center">생산량</td><td align="center">상</td><td align="center">중</td><td align="center">하</td></tr><tr><td align="center">제품종류/유연성</td><td align="center">하</td><td align="center">중</td><td align="center">상</td></tr></tbody></table><a id="more"></a><ul><li>FMS 구성요소<ul><li>A group of workstations(CNC machine tools)<ul><li>Machining centers</li><li>Milling modules</li><li>Turning modules</li><li>Assembly workstations</li><li>Inspection stations</li><li>Sheet metal processing machines</li><li>Forging stations</li></ul></li><li>Automated material handling and storage systems<ul><li>AGV(Automated Guided Vehicle)</li><li>Tool transporter</li><li>Industrial robots</li><li>Pallet and fixture</li><li>Conveyor</li><li>Stacker crane</li></ul></li><li>Computer control systems<ul><li>Control of each workstation(CAM)</li><li>Distribution of control instructions to workstation</li><li>Production control</li><li>Traffic control</li><li>Work handling system monitoring</li><li>Tool control</li><li>System performance monitoring and reporting</li><li>Production planning and management</li></ul></li></ul></li></ul><h2 id="CAD-CAM"><a href="#CAD-CAM" class="headerlink" title="CAD / CAM"></a>CAD / CAM</h2><ul><li>CIM : Computer Integrated Manufacturing, 통합생산시스템<ul><li>공장 자동화 기술</li><li>Database(EDB, MDB)</li><li>통신기술</li><li>Web based</li></ul></li><li>FMS : Flexible Manufacturing System, 유연생산시스템<ul><li>공장 자동화 기술 : CAD / CAM, CNC machining</li></ul></li><li>CAD / CAM : Computer Aided Design and Computer Aided Manufacturing<ul><li>CAD : Computer를 이용한 부품의 모델링<ul><li>Wire frame : 제도용</li><li>Surface model : 금형가공용</li><li>Solid model : 해석용</li></ul></li><li>CAM : 기계가공을 위한 모델링과 CNC machine을 작동시키기 위한 NC code 생성<ul><li>Input : CAD</li><li>Output : NC code</li></ul></li><li>NC code<ul><li>NC 가공을 위한 표준화된 수치데이터 형식</li><li>Machining center의 Controller 명령문</li></ul></li><li>Part program : 가공을 위한 일련의 NC code</li></ul></li><li>CAD / CAM의 데이터 교환 : IGES, DXF, STEP</li><li>CAPP : Computer Aided Process Plan</li></ul><hr><h1 id="절삭-가공"><a href="#절삭-가공" class="headerlink" title="절삭 가공"></a>절삭 가공</h1><ul><li>절삭 가공이란?<ul><li>상대적으로 경도가 높은 날끝공구(Cutting Tool)를 사용하여 피가공물(Workpiece)의 불필요한 부분을 칩(Chip)의 형태로 제거하여 원하는 형태로 만드는 작업</li></ul></li><li>절삭 가공의 특징<ul><li>정밀 가공 가능</li><li>가공에 따른 소재 내부의 물성 변화 적음</li><li>다양한 형상가공(Flexible Process)</li><li>칩의 발생에 따른 재료 손실</li></ul></li><li>절삭 가공을 수행하기 위한 3요소<ul><li>공작기계</li><li>공구</li><li>공작물</li></ul></li></ul><h2 id="공작기계"><a href="#공작기계" class="headerlink" title="공작기계"></a>공작기계</h2><ul><li>공작기계란?<ul><li>기계를 만드는 기계</li><li>일반적으로는 절삭, 연삭 등과 같이 재료를 가공하여 원하는 형상으로 만들어 내는 기계</li></ul></li><li>공작기계의 분류<ul><li>비절삭 공작기계 : 주조, 소성가공, 용접 등과 같이 Chip을 발생하지 않고 가공</li><li>절삭 공작기계 : 선삭, 밀링, 연삭 등 Chip을 발생시키면서 가공</li><li>좁은 의미의 공작기계 : 절삭 공작기계를 의미</li></ul></li></ul><h3 id="공작기계의-분류"><a href="#공작기계의-분류" class="headerlink" title="공작기계의 분류"></a>공작기계의 분류</h3><ul><li>금속공작기계(Metal Cutting Machining Tool)<ul><li>범용 공작기계<ul><li>절삭공구 사용 기계<ul><li>고정공구 사용 기계<ul><li>선삭(Lathe)</li><li>형삭(Shaper)</li><li>평삭(Planer)</li></ul></li><li>회전공구 사용 기계<ul><li>밀링(Milling M/C)</li><li>드릴링(Drilling M/C)</li><li>보링(Boring M/C)</li><li>쏘잉(Sawing M/C)</li></ul></li></ul></li><li>연삭공구 사용 기계<ul><li>연삭(Grinding M/C)</li><li>호닝(Honing M/C)</li></ul></li></ul></li><li>전용 공작기계<ul><li>전용기(Special Purpose M/C)</li></ul></li><li>NC 공작기계<ul><li>NC Lathe</li><li>NC Drilling M/C</li><li>NC Milling M/C</li><li>NC Boring M/C</li><li>NC Grinding M/C</li><li>Machining Center</li></ul></li></ul></li><li>금속가공기계(Metal Forming Machine Tool)<ul><li>Press</li><li>Rolling M/C</li><li>Shearing M/C</li><li>Bending M/C</li></ul></li></ul><h3 id="NC-공작기계에-의한-가공의-특성"><a href="#NC-공작기계에-의한-가공의-특성" class="headerlink" title="NC 공작기계에 의한 가공의 특성"></a>NC 공작기계에 의한 가공의 특성</h3><ul><li>높은 공작 정밀도(Accuracy)<ul><li>주축 회전정밀도</li><li>안내면 직선 정밀도</li><li>온도변화에 대한 변형</li><li>진동</li><li>Etc.</li></ul></li><li>우수한 가공능률(Efficiency)<ul><li>절삭효율<ul><li>유효 절삭시간</li><li>준비시간</li><li>유휴시간</li></ul></li></ul></li><li>융통성(Flexibility)<ul><li>프로그램에 의한 가공의 자동화<ul><li>NC code</li><li>Controller</li></ul></li></ul></li><li>안전성(Safety)<ul><li>작업자에 대한 안정성</li><li>기계 자체의 안정성</li></ul></li></ul><h3 id="공작기계의-운동"><a href="#공작기계의-운동" class="headerlink" title="공작기계의 운동"></a>공작기계의 운동</h3><ul><li>공작기계의 가공 원칙<ul><li>절삭공구와 공작물간에 적절한 상대운동을 통하여 요구되는 형상 생성</li></ul></li><li>절삭운동과 이송운동 : 공작기계로부터 공급되는 상대운동<ul><li>절삭운동(Cutting motion, 주운동)<ul><li>기계가공 수행을 위한 총동력의 대부분을 사용</li><li>Chip의 길이 방향으로 공구가 움직이는 운동</li></ul></li><li>이송운동(Feed motion)<ul><li>가공물을 절삭 방향으로 피이드 하는 운동</li><li>기계가공 수행을 위해 필요한 총동력의 소량을 사용</li></ul></li></ul></li></ul><h3 id="좌표계의-정의"><a href="#좌표계의-정의" class="headerlink" title="좌표계의 정의"></a>좌표계의 정의</h3><ul><li>Z축 운동<ul><li>주운동을 제공하는 기계의 주축에 평행하게 정렬</li><li>주축이 없는 기계 : 공작물 지탱면에 수직으로 정렬</li><li>+Z 운동 : 공작물과 공구대 사이의 거리를 증가시키는 방향</li></ul></li><li>X축 운동<ul><li>공작물 지탱면에 수평하고 평행</li><li>주축이 없는 기계 : 주절삭 방향에 평행하고 주운동 방향이 플러스 방향</li><li>공작물이 회전하는 기계 : 횡이송대에 방사형이고 평행</li><li>+X 운동 : 공구가 공작물의 회전축으로부터 멀어졌을 때의 공구 운동으로 정의</li></ul></li><li>Y축 운동<ul><li>좌표계를 완성하는 방향</li></ul></li></ul><h2 id="선삭"><a href="#선삭" class="headerlink" title="선삭"></a>선삭</h2><h3 id="선반의-구성"><a href="#선반의-구성" class="headerlink" title="선반의 구성"></a>선반의 구성</h3><ul><li>주축에 고정한 공작물을 회전, 공구대에 설치된 공구에 절삭깊이와 이송을 주어 공작물을 절삭</li><li>베드 : 다른 구성요소들의 지지 역할</li><li>왕복대(Carriage) : 베드의 안내면(Slide way)을 따라 이동</li><li>주축대(Headstock) : 베드에 고정</li><li>정밀도에 중요한 요소<ul><li>주축 흔들림(주축 베어링)</li><li>이송운동의 정밀도(베드, Linear guide 정밀도)</li></ul></li></ul><p><img src="https://user-images.githubusercontent.com/42334717/93463236-724bdc80-f922-11ea-81c7-c1d8f6af10af.jpg" alt="Lathe"></p>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/mechanical-engineering/">Mechanical Engineering</category>
      
      
      <category domain="https://zerohertz.github.io/tags/mechanical-engineering/">Mechanical Engineering</category>
      
      
      <comments>https://zerohertz.github.io/cam-and-cnc/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Introduction to music</title>
      <link>https://zerohertz.github.io/introduction-to-music/</link>
      <guid>https://zerohertz.github.io/introduction-to-music/</guid>
      <pubDate>Wed, 02 Sep 2020 04:18:35 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;중세시대 : 약 200년 ~ 1450년&lt;/li&gt;
&lt;li&gt;르네상스시대 : 약 1450년 ~ 1600년&lt;/li&gt;
&lt;li&gt;바로크시대 : 약 1600년 ~ 1750년&lt;/li&gt;
&lt;li&gt;고전시대 : 약 1750년 ~ 1827년&lt;/li&gt;
&lt;li&gt;낭만시대 : 약 1827년 ~ 1900년&lt;/li&gt;
&lt;li&gt;현대시대 : 약 1900년 ~&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><ul><li>중세시대 : 약 200년 ~ 1450년</li><li>르네상스시대 : 약 1450년 ~ 1600년</li><li>바로크시대 : 약 1600년 ~ 1750년</li><li>고전시대 : 약 1750년 ~ 1827년</li><li>낭만시대 : 약 1827년 ~ 1900년</li><li>현대시대 : 약 1900년 ~</li></ul><a id="more"></a><h2 id="음악의-구성"><a href="#음악의-구성" class="headerlink" title="음악의 구성"></a>음악의 구성</h2><ul><li>음악의 3요소<ul><li>리듬</li><li>가락</li><li>화성</li></ul></li><li>음악의 5요소<ul><li>리듬</li><li>가락</li><li>화성</li><li>소리</li><li>작곡가, 연주가의 생각</li></ul></li></ul><h2 id="소리"><a href="#소리" class="headerlink" title="소리"></a>소리</h2><ul><li>물리적 이해<ul><li>공기의 진동<ul><li>공기압의 변동</li><li>압력의 변화</li></ul></li><li>소리의 성질<ul><li>직진</li><li>반사</li><li>흡수</li><li>투과</li><li>회절</li><li>빛은 소리보다 빠름</li></ul></li><li>소리와 소음<ul><li>데시벨(Decibel) : 음량을 나타내는 단위</li><li>1dB : 가청한계, 양탄자 위에 바늘이 떨어지는 소리</li><li>10dB : 숨소리, 나뭇잎 바람에 흔들리는 소리</li><li>30dB : 속삭임</li><li>50dB : 정상적인 대화</li><li>85dB : 주간 도시의 소음 기준치</li><li>90dB : 술집</li><li>100dB : 노래방</li><li>115dB : 클럽, 자동차경적(최대 허용치 15분)</li><li>120dB : 귀가 고통을 느끼기 시작</li><li>160dB : 귓전에서 쏜 총소리</li></ul></li></ul></li><li>음악적 이해<ul><li>음색</li><li>공명</li><li>소리의 상대성(셈여림 - 인식 좌우)</li></ul></li><li>음의 3요소<ul><li>음정(음의 고저)</li><li>강약(음의 세기)</li><li>음색(배음, Overtone)</li></ul></li></ul><h2 id="작곡가-연주가의-생각"><a href="#작곡가-연주가의-생각" class="headerlink" title="작곡가, 연주가의 생각"></a>작곡가, 연주가의 생각</h2><ul><li>존 케이지(1912 ~ 1992)<ul><li>불확실성 음악</li><li>우연성의 음악</li><li>대표작 : 4분 33초(1952)</li></ul></li></ul><h2 id="음정"><a href="#음정" class="headerlink" title="음정"></a>음정</h2><ul><li>음 하나하나가 가지는 고유의 음 높이 또는 음과 음 사이의 간격</li><li>Hz(Hertz) : 진동수의 단위, 1초 동안의 진동횟수(라음은 440Hz)</li><li>고정음정 악기(Ex. 피아노)</li><li>성악은 약간의 음정 변화로 다양한 음악적 표현 가능</li><li>가락음정 : 두 음이 따로 울릴 때의 음정</li><li>화성음정 : 같이 울릴 때의 음정</li></ul>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/etc/">Etc.</category>
      
      
      
      <comments>https://zerohertz.github.io/introduction-to-music/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Political science</title>
      <link>https://zerohertz.github.io/political-science/</link>
      <guid>https://zerohertz.github.io/political-science/</guid>
      <pubDate>Wed, 02 Sep 2020 04:18:06 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Politics-and-Political-Science&quot;&gt;&lt;a href=&quot;#Politics-and-Political-Science&quot; class=&quot;headerlink&quot; title=&quot;Politics and Political Science&quot;&gt;&lt;/a&gt;Politics and Political Science&lt;/h1&gt;&lt;h2 id=&quot;인간-생활의-본질&quot;&gt;&lt;a href=&quot;#인간-생활의-본질&quot; class=&quot;headerlink&quot; title=&quot;인간 생활의 본질&quot;&gt;&lt;/a&gt;인간 생활의 본질&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Aristotle : 인간은 정치적 동물&lt;ul&gt;
&lt;li&gt;정치는 인간사회에 반드시 필요하고 인간사회에서만 가능한 현상&lt;/li&gt;
&lt;li&gt;정치적 동물인 인간의 사회에는 반드시 권력 발생&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;B. Russell : 인간의 생활현상은 3가지 투쟁의 연속&lt;ul&gt;
&lt;li&gt;인간과 자연의 투쟁 -&amp;gt; 자연과학, 물질문명 발달&lt;/li&gt;
&lt;li&gt;인간과 인간 자신과의 내부 투쟁 -&amp;gt; 정신문화 발달&lt;/li&gt;
&lt;li&gt;인간과 다른 인간과의 투쟁 -&amp;gt; 정치현상 발생&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Politics-and-Political-Science"><a href="#Politics-and-Political-Science" class="headerlink" title="Politics and Political Science"></a>Politics and Political Science</h1><h2 id="인간-생활의-본질"><a href="#인간-생활의-본질" class="headerlink" title="인간 생활의 본질"></a>인간 생활의 본질</h2><ul><li>Aristotle : 인간은 정치적 동물<ul><li>정치는 인간사회에 반드시 필요하고 인간사회에서만 가능한 현상</li><li>정치적 동물인 인간의 사회에는 반드시 권력 발생</li></ul></li><li>B. Russell : 인간의 생활현상은 3가지 투쟁의 연속<ul><li>인간과 자연의 투쟁 -&gt; 자연과학, 물질문명 발달</li><li>인간과 인간 자신과의 내부 투쟁 -&gt; 정신문화 발달</li><li>인간과 다른 인간과의 투쟁 -&gt; 정치현상 발생</li></ul></li></ul><a id="more"></a><h2 id="정치는-왜-필요한가"><a href="#정치는-왜-필요한가" class="headerlink" title="정치는 왜 필요한가?"></a>정치는 왜 필요한가?</h2><blockquote><p>“이기적인 인간의 사회에 왜 질서 있는 사회가 창조, 유지, 변화되는가?”, T. Hobbes</p></blockquote><ul><li>사회를 존속</li><li>반사회적 행위를 통제하여 사회질서 유지</li><li>모든 사람이 갈망하는 이상사회로 진보</li></ul><blockquote><p>정치는 구성원이 현실에서 직면하는 공통의 문제를 해결하고, 좀 더 이상적인 사회를 창조하는 능동적인 집단 행위. 특히 집단행위에는 지도자의 통합 능력, 방향 제시 능력이 중요하게 작용한다.</p></blockquote><h2 id="정치의-세-가지-측면"><a href="#정치의-세-가지-측면" class="headerlink" title="정치의 세 가지 측면"></a>정치의 세 가지 측면</h2><ul><li>정치는 집단 내부 또는 집단 사이에서 발생하는 행위</li><li>집단에 영향을 미치는 문제에 대한 공동 결정</li><li>집단 구성원에 대한 구속력, 복종, 강제</li></ul><blockquote><p>정치는 전체 공동체에 영향을 미치는 결정을 내리고, 그 결정을 집행하는 행위 또는 과정</p></blockquote><h2 id="정치에-대한-다양한-생각들"><a href="#정치에-대한-다양한-생각들" class="headerlink" title="정치에 대한 다양한 생각들"></a>정치에 대한 다양한 생각들</h2><ul><li>정치는 시대에 따라, 공간에 따라 달리 이해되어왔으며 앞으로도 그럴 것이다</li><li>정치는 생물이다</li><li>자기보존(Self-preservation) : 시대에 따른 정치 개념의 차이<ul><li>근대 : 개인의 생명, 자유, 재산이라는 기본권</li><li>국제관계 : 국가의 자기보존, 생존은 곧 주권의 문제</li><li>냉전 시대의 자기보존 주체는 진영(사회주의, 자본주의)</li></ul></li></ul><h3 id="고대"><a href="#고대" class="headerlink" title="고대"></a>고대</h3><ul><li>서양<ul><li>Plato : 인간 영혼의 최고선을 동시공동체(Polis)안에서 실현시키는 것</li><li>Aristotle : 정치적 동물인 인간이 사회 전체(Polis)의 선을 실현시키는 것</li></ul></li><li>동양<ul><li>공자 : 정자정야(바르게 잡는 것)</li><li>맹자 : 정치의 본질은 백성을 위하는 것</li><li>한비자 : 법치에 기반을 둔 군주의 다스림과 군주의 통치권력 강조</li></ul></li></ul><h3 id="르네상스"><a href="#르네상스" class="headerlink" title="르네상스"></a>르네상스</h3><ul><li>N. Machiavelli<ul><li>정치는 권력을 둘러싼 대립과 투쟁</li><li>종교나 윤리로부터 정치 분리</li></ul></li></ul><blockquote><p>갈등의 해소를 통해 정치 안정을 유지하는 길만이 민족의 생존과 자유를 보장하는 길</p></blockquote><h3 id="근대"><a href="#근대" class="headerlink" title="근대"></a>근대</h3><ul><li>사회계약론<ul><li>‘사회나 국가는 자연 상태의 개인이 맺는 계약을 통해 창출된다’라는 사상의 큰 틀을 공유</li><li>T. Hobbes : 강력한 지배자의 통치를 통하여 질서를 유지하고 개인의 생명과 재산을 보존하는 일</li><li>J. Locke : 개개인의 자유를 확보하는 활동</li></ul></li></ul><blockquote><p>근대 부르주아 계급은 자신들의 기본권(개인의 자유)을 유지하기 위한 투쟁 전개</p><blockquote><p>국가를 대변하는 귀족계급과 대립</p></blockquote></blockquote><h3 id="현대"><a href="#현대" class="headerlink" title="현대"></a>현대</h3><ul><li>David Easton<ul><li>사회의 (희소한) 가치를 권위적으로 배분하는 것</li></ul></li><li>Harold Lasswell<ul><li>누가 무엇을 언제 그리고 어떻게 얻는가?</li><li>Who gets what, when and how?</li></ul></li></ul><h2 id="정치의-두-얼굴-Janus-faced"><a href="#정치의-두-얼굴-Janus-faced" class="headerlink" title="정치의 두 얼굴(Janus-faced)"></a>정치의 두 얼굴(Janus-faced)</h2><ul><li>경쟁지향적 정치 개념<ul><li>갈등 해소로서의 정치(Politics as conflict-resolution)</li><li>외형적으로 조화를 강조하는 것 같지만, 대립과 경쟁의 항구성을 강조</li><li>인간 공동의 삶, 공공활동 그 자체가 정치의 영역</li><li>인간은 정치를 통해서 인간다운 삶 실현 가능</li><li>정치는 공동의 활동</li><li>정치는 권력현상</li><li>대립, 갈등, 분열, 논쟁, 분투</li></ul></li><li>조화지향적 정치 개념<ul><li>공동체형성으로서의 정치(Politics as community-building)</li><li>정치에서 갈등, 대립, 투쟁, 분열 등의 요소를 약화시키거나 제거하는데 관심</li><li>국가에 관련되는 일이 정치의 영역이라는 고전적 정의와 관련</li><li>정치는 통치기술(관리, 행정, 정부의 활동)</li><li>정치는 타협과 합의</li><li>조화, 합의, 타협, 관리, 통합</li></ul></li></ul><h2 id="정치학-Political-science"><a href="#정치학-Political-science" class="headerlink" title="정치학(Political science)"></a>정치학(Political science)</h2><ul><li>정치, 특히 국가의 정치에 대한 분석을 유일하고 일반적인 임무로 하는 학문의 한 분야<ul><li>권력 비판의 학문</li><li>사회 조직과 운영의 원리를 제시함으로써 사회를 경영하는 학문</li><li>이론과 실천을 동시에 추구하는 학문</li></ul></li><li>Fields<ul><li>정치사상</li><li>비교정치</li><li>국제정치</li></ul></li></ul><hr><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/etc/">Etc.</category>
      
      
      
      <comments>https://zerohertz.github.io/political-science/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>제품공학설계</title>
      <link>https://zerohertz.github.io/product-design-for-manufacturing/</link>
      <guid>https://zerohertz.github.io/product-design-for-manufacturing/</guid>
      <pubDate>Mon, 31 Aug 2020 06:05:34 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;h2 id=&quot;제품의-정의&quot;&gt;&lt;a href=&quot;#제품의-정의&quot; class=&quot;headerlink&quot; title=&quot;제품의 정의&quot;&gt;&lt;/a&gt;제품의 정의&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;A product is something that is produced and sold in large quantities, often as a result of a manufacturing process&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;자연이나 인공의 공정에 의해서 생산된 유형의 물건이나 사물의 실체를 의미&lt;/li&gt;
&lt;li&gt;기업이 소비자들에게 판매하는 대상물&lt;ul&gt;
&lt;li&gt;전통적 제품 : 자연에서 얻을 수 있었던 1차 생산품&lt;/li&gt;
&lt;li&gt;산업화 이후 : 제조(Manufacturing) 공정에 의해서 생산되는 물건&lt;/li&gt;
&lt;li&gt;정보사회 : 무형의 서비스나 소프트웨어까지 포함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;고객의 욕구충족을 위해 만들어지거나 제공되는 물품이나 서비스&lt;/li&gt;
&lt;li&gt;고객의 관심, 구매, 사용(또는 소비)을 위해 시장에 제시될 수 있는 물품, 서비스, 또는 아이디어 등&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><h2 id="제품의-정의"><a href="#제품의-정의" class="headerlink" title="제품의 정의"></a>제품의 정의</h2><blockquote><p>A product is something that is produced and sold in large quantities, often as a result of a manufacturing process</p></blockquote><ul><li>자연이나 인공의 공정에 의해서 생산된 유형의 물건이나 사물의 실체를 의미</li><li>기업이 소비자들에게 판매하는 대상물<ul><li>전통적 제품 : 자연에서 얻을 수 있었던 1차 생산품</li><li>산업화 이후 : 제조(Manufacturing) 공정에 의해서 생산되는 물건</li><li>정보사회 : 무형의 서비스나 소프트웨어까지 포함</li></ul></li><li>고객의 욕구충족을 위해 만들어지거나 제공되는 물품이나 서비스</li><li>고객의 관심, 구매, 사용(또는 소비)을 위해 시장에 제시될 수 있는 물품, 서비스, 또는 아이디어 등</li></ul><a id="more"></a><h2 id="제품의-속성"><a href="#제품의-속성" class="headerlink" title="제품의 속성"></a>제품의 속성</h2><ul><li>핵심제품(Core product) : 소비자가 제품으로부터 원하는 주요 편익 및 서비스<ul><li>기능적 품질 : 제품성능, 예상 수명 기간 중의 신뢰도, 사용의 편리, 안락, 안전 등의 인적 요인 등</li></ul></li><li>유형제품(Tangible product) : 편익을 구체적인 물리적 속성(특성)들의 집합으로 유형화시킨 것<ul><li>비기능적 품질 : 외적 특성, 모양, 유형 등</li></ul></li><li>확장제품(Augmented product) : 유형에 다양한 서비스들이 부가된 것<ul><li>판매 전, 후 서비스, 품질보증, 유통망, 설치 등의 경쟁력 증대를 위한 중요한 제품속성</li></ul></li><li>대부분의 제품은 “핵심제품”의 기능적 설계에 초점을 둔다</li><li>하지만 제품이 대중화될수록, 경쟁이 심해질수록 비기능적/미학적 설계(“형식제품/확장제품”)가 중시된다</li><li>또한 환경문제에 대한 인식과 더불어 환경친화적/생태적 설계가 중시되는 경향으로 발전해 가고 있다</li></ul><h2 id="제품의-분류"><a href="#제품의-분류" class="headerlink" title="제품의 분류"></a>제품의 분류</h2><ul><li>소비재 : 최종소비자가 소비를 목적으로 구매하는 제품<ul><li>편의품(Convenience goods) : 자주 구매되고 소비자가 제품 구매에 최소한의 시간과 노력을 투입하는 제품</li><li>선매품(Shopping goods) : 고객이 구매하기 전에 몇 개의 점포들을 방문하여 상표들의 가격, 품질, 스타일 등을 비교한 후 구매하는 제품</li><li>전문품(Spacialty goods) : 상표마다 독특한 특성을 가지고 있고 소비자가 상표 식별을 쉽게 할 수 있으며 대체재가 없는 제품</li></ul></li><li>산업재 : 기업이 제품이나 서비스의 생산에 투입하기 위해 구매하는 제품<ul><li>원자재와 부품(Materials and parts) : 제조업자의 제품생산에 완전히 투입되는 제품<ul><li>원료(Raw material) : 농산물(밀, 면, 채소), 채취원료(원유, 원목, 철강)</li><li>가공재(Manufactured or processed material) : 원료에 추가적인 가공처리가 이루어진 제품</li><li>부품(Components parts) : 완제품의 형태로 다른 제품생산에 투입되는 제품</li></ul></li><li>자본재(Capital items) : 완제품 생산에 부분적으로 투입되는 제품<ul><li>기자재(Equipment) : 최종 제품의 일부분으로 들어가지 않고 생산을 돕는 제품</li><li>설비(Installation) : 건물, 공장의 부분으로 부착되어 제거하기 용이하지 않은 제품과 건물</li></ul></li><li>소모품과 서비스(Supplies and services) : 최종제품 생산에 투입되지 않는 제품<ul><li>소모품 : 업무 및 유지보수에 필요한 제품, 구매단위 가격이 낮으며 자주 구매됨</li><li>서비스 : 유지, 보수 서비스는 계약에 의해 이루어지며 설비 제조업체에 의해 직접 제공됨</li></ul></li></ul></li></ul><h2 id="제품수명주기"><a href="#제품수명주기" class="headerlink" title="제품수명주기"></a>제품수명주기</h2><blockquote><p>Product Life Cycle(PLC) : 제품이 시장에 출시되어 매출이 어느 정도의 성장을 누리고 정점에 도달한 후, 성장률이 둔화되고, 마지막으로는 매출액이 감소하여 종국에는 시장에서 사라지는 과정을 마치 살아있는 유기체(Organism)의 일생(수명주기)에 비유하여 나타낸 개념 - 시간이 흐름에 따라 그 제품의 판매량(혹은 매출, 수익)의 변화</p></blockquote><ol><li>도입기(Introduction stage)<ul><li>신제품이 시장에 출시되어 매출이 급성장하기까지의 기간</li><li>소비자들의 신제품에 대한 인지도가 낮고 기존 제품의 소비 습관의 저항 큼</li><li>매출은 완만한 증가 추세를 보이며 상당히 오랜 기간이 소요될 수 있음</li><li>잦은 설계 변경으로 유연성 강화 가능</li></ul></li><li>성장기(Growth stage)<ul><li>매출이 빠르게 성장하는 시점에서부터 성장률이 둔화되기 시작하는 시점까지의 기간</li><li>성장기에서는 시장 수요가 급증하고, 대량 생산과 규모의 경제로 인하여 단가가 하락하여 고객들은 비교적 낮은 가격으로 신제품을 구매</li><li>고객은 구전을 통해 제품 정보를 얻고, 다른 후발 구매자에게 구전을 통해 자신들의 경험과 평가를 전파하는 의견선도자 역할을 수행함</li><li>경쟁사(경쟁제품)의 진입이 시작되며, 서서히 이윤이 발생하기 시작함</li></ul></li><li>성숙기(Maturity stage)<ul><li>매출의 성장률이 둔화되기 시작하는 시점으로부터 매출이 최고점에 이를 때까지의 기간</li><li>성숙기의 고객들은 제품의 구매와 사용에 관한 경험이 상당히 축적되어 있으므로 매우 다양하고 까다로운 취향과 선호도를 지니며, 자신의 개성을 표출하기를 희망함</li><li>다양한 제품들이 시장에 출시되며, 시장 세분화의 필요성이 증대됨</li><li>시장이 크게 성장하지 않으므로 현재 시장에서의 점유율을 늘리는 전략이 필요</li></ul></li><li>쇠퇴기(Decline stage)<ul><li>매출이 최고점에 이른 후, 실제로 감소하는 때부터 제품이 시장에서 완전히 사라지는 때까지</li><li>매출 감소의 이유<ul><li>시장 수요의 포화</li><li>신기술의 출현</li><li>사회적 가치의 변화</li><li>고객 욕구의 변화</li></ul></li><li>쇠퇴기 마케팅 전략<ol><li>제품을 시장에서 철수하는 것 : 매각 또는 잔존가치로 감가상각하는 것</li><li>수확전략 : 제품에 대한 마케팅 비용을 점진적으로 줄이는 것</li><li>재활성화 전략 : 기업의 지속적인 제품 개선 노력으로 성숙기를 연장하는 것</li></ol></li></ul></li></ol><ul><li>다양한 PLC<ul><li>쇠퇴기 없이 지속적인 판매량 증가를 보이는 경우(초코파이)<ul><li>경쟁제품의 미출시</li><li>지속적인 경쟁력 보유</li><li>독점 제품</li></ul></li><li>쇠퇴기가 아주 빠른 경우(시티폰)<ul><li>대체제품(개선제품)의 출시로 인해 기존 제품에 대한 판매량의 급격한 감소 및 조기 시장 퇴출</li></ul></li><li>모든 단계가 아주 짧은 경우(현대의 전자제품)<ul><li>시장에서 경쟁이 치열한 제품</li><li>아주 짧은 기간 내에 지속적인 신제품(대체제품, 개선제품 등) 출시로 기존제품을 신속히 대체</li></ul></li></ul></li></ul><h2 id="제품개발과정"><a href="#제품개발과정" class="headerlink" title="제품개발과정"></a>제품개발과정</h2><h3 id="신재품의-의미"><a href="#신재품의-의미" class="headerlink" title="신재품의 의미"></a>신재품의 의미</h3><ul><li>대혁신 제품<ul><li>아직까지 시장에서 존재하지 않았던 새로운 제품을 개발하여 출시하는 것</li><li>제품 개발과정에 새로운 기술이 적용되고, 신제품을 사용하는  소비자의 행동을 변화시킴</li></ul></li><li>기존 제품 개선<ul><li>이미 시장에 존재하던 제품을 기술 및 소비자 욕구의 변화에 맞도록 개선하는 것</li><li>품질의 향상, 성능의 개선, 새 기능의 추가, 디자인과 색상 변화 등</li></ul></li><li>제품 계열의 추가 및 확장<ul><li>유사한 기능을 제공하는 제품들의 집합</li><li>고객들에게 이미 알려져 있는 제품 계열에 신제품을 추가함으로써 제품 계열 확장</li></ul></li><li>재포지셔닝(Re-positioning)<ul><li>기존 제품을 새로운 사용자를 위하여 혹은 새로운 용도로 사용되도록 포지셔닝 하는 것</li></ul></li></ul><h3 id="제품개발의-의미"><a href="#제품개발의-의미" class="headerlink" title="제품개발의 의미"></a>제품개발의 의미</h3><ul><li>많은 시간과 연구개발 비용이 소요</li><li>높은 실패 확률을 가짐</li><li>기업이 지속적인 성장과 유지를 추구하기 위해서는 성공적인 신제품 개발이 중요</li><li>미국의 대부분 기업들은 연간 매출액의 60~90%가량을 10년 전에는 없던 신제품들에 의해 거둬들이고 있다</li></ul><h3 id="신제품의-성공과-실패"><a href="#신제품의-성공과-실패" class="headerlink" title="신제품의 성공과 실패"></a>신제품의 성공과 실패</h3><ul><li>성공요인<ul><li>고객의 욕구를 충족시키며 높은 고객 가치를 제공하는 경우</li><li>신제품의 성능과 품질이 우수한 경우</li><li>기술적 우위를 바탕으로 혁신적인 제품을 개발하는 경우</li><li>성장 가능성에 대한 면밀한 분석이 뒷받침되는 경우</li><li>경쟁이 치열하지 않으며 기업 역량과 잘 부합하는 경우</li><li>최고경영진의 적극적인 지원이 있는 경우</li></ul></li><li>실패요인<ul><li>소비자 관련<ul><li>기존 제품과 차별화된 편익을 제공하지 못하는 것</li><li>경쟁 제품을 모방한 신제품은 기존 제품과의 경쟁에서 우위를 점하기 어려움</li></ul></li><li>마케팅 전략 관련<ul><li>시장에서 포지셔닝의 실패</li><li>효과적인 광고 실패</li><li>높은 가격 책정</li></ul></li><li>기타<ul><li>기술 발달의 속도를 잘못 파악하는 경우</li><li>시장 출시에 대한 타이밍이 부적절한 경우</li><li>수요 예측이 잘못된 경우</li></ul></li></ul></li></ul><h3 id="제품-개발-전략"><a href="#제품-개발-전략" class="headerlink" title="제품 개발 전략"></a>제품 개발 전략</h3><ul><li>시장지향적(Market-in/pull/driven) 전략<ul><li>고객의 필요 -&gt; 신제품화</li><li>판매 가능한 제품만을 생산 -&gt; 성공가능성이 크다</li><li>고객의 니즈 파악이 중요하며, 시장조사나 고객의 피드백을 통해 결정</li><li>High Touch Product : 문화적 감성을 주는 제품</li></ul></li><li>기술지향적(Technology-push/driven) 전략<ul><li>생산자의 생산 기술 수준 진보 -&gt; 신제품화</li><li>생산 가능한 제품만을 판매한다</li><li>적극적인 R&amp;D로 우수한 제품을 생산(아이폰, 아이패드 등)</li><li>High Tech Product : 기능성 제품</li></ul></li><li>협력전략<ul><li>시장의 요구 + 기술적 우위</li><li>일반적으로 최상의 전략</li></ul></li></ul><h2 id="제품개발과정-1"><a href="#제품개발과정-1" class="headerlink" title="제품개발과정"></a>제품개발과정</h2><ul><li>예비설계<ul><li>제품의 크기, 모양, 색깔, 에너지 소비, 수명 등과 같은 제품의 개략적인 윤곽을 설계</li></ul></li><li>상세설계<ul><li>제품의 완전한 규격, 구성품, 조립도가 확정</li><li>세부설계는 제품의 기능, 형태 및 생산설계로 구성</li><li>기능설계<ul><li>제품의 성능에 중점</li><li>시장(혹은 고객)에서의 품질 수준, 신뢰성 및 원가 사이의 관계를 고려하여 기술규격(Technical specification) 결정</li></ul></li><li>형태설계<ul><li>제품의 외관이나 모양에 중점</li><li>소비재의 경우 기능보다 색상, 스타일 및 패션이 더욱 중요한 경우가 있음</li></ul></li><li>생산설계<ul><li>경제적 생산에 중점</li><li>최소의 투입(원자재, 인력, 장비 등)으로 최대의 효과</li></ul></li></ul></li><li>도면과 규격 : 상세설계가 이루어지면 최종적으로 도면과 규격 결정<ul><li>도면<ul><li>도면은 부품, 중간 및 최종 조립품에 대하여 작성</li><li>도면은 자재명세서 혹은 부품리스트 포함</li><li>도면은 생산의 일전계획이 수립되기 전에 어떠한 부품과 구성품이 필요한가를 결정</li><li>도면은 다음 내용을 포함<ol><li>원자재</li><li>원자재의 표준</li><li>치수</li><li>허용공차</li><li>표면의 마무리</li></ol></li></ul></li><li>규격<ul><li>실제 생산 시 정확한 규격에 의한 생산이 가능하도록 함</li></ul></li></ul></li></ul><h3 id="생산설계-시-고려사항-단순화-및-다양화"><a href="#생산설계-시-고려사항-단순화-및-다양화" class="headerlink" title="생산설계 시 고려사항 : 단순화 및 다양화"></a>생산설계 시 고려사항 : 단순화 및 다양화</h3><ul><li>제품의 단순화(Simplification)<ul><li>제품의 설계, 기능, 종류를 단순화함</li><li>장점 : 생산계획 및 통제가 단순, 대량생산이 가능하다면 제품 원가 절감</li><li>단점 : 단일제품의 경우 판매량 저조 및 경쟁업체의 대체품 출시로 인해 판매량 급감 -&gt; 기업의 생산성 저하, 경쟁력 약화</li></ul></li><li>제품의 다양화<ul><li>제품의 설계, 기능, 종류를 다양화함</li><li>장점 : 다양한 고객욕구 충족, 위험분산, 유휴시설 활용가능</li><li>단점 : 제품원가 증가, 생산계획 및 통제의 복잡성 증대</li></ul></li></ul><h3 id="생산설계-시-고려사항-표준화-Standardization"><a href="#생산설계-시-고려사항-표준화-Standardization" class="headerlink" title="생산설계 시 고려사항 : 표준화(Standardization)"></a>생산설계 시 고려사항 : 표준화(Standardization)</h3><ul><li>표준화는 크기, 모양, 색상, 수량, 성능, 작업방법, 장비, 절차 및 공정 등에서 균일성을 보장하려는 노력</li><li>이종 제품간 동일한 부품 사용(부품의 호환성)을 통하여 부품 설계업무 및 비용이 줄어들어 생산비용을 줄일 수 있음 -&gt; 대량생산 가능</li></ul><h3 id="생산설계-시-고려사항-모듈-Module"><a href="#생산설계-시-고려사항-모듈-Module" class="headerlink" title="생산설계 시 고려사항 : 모듈(Module)"></a>생산설계 시 고려사항 : 모듈(Module)</h3><ul><li>모듈(Module) : 다수의 부품으로 구성되어 있는 표준화된 중간조립품 또는 제품의 기본 구성품</li><li>모듈러 설계 : 표준화된 소수의 모듈을 개발하여 조립 단계에서 이들을 서로 상이하게 결합함으로써 제품 다양화를 경제적으로 추구하는 제품설계 방법</li><li>모듈러 설계에서는 각 제품을 개별적으로 설계하지 않고 표준화된 구성품 모듈들을 중심으로 설계(제품라인 전체적인 시각에서 설계)</li></ul><h3 id="생산설계-시-고려사항-친환경적-Eco-제품설계"><a href="#생산설계-시-고려사항-친환경적-Eco-제품설계" class="headerlink" title="생산설계 시 고려사항 : 친환경적(Eco) 제품설계"></a>생산설계 시 고려사항 : 친환경적(Eco) 제품설계</h3><ul><li>환경을 고려한 제품설계는 글로벌 경쟁시대에 거스를 수 없는 대세</li><li>국가 환경경영인증 시스템인 ISO 14000 시리즈 대두 : 기업의 녹색경영을 재촉하는 새로운 기업평가 기준</li><li>환경친화적 제품에 대한 환경마크제도 등장</li><li>환경마크제도<ul><li>친환경적이며 품질과 성능이 우수한 제품에 대해 환경마크를 표시토록 하는 국가공인 인증제도</li><li>원재료 공급 -&gt; 생산 -&gt; 유통 -&gt; 사용 -&gt; 폐기로 이어지는 제품과 전 과정 각 단계에 걸쳐 자원과 에너지를 덜 소비하고 오염물질을 덜 배출하는 친환경상품을 선별해 정해진 형태의 환경마크와 간단한 설명을 표시토록 하는 인증제도</li><li>인증기관 : 한국환경산업기술원</li></ul></li><li>설계 방법<ul><li>재활용을 고려한 설계(Design for recycling)</li><li>환경을 고려한 설계(Design for enviroment)</li><li>분해를 고려한 설계(Design for disassembly)</li></ul></li></ul><h3 id="품질기능전개"><a href="#품질기능전개" class="headerlink" title="품질기능전개"></a>품질기능전개</h3><ul><li>QFD(Quality Function Deployment) : 제품개발의 각 단계에서 고객의 요구사항을 적절한 설계요건(대용품질)으로 변환시키는 체계적인 접근방법</li><li>HOQ(House of Quality, 품질의 집) : 품질기능전개(QFD)의 핵심수단</li></ul><h2 id="제품개발방법론"><a href="#제품개발방법론" class="headerlink" title="제품개발방법론"></a>제품개발방법론</h2><table><thead><tr><th align="center">특성\개발방법</th><th align="center">순차적 제품개발법</th><th align="center">동시공학적 제품개발법</th></tr></thead><tbody><tr><td align="center">시장</td><td align="center">안정적</td><td align="center">매우 경쟁적</td></tr><tr><td align="center">제품규모(복잡성)</td><td align="center">큼</td><td align="center">중간, 작음</td></tr><tr><td align="center">초기 인프라투자</td><td align="center">적음</td><td align="center">많음</td></tr><tr><td align="center">주요 실행방식</td><td align="center">조직중심</td><td align="center">조직과 정보기술의 활용</td></tr><tr><td align="center">개발조직</td><td align="center">기능별 조직</td><td align="center">매트릭스 조직, 팀, 가상조직</td></tr></tbody></table><h3 id="순차공학적-제품개발법-Sequential-Engineering-Product-Development"><a href="#순차공학적-제품개발법-Sequential-Engineering-Product-Development" class="headerlink" title="순차공학적 제품개발법(Sequential Engineering Product Development)"></a>순차공학적 제품개발법(Sequential Engineering Product Development)</h3><ul><li>신제품 개발의 경우 개념 개발 -&gt; 제품 및 공정의 상세 설계 -&gt; 시험생산 -&gt; 생산 -&gt; 판매에 이르기 까지의 제품개발 단계를 순차적으로 진행해 나가는 방법</li><li>제품개발의 각 단계를 순차적으로 거쳐가면서 작업을 진행함. 따라서 선행단계의 작업이 종료된 후에야 후행단계의 작업 시작 가능</li><li>전문화에 의한 관련 당사자간의 상호작용의 부족으로 인해 의사소통의 문제를 야기할 수 있음<ul><li>제품개발 관련 부서(혹은 기능)간의 상대적 힘의 크기에 의해 본래 의도되었던 제품이 출시되지 못하거나 출시기간이 길어질 수 있음</li><li>원자재 조달기간, 제조기간 등 제품생산과 관련된 전체적인 Lead Time이 길어짐</li><li>전체 최적화(Global Optimization)보다는 부분 최적화(Local Optimization)의 경향이 강함</li></ul></li><li>적용분야<ul><li>시작에서 경쟁이 치열하지 않는(안정적인 시장환경) 에서 판매되는 제품</li><li>개발한 제품이 크고, 복잡하며, 작업순서가 정해져 있는 프로젝트 생산공정에 있어 적합한 방법</li></ul></li></ul><h3 id="동시공학적-제품개발법-Concurrent-Engineering-Product-Development"><a href="#동시공학적-제품개발법-Concurrent-Engineering-Product-Development" class="headerlink" title="동시공학적 제품개발법(Concurrent Engineering Product Development)"></a>동시공학적 제품개발법(Concurrent Engineering Product Development)</h3><ul><li>기능 간 통합과 제품 및 공정의 동시 개발이 강조되어 품질, 코스트, 납기, 제조방법, 사용자의 요구, 사용 방법 등 모든 요소를 처음부터 고려하여 설계, 개발하는 것</li><li>신제품 개발의 경우 설계엔지니어, 생산전문가, 품질전문가, 마케팅전문가 등 사내의 제품개발과 관련된 모든 부서와 경우에 따라서는 외부전문가까지 제품개발에 참여시켜 공동개발을 통해 제품을 개발</li><li>적용방법<ul><li>제품개발과 관련된 기업의 모든 부서(혹은 기능), 고객, 주요부품공급사도 참여</li><li>제품개발자들은 다기능팀을 만들어 연관된 다른 부서(혹은 기능)와 빈번하고 계속적인 협의를 통해 제품개발에 관련된 모든 요소들을 반영</li><li>물리적 공간에 제약 받지 않는 네트워크로 연결된 가상의 팀(Virtual Team)을 만들어 협의가능</li></ul></li><li>필요조건<ul><li>제품개발자들 간의 수평적 상호작용을 촉진하기 위해 의사소통을 증대시킬 수 있는 조직구조와 인프라를 갖추어야 함</li><li>제한된 제품개발 일정 동안 협업을 수행할 수 있는 기업문화 필요</li><li>기능적 연계가 제품개발 초기부터 필수적이기 때문에 초기투자가 매우 많이 필요함</li></ul></li><li>장점<ul><li>순차공학적 제품개발법에서 야기될 수 있는 부분 최적화(Local Optimization) 문제를 조기에 해결할 수 있음 -&gt; 전체 최적화(Global Optimization) 가능</li></ul></li><li>적용분야<ul><li>시장에서 경쟁이 매우 치열한 제품들, 예를 들어 휴대폰, 반도체, 평면TV 등과 같이 첨단정보통신 관련 제품개발에는 동시공학적 제품개발방법이 표준으로 자리 잡음</li></ul></li></ul><h2 id="PDM-PLM"><a href="#PDM-PLM" class="headerlink" title="PDM / PLM"></a>PDM / PLM</h2><ul><li>연구개발, 제품개발에 관련된 방법을 통칭</li><li>대상으로 적용하였던 것은 제조되는 물품으로서의 제품</li><li>특히 PDM에서의 관심은 개발과정이 복잡한 제품(민간항공기, 군용항공기, 터빈, 자동차, 기계제품, 전자제품 등)</li></ul><h3 id="PDM-Product-Data-Management"><a href="#PDM-Product-Data-Management" class="headerlink" title="PDM(Product Data Management)"></a>PDM(Product Data Management)</h3><ul><li>제품 구조를 중심으로 주로 제품 상세 설계 과정에 관련된 제품 정보(주로 CAD 파일)를 효과적으로 관리하는 컴퓨터 정보 시스템 기반의 자료 관리</li><li>Program Management, Product Structure, Classification, Engineering Document, Vaulting, Workflow 기능</li><li>제품 개발에서 발생하는 방대한 양의 정보를 효과적으로 관리하여 양질의 제품을 보다 신속하고 경제적으로 개발<ul><li>신뢰도 높은 제품을 오류 없이 개발함으로써 제품의 품질을 향상</li><li>신제품 개발비용 감소</li><li>빠른 시간에 고객이 요구하는 제품 출시가 가능하도록 제품개발 시간 단축</li></ul></li></ul><h3 id="PLM-Product-Lifecycle-Management"><a href="#PLM-Product-Lifecycle-Management" class="headerlink" title="PLM(Product Lifecycle Management)"></a>PLM(Product Lifecycle Management)</h3><ul><li>제품의 라이프 사이클, 즉 제품의 기획 설계, 제조, 운영, 보수유지, 폐기 등 모든 활동을 지원</li><li>그에 관련된 데이터, 정보, 지식 등을 관리하는 하나의 혁신 비즈니스 솔루션</li><li>제품 일주기에 모든 면에서 통합된 정보 위주의 접근 방법</li><li>PLM은 현대 산업사회의 변화하는 경영환경과 밀접하게 관련<ul><li>고객 요구의 다양화로 인한 제품 수명주기가 지속적으로 단축</li><li>다양한 제품 개발이 요구되는 시장주도로의 경영환경 변화</li><li>가치 사슬 및 프로세스상의 협업 필요성 강화</li><li>품질 요구사항 증가로 그 필요성 또한 증대</li></ul></li></ul><h2 id="공학-윤리"><a href="#공학-윤리" class="headerlink" title="공학 윤리"></a>공학 윤리</h2><ul><li>기술이 발전함으로써 편의가 제공되는 대신에 새로운 윤리적 문제 발생<ul><li>도덕적 가치는 우수한 제품을 만들기 위한 기본 조건</li><li>안전 및 인간 존중의 가치는 설계 목표에서 기본이 되어야 함</li><li>윤리 문제는 정량적으로 결정될 수 없으며, 시대와 상황에 따라 적용되는 기준이 달라질 수 있어 공학적 가치와 갈등요인으로 작용</li></ul></li><li>윤리적인 문제는 설계 프로세스의 전 과정에서 발생<ul><li>재료의 선택 : 특정 업체로부터의 부품 채택</li><li>협력자로부터 이루어지는 작업의 품질 : 품질 검사 요건의 완화</li><li>시간의 제약과 무리한 시장 요구 : 무리하게 짧은 개발기간에 의한 품질의 저하와 안전기준의 미달</li><li>사내의 권한관계 : 상급자의 부당한 업무 지시 등</li></ul></li></ul><h3 id="발생-원인-개인적"><a href="#발생-원인-개인적" class="headerlink" title="발생 원인(개인적)"></a>발생 원인(개인적)</h3><ul><li>무조건 기존의 것만을 따르려는 관습</li><li>공학자의 기술적 결핍</li><li>부실한 경영으로 인해 발생하는 시간 또는 자원의 부족</li><li>서로 다른 분야 사이에서 정보를 공유하지 않고 벽을 쌓는 배타적 이기주의</li><li>잠재적인 문제는 누군가에 의해 해결될 수 있을 것이라는 무사안일주의</li><li>부주의한 사용자 또는 소유자에 의한 제품의 부적절한 사용 또는 폐기</li><li>설계 활동에서 정직하지 못한 행동과 단기간에 결과를 요구하는 경영진의 압박</li><li>제품이 판매, 사용될 때 그 제품이 어떻게 사용되고 있는지에 대한 관심 부족</li></ul><h3 id="공학자와-기업"><a href="#공학자와-기업" class="headerlink" title="공학자와 기업"></a>공학자와 기업</h3><ul><li>공학자의 윤리적 딜레마<ul><li>대부분의 공학 활동은 기업을 통해 이루어짐</li><li>대부분 전문적인 독립성과 관료주의적인 충성 사이의 갈등에서 발생<ul><li>전문가적 이상과 사업적 요구 사이의 역할적 의무 때문에 갈등</li></ul></li></ul></li><li>기업의 기본 조건<ul><li>공학 외에 제약, 법, 과학 등과 같은 직업은 기업과 관련이 있음</li><li>기업은 윤리적 딜레마를 야기시키기도 하지만 공학에 기초한 유용한 제품을 만드는 곳</li><li>대부분의 기업은 도덕적으로 책임을 지려고 노력함</li></ul></li><li>기업의 사회적 책임에 대한 비판</li><li>기업의 대중에 대한 책임의식 확대</li><li>공학자의 도덕적 역할과 기업의 공생</li><li>기업 책임</li><li>윤리와 전문가의 기업정신</li></ul><hr><h1 id="Automotive-Development-Process"><a href="#Automotive-Development-Process" class="headerlink" title="Automotive Development Process"></a>Automotive Development Process</h1><h2 id="Stages-of-Product-Development"><a href="#Stages-of-Product-Development" class="headerlink" title="Stages of Product Development"></a>Stages of Product Development</h2><ol><li>Idea Generation</li><li>Idea Screening</li><li>Concept Development</li><li>Market Strategy</li><li>Feasibility Analysis / Study</li><li>Product Design</li><li>Test Marketing</li><li>Market Entry</li></ol><h2 id="NPD-New-Product-Development-Process"><a href="#NPD-New-Product-Development-Process" class="headerlink" title="NPD(New Product Development) Process"></a>NPD(New Product Development) Process</h2><ol><li>Product Planning(상품 / 제품기획)<ul><li>Idea generation</li><li>Idea screening</li></ul></li><li>Design Concept Build(개념설계)<ul><li>Concept development and testing</li></ul></li><li>Product Development(제품개발 / 상세설계)<ul><li>Product development</li></ul></li><li>Manufacturing Preparation(생산기술검증 / 양산준비)</li></ol><h2 id="Needs-amp-Solutions"><a href="#Needs-amp-Solutions" class="headerlink" title="Needs &amp; Solutions"></a>Needs &amp; Solutions</h2><ul><li>Needs<ul><li>Buyer Wants<ul><li>Quality</li><li>Price</li><li>Innovation</li><li>Style</li></ul></li><li>Management Wants<ul><li>Customer Satisfaction</li><li>Market Share</li><li>Maximize Profit</li></ul></li><li>Development Needs<ul><li>Improve Quality</li><li>Cost Down</li><li>Reduce Time</li><li>Solutions</li></ul></li><li>Technical Innovation<ul><li>New Technology</li></ul></li><li>Process Innovation<ul><li>Digital Development</li></ul></li></ul></li></ul><h2 id="Necessity-of-the-Process"><a href="#Necessity-of-the-Process" class="headerlink" title="Necessity of the Process"></a>Necessity of the Process</h2><ul><li>Increase Efficiency</li><li>Reduce Time &amp; Cost</li><li>Improve Product Quality</li><li>Systematic Approach</li></ul><blockquote><p><strong>Better Product, Faster into the market</strong> to survive the competition</p></blockquote><h2 id="Goals-and-Requirements"><a href="#Goals-and-Requirements" class="headerlink" title="Goals and Requirements"></a>Goals and Requirements</h2><ul><li>개발 5대 목표<ul><li>원가<ul><li>재료비 : 공용화(Cost Down by Volume), 저가 재료, 최적화</li><li>생산비 : 혼류, 최적화</li><li>개발비 : 플랫폼 성능공용화, 시스템 &amp; 프로세스</li></ul></li><li>중량 : 경량재료, 최적화</li><li>기능 : 작동, 편의</li><li>성능 : 법규, 상품성</li><li>생산성 : 성형, 조립, 최적화</li></ul></li><li>5대 성능<ul><li>강성 및 내구</li><li>충돌 및 안정</li><li>R &amp; H(Ride &amp; Handling)</li><li>소음 및 진동(NV, Noise &amp; Vibration)</li><li>얄유동(공력, 냉각공조)</li><li>Etc.</li></ul></li></ul><hr><p>#</p>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/mechanical-engineering/">Mechanical Engineering</category>
      
      
      <category domain="https://zerohertz.github.io/tags/mechanical-engineering/">Mechanical Engineering</category>
      
      
      <comments>https://zerohertz.github.io/product-design-for-manufacturing/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Classification</title>
      <link>https://zerohertz.github.io/classification/</link>
      <guid>https://zerohertz.github.io/classification/</guid>
      <pubDate>Wed, 26 Aug 2020 08:04:38 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Classification&quot;&gt;&lt;a href=&quot;#Classification&quot; class=&quot;headerlink&quot; title=&quot;Classification&quot;&gt;&lt;/a&gt;Classification&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;A form of data analysis that extracts models describing important data classes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Learning step : A classifier is built describing a predetermined set of data classes or concepts&lt;/li&gt;
&lt;li&gt;Classification step : The model is used to predict class labels for given data&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Model-Evaluation-and-Selection&quot;&gt;&lt;a href=&quot;#Model-Evaluation-and-Selection&quot; class=&quot;headerlink&quot; title=&quot;Model Evaluation and Selection&quot;&gt;&lt;/a&gt;Model Evaluation and Selection&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;Measure&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Formula&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;accuracy, recognition rate&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;$\frac{TP+TN}{P+N}$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;error rate, misclassification&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;$\frac{FP+FN}{P+N}$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;sensitivity, true positive rate, recall&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;$\frac{TP}{P}$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;specificity, true negative rate&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;$\frac{TN}{N}$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;precision&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;$\frac{TP}{TP+FP}$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Classification"><a href="#Classification" class="headerlink" title="Classification"></a>Classification</h1><blockquote><p>A form of data analysis that extracts models describing important data classes</p></blockquote><ol><li>Learning step : A classifier is built describing a predetermined set of data classes or concepts</li><li>Classification step : The model is used to predict class labels for given data</li></ol><h2 id="Model-Evaluation-and-Selection"><a href="#Model-Evaluation-and-Selection" class="headerlink" title="Model Evaluation and Selection"></a>Model Evaluation and Selection</h2><table><thead><tr><th align="center">Measure</th><th align="center">Formula</th></tr></thead><tbody><tr><td align="center">accuracy, recognition rate</td><td align="center">$\frac{TP+TN}{P+N}$</td></tr><tr><td align="center">error rate, misclassification</td><td align="center">$\frac{FP+FN}{P+N}$</td></tr><tr><td align="center">sensitivity, true positive rate, recall</td><td align="center">$\frac{TP}{P}$</td></tr><tr><td align="center">specificity, true negative rate</td><td align="center">$\frac{TN}{N}$</td></tr><tr><td align="center">precision</td><td align="center">$\frac{TP}{TP+FP}$</td></tr></tbody></table><a id="more"></a><ul><li>True positives ($TP$) : 참인 데이터를 참으로 분류</li><li>True negatives ($TN$) : 거짓인 데이터를 거짓으로 분류</li><li>False positives ($FP$) : 거짓인 데이터를 참으로 분류</li><li>False negatives ($FN$) : 참인 데이터를 거짓으로 분류</li></ul><table><thead><tr><th align="center">Actual class\Predicted class</th><th align="center">yes</th><th align="center">no</th><th align="center">Total</th></tr></thead><tbody><tr><td align="center">yes</td><td align="center">$TP$</td><td align="center">$FN$</td><td align="center">$P$</td></tr><tr><td align="center">no</td><td align="center">$FP$</td><td align="center">$TN$</td><td align="center">$N$</td></tr><tr><td align="center">Total</td><td align="center">$P’$</td><td align="center">$N’$</td><td align="center">$P+N$</td></tr></tbody></table><p>$$<br>accuracy=\frac{TP+TN}{P+N}<br>$$<br>$$<br>error\ rate=\frac{FP+FN}{P+N}<br>$$</p><h2 id="Techniques-to-Improve-Classification-Accuracy"><a href="#Techniques-to-Improve-Classification-Accuracy" class="headerlink" title="Techniques to Improve Classification Accuracy"></a>Techniques to Improve Classification Accuracy</h2><h3 id="Bagging"><a href="#Bagging" class="headerlink" title="Bagging"></a>Bagging</h3><ul><li>$n$크기의 Training set $D$가 주어졌을 때, 배깅은 $m$개의 복원 표본추출 방법과 균등 확률분포를 이용해 각각 $n’$크기를 갖는 새로운 훈련 집합 $D_i$를 생성</li><li>복원 표본추출 방법에 의해 일부 관측 데이터는 각 $D_i$에서 반복해서 나타날 수 있음</li><li>만약 $n’=n$이라고 하면, 보다 큰 $n$에 대해 집합 $D_i$는 $D$에 대해 고유한 샘플의 비율은 $1-\frac{1}{e}$을 가질 것으로 기대됨</li><li>이러한 샘플을 Bootstrap 샘플이라 함</li><li>$m$개의 모델은 $m$개의 Bootstrap 샘플들을 이용해 만들어지고 결과를 평균(in regression) 또는 투표(in classification)를 통해 결합</li></ul><h3 id="Improving-Classification-Accuracy-of-Class-Imbalanced-Data"><a href="#Improving-Classification-Accuracy-of-Class-Imbalanced-Data" class="headerlink" title="Improving Classification Accuracy of Class-Imbalanced Data"></a>Improving Classification Accuracy of Class-Imbalanced Data</h3><ul><li>Oversampling : 부족한 데이터를 Resampling</li><li>Undersampling : 많은 데이터를 Decreasing</li><li>Threshold-moving</li><li>Ensemble techniques</li></ul><h1 id="Advanced-Methods"><a href="#Advanced-Methods" class="headerlink" title="Advanced Methods"></a>Advanced Methods</h1><h2 id="Bayesian-Belief-Networks"><a href="#Bayesian-Belief-Networks" class="headerlink" title="Bayesian Belief Networks"></a>Bayesian Belief Networks</h2><h2 id="Classification-by-Backpropagation"><a href="#Classification-by-Backpropagation" class="headerlink" title="Classification by Backpropagation"></a>Classification by Backpropagation</h2><h3 id="A-Multilayer-Feed-Forward-Neural-Network"><a href="#A-Multilayer-Feed-Forward-Neural-Network" class="headerlink" title="A Multilayer Feed-Forward Neural Network"></a>A Multilayer Feed-Forward Neural Network</h3><p><img src="https://user-images.githubusercontent.com/42334717/89788337-f3f95f00-db59-11ea-9b1e-6cf13e2c398a.png" alt="Feed-Forward Neural Network"></p>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/book/">Book</category>
      
      <category domain="https://zerohertz.github.io/categories/book/data-mining/">Data Mining</category>
      
      
      <category domain="https://zerohertz.github.io/tags/machine-learning/">Machine Learning</category>
      
      <category domain="https://zerohertz.github.io/tags/signal-processing/">Signal Processing</category>
      
      <category domain="https://zerohertz.github.io/tags/dnn/">DNN</category>
      
      <category domain="https://zerohertz.github.io/tags/statistics/">Statistics</category>
      
      
      <comments>https://zerohertz.github.io/classification/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>hexo-generator-redirect</title>
      <link>https://zerohertz.github.io/hexo-generator-redirect/</link>
      <guid>https://zerohertz.github.io/hexo-generator-redirect/</guid>
      <pubDate>Thu, 20 Aug 2020 11:46:01 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Hexo&lt;/code&gt;에서 &lt;code&gt;url&lt;/code&gt;을 &lt;code&gt;redirection&lt;/code&gt;해주는 플러그인&lt;/p&gt;
&lt;h1 id=&quot;Install&quot;&gt;&lt;a href=&quot;#Install&quot; class=&quot;headerlink&quot; title=&quot;Install&quot;&gt;&lt;/a&gt;Install&lt;/h1&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.css&quot;&gt;
            &lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/prismjs/themes/prism-tomorrow.css&quot;&gt;
            &lt;script src=&quot;//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.js&quot;&gt;&lt;/script&gt;
            &lt;div id=&#39;zerohertz2&#39; style=&#39;height: 30px&#39;&gt;&lt;/div&gt;
            &lt;script&gt;
        new GDemo(&#39;#zerohertz2&#39;)
          .openApp(&#39;terminal&#39;, {minHeight: &#39;30px&#39;, windowTitle: &#39;zerohertz@zerohertz: ~&#39;, promptString: &#39;zerohertz@zerohertz ~&#39;})
    .command(`sudo npm install hexo&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;generator&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;redirect &lt;span class=&quot;token comment&quot;&gt;--save&lt;/span&gt;`, {onCompleteDelay: 300})
        .respond(``)
        .end();
    &lt;/script&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><code>Hexo</code>에서 <code>url</code>을 <code>redirection</code>해주는 플러그인</p><h1 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h1><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.css">            <link rel="stylesheet" href="//cdn.jsdelivr.net/npm/prismjs/themes/prism-tomorrow.css">            <script src="//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.js"></script>            <div id='zerohertz2' style='height: 30px'></div>            <script>        new GDemo('#zerohertz2')          .openApp('terminal', {minHeight: '30px', windowTitle: 'zerohertz@zerohertz: ~', promptString: 'zerohertz@zerohertz ~'})    .command(`sudo npm install hexo<span class="token operator">-</span>generator<span class="token operator">-</span>redirect <span class="token comment">--save</span>`, {onCompleteDelay: 300})        .respond(``)        .end();    </script><a id="more"></a><h1 id="Use"><a href="#Use" class="headerlink" title="Use"></a>Use</h1><figure class="highlight plain"><figcaption><span>/layout/redirect.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;% const newUrl &#x3D; full_url_for(page.target.path) %&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;Page address was changed&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;p&gt;The new page address is &lt;a href&#x3D;&quot;&lt;%&#x3D; newUrl %&gt;&quot;&gt;&lt;%&#x3D; newUrl %&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">  setTimeout(function()&#123; document.location.href &#x3D; &#39;&lt;%&#x3D; newUrl %&gt;&#39;; &#125;, 1000);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight md"><figcaption><span>example.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: &gt;-</span><br><span class="line">  A PHM Approach to Additive Manufacturing Equipment Health Monitoring, Fault</span><br><span class="line">  Diagnosis, and Quality Control</span><br><span class="line">date: 2020-01-30 09:43:24</span><br><span class="line">redirect<span class="emphasis">_from:</span></span><br><span class="line"><span class="emphasis">- /2020/01/30/a-phm-approach-to-additive-manufacturing-equipment-health-monitoring-fault-diagnosis-and-quality-control/</span></span><br></pre></td></tr></table></figure><p><a href="https://zerohertz.github.io/2020/01/30/a-phm-approach-to-additive-manufacturing-equipment-health-monitoring-fault-diagnosis-and-quality-control/">https://zerohertz.github.io/2020/01/30/a-phm-approach-to-additive-manufacturing-equipment-health-monitoring-fault-diagnosis-and-quality-control/</a></p>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/etc/">Etc.</category>
      
      
      <category domain="https://zerohertz.github.io/tags/git/">Git</category>
      
      
      <comments>https://zerohertz.github.io/hexo-generator-redirect/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>hexo-generator-alias</title>
      <link>https://zerohertz.github.io/hexo-generator-alias/</link>
      <guid>https://zerohertz.github.io/hexo-generator-alias/</guid>
      <pubDate>Thu, 20 Aug 2020 03:04:41 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Hexo&lt;/code&gt;에서 &lt;code&gt;url&lt;/code&gt;을 &lt;code&gt;redirection&lt;/code&gt;해주는 플러그인&lt;/p&gt;
&lt;h1 id=&quot;Install&quot;&gt;&lt;a href=&quot;#Install&quot; class=&quot;headerlink&quot; title=&quot;Install&quot;&gt;&lt;/a&gt;Install&lt;/h1&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.css&quot;&gt;
            &lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/prismjs/themes/prism-tomorrow.css&quot;&gt;
            &lt;script src=&quot;//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.js&quot;&gt;&lt;/script&gt;
            &lt;div id=&#39;zerohertz1&#39; style=&#39;height: 30px&#39;&gt;&lt;/div&gt;
            &lt;script&gt;
        new GDemo(&#39;#zerohertz1&#39;)
          .openApp(&#39;terminal&#39;, {minHeight: &#39;30px&#39;, windowTitle: &#39;zerohertz@zerohertz: ~&#39;, promptString: &#39;zerohertz@zerohertz ~&#39;})
    .command(`sudo npm install hexo&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;generator&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token class builtin&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;--save&lt;/span&gt;`, {onCompleteDelay: 300})
        .respond(``)
        .end();
    &lt;/script&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><code>Hexo</code>에서 <code>url</code>을 <code>redirection</code>해주는 플러그인</p><h1 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h1><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.css">            <link rel="stylesheet" href="//cdn.jsdelivr.net/npm/prismjs/themes/prism-tomorrow.css">            <script src="//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.js"></script>            <div id='zerohertz1' style='height: 30px'></div>            <script>        new GDemo('#zerohertz1')          .openApp('terminal', {minHeight: '30px', windowTitle: 'zerohertz@zerohertz: ~', promptString: 'zerohertz@zerohertz ~'})    .command(`sudo npm install hexo<span class="token operator">-</span>generator<span class="token operator">-</span><span class="token class builtin">alias</span> <span class="token comment">--save</span>`, {onCompleteDelay: 300})        .respond(``)        .end();    </script><a id="more"></a><h1 id="Use"><a href="#Use" class="headerlink" title="Use"></a>Use</h1><blockquote><p>검색 시 기존의 url을 노출</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/90713568-95ae4800-e2e0-11ea-8856-5a62f01e517e.png" alt="기존"></p><blockquote><p>404</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/90713667-cf7f4e80-e2e0-11ea-8e78-2bc71f7c62cd.png" alt="404"></p><figure class="highlight xml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alias:</span><br><span class="line">    기존 url: 새로운 url</span><br><span class="line">    /2020/01/30/a-phm-approach-to-additive-manufacturing-equipment-health-monitoring-fault-diagnosis-and-quality-control/: /a-phm-approach-to-additive-manufacturing-equipment-health-monitoring-fault-diagnosis-and-quality-control/</span><br></pre></td></tr></table></figure><p><a href="https://zerohertz.github.io/2020/01/30/a-phm-approach-to-additive-manufacturing-equipment-health-monitoring-fault-diagnosis-and-quality-control/">https://zerohertz.github.io/2020/01/30/a-phm-approach-to-additive-manufacturing-equipment-health-monitoring-fault-diagnosis-and-quality-control/</a></p><ul><li><code>_config.yml</code>에 위의 소스를 사용하여 <code>redirection</code> 가능</li><li><code>url</code>은 <code>local</code> 위치로 지정</li></ul>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/etc/">Etc.</category>
      
      
      <category domain="https://zerohertz.github.io/tags/git/">Git</category>
      
      
      <comments>https://zerohertz.github.io/hexo-generator-alias/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Serial Communication(Arduino to RaspberryPi)</title>
      <link>https://zerohertz.github.io/serial-communication-arduino-to-raspberrypi/</link>
      <guid>https://zerohertz.github.io/serial-communication-arduino-to-raspberrypi/</guid>
      <pubDate>Tue, 18 Aug 2020 04:24:03 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;CMD를-통한-Serial-통신&quot;&gt;&lt;a href=&quot;#CMD를-통한-Serial-통신&quot; class=&quot;headerlink&quot; title=&quot;CMD를 통한 Serial 통신&quot;&gt;&lt;/a&gt;CMD를 통한 Serial 통신&lt;/h1&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.css&quot;&gt;
            &lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/prismjs/themes/prism-tomorrow.css&quot;&gt;
            &lt;script src=&quot;//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.js&quot;&gt;&lt;/script&gt;
            &lt;div id=&#39;zerohertz&#39; style=&#39;height: 130px&#39;&gt;&lt;/div&gt;
            &lt;script&gt;
        new GDemo(&#39;#zerohertz&#39;)
          .openApp(&#39;terminal&#39;, {minHeight: &#39;130px&#39;, windowTitle: &#39;pi@raspberrypi: ~&#39;, promptString: &#39;pi@raspberrypi:~ $&#39;})
    .command(`sudo usermod &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;G tty pi`, {onCompleteDelay: 300}).command(`sudo usermod &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;G dialout pi`, {onCompleteDelay: 300}).command(`stty &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;F &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;dev&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;ttyACM0 raw &lt;span class=&quot;token number&quot;&gt;115200&lt;/span&gt; cs8 clocal &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;cstopb`, {onCompleteDelay: 300}).command(`cat &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;dev&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;ttyACM0`, {onCompleteDelay: 300})
        .respond(``)
        .end();
    &lt;/script&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="CMD를-통한-Serial-통신"><a href="#CMD를-통한-Serial-통신" class="headerlink" title="CMD를 통한 Serial 통신"></a>CMD를 통한 Serial 통신</h1><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.css">            <link rel="stylesheet" href="//cdn.jsdelivr.net/npm/prismjs/themes/prism-tomorrow.css">            <script src="//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.js"></script>            <div id='zerohertz' style='height: 130px'></div>            <script>        new GDemo('#zerohertz')          .openApp('terminal', {minHeight: '130px', windowTitle: 'pi@raspberrypi: ~', promptString: 'pi@raspberrypi:~ $'})    .command(`sudo usermod <span class="token operator">-</span>a <span class="token operator">-</span>G tty pi`, {onCompleteDelay: 300}).command(`sudo usermod <span class="token operator">-</span>a <span class="token operator">-</span>G dialout pi`, {onCompleteDelay: 300}).command(`stty <span class="token operator">-</span>F <span class="token operator">/</span>dev<span class="token operator">/</span>ttyACM0 raw <span class="token number">115200</span> cs8 clocal <span class="token operator">-</span>cstopb`, {onCompleteDelay: 300}).command(`cat <span class="token operator">/</span>dev<span class="token operator">/</span>ttyACM0`, {onCompleteDelay: 300})        .respond(``)        .end();    </script><a id="more"></a><h1 id="Python을-통한-Serial-통신"><a href="#Python을-통한-Serial-통신" class="headerlink" title="Python을 통한 Serial 통신"></a>Python을 통한 Serial 통신</h1><figure class="highlight python"><figcaption><span>ser.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> serial</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">ser = serial.Serial(<span class="string">&#x27;/dev/ttyACM0&#x27;</span>, <span class="number">115200</span>)</span><br><span class="line">f = open(<span class="string">&#x27;filename.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">t = time.time()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> ser.in_waiting != <span class="number">0</span>:</span><br><span class="line">            t1 = time.time() - t</span><br><span class="line">            t2 = round(t1, <span class="number">5</span>)</span><br><span class="line">            t3 = str(t2)</span><br><span class="line">            sensor = ser.readline()</span><br><span class="line">            print(t3)</span><br><span class="line">            print(sensor.decode())</span><br><span class="line">            f.write(t3)</span><br><span class="line">            f.write(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">            f.write(sensor.decode())</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><ul><li>파일명을 <code>serial.py</code>로 지정하면 오류가 날 수 있으므로 유의</li></ul>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/raspberrypi/">RaspberryPi</category>
      
      
      <category domain="https://zerohertz.github.io/tags/arduino/">Arduino</category>
      
      <category domain="https://zerohertz.github.io/tags/c-c/">C, C++</category>
      
      <category domain="https://zerohertz.github.io/tags/raspberrypi/">RaspberryPi</category>
      
      <category domain="https://zerohertz.github.io/tags/python/">Python</category>
      
      
      <comments>https://zerohertz.github.io/serial-communication-arduino-to-raspberrypi/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Arduino Nano 33 BLE</title>
      <link>https://zerohertz.github.io/arduino-nano-33-ble/</link>
      <guid>https://zerohertz.github.io/arduino-nano-33-ble/</guid>
      <pubDate>Tue, 11 Aug 2020 15:08:38 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Arduino-Nano-33-BLE&quot;&gt;&lt;a href=&quot;#Arduino-Nano-33-BLE&quot; class=&quot;headerlink&quot; title=&quot;Arduino Nano 33 BLE&quot;&gt;&lt;/a&gt;Arduino Nano 33 BLE&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;센서 / 모듈 이름&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Info&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;nRF52840&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;32Bbit, 64MHz MCU&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;NINA-B306&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Bluetooth&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;LSM9DS1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;9축 IMU센서&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;RESET 버튼을 2번 눌러 Upload mode로 전환&lt;/li&gt;
&lt;li&gt;&lt;code&gt;begin()&lt;/code&gt; 메서드 필수&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://mechasolution.com/shop/goods/goods_view.php?&amp;goodsno=586133&quot;&gt;Aruino Nano 33 BLE&lt;/a&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Arduino-Nano-33-BLE"><a href="#Arduino-Nano-33-BLE" class="headerlink" title="Arduino Nano 33 BLE"></a>Arduino Nano 33 BLE</h1><table><thead><tr><th align="center">센서 / 모듈 이름</th><th align="center">Info</th></tr></thead><tbody><tr><td align="center">nRF52840</td><td align="center">32Bbit, 64MHz MCU</td></tr><tr><td align="center">NINA-B306</td><td align="center">Bluetooth</td></tr><tr><td align="center">LSM9DS1</td><td align="center">9축 IMU센서</td></tr></tbody></table><ul><li>RESET 버튼을 2번 눌러 Upload mode로 전환</li><li><code>begin()</code> 메서드 필수</li></ul><p><span class="exturl" data-url="aHR0cDovL21lY2hhc29sdXRpb24uY29tL3Nob3AvZ29vZHMvZ29vZHNfdmlldy5waHA/Jmdvb2Rzbm89NTg2MTMz">Aruino Nano 33 BLE<i class="fa fa-external-link-alt"></i></span></p><a id="more"></a><hr><h1 id="Arduino-IDE와-Arduino-Nano-33-BLE-연결"><a href="#Arduino-IDE와-Arduino-Nano-33-BLE-연결" class="headerlink" title="Arduino IDE와 Arduino Nano 33 BLE 연결"></a>Arduino IDE와 Arduino Nano 33 BLE 연결</h1><img width="912" alt="Board Manager" src="https://user-images.githubusercontent.com/42334717/89915513-6ab55b80-dc31-11ea-96ee-de1eac623357.png"><ul><li><code>툴</code> - <code>보드</code> - <code>보드 매니저</code>에서 <code>arduino nano 33 BLE</code>를 검색</li><li><code>Arduino nRF528x Boards</code> 설치</li></ul><img width="1100" alt="Serial Port" src="https://user-images.githubusercontent.com/42334717/89915989-ffb85480-dc31-11ea-946e-f56a7c213746.png"><ul><li><code>툴</code> - <code>포트</code> - <code>Arduino Nano 33 BLE</code> 선택</li><li><code>보드 정보 얻기</code>로 연결 확인 가능</li><li>안된다면 케이블을 바꿔 해결 가능(데이터 전송이 가능한 케이블)</li></ul><hr><h1 id="IMU-Sensor"><a href="#IMU-Sensor" class="headerlink" title="IMU Sensor"></a>IMU Sensor</h1><img width="730" alt="Manage Library" src="https://user-images.githubusercontent.com/42334717/89916584-be747480-dc32-11ea-98e8-2d2c457aa54f.png"><ul><li><code>툴</code> - <code>라이브러리 관리...</code></li></ul><img width="912" alt="LSM9DS1" src="https://user-images.githubusercontent.com/42334717/89916551-b583a300-dc32-11ea-8d7d-549241512a9c.png"><ul><li>9축 IMU센서의 이름 <code>LSM9DS1</code> 검색 후 <code>Arduino_LSM9DS1</code> 라이브러리 다운로드</li></ul><figure class="highlight c++"><figcaption><span>IMU.ino</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Arduino_LSM9DS1.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> acc_x, acc_y, acc_z;</span><br><span class="line"><span class="keyword">float</span> gyro_x, gyro_y, gyro_z;</span><br><span class="line"><span class="keyword">float</span> mag_x, mag_y, mag_z;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">2000000</span>);</span><br><span class="line">  <span class="keyword">while</span>(!Serial);</span><br><span class="line">  <span class="keyword">if</span> (!IMU.begin()) &#123; <span class="comment">//LSM9DSI센서 시작</span></span><br><span class="line">    Serial.println(<span class="string">&quot;LSM9DSI센서 오류!&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  Serial.println(<span class="string">&quot;acc_x,acc_y,acc_z,gyro_x,gyro_y,gyro_z,mag_x,mag_y,mag_z&quot;</span>);</span><br><span class="line">  delay(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//가속도센서</span></span><br><span class="line">  <span class="keyword">if</span> (IMU.accelerationAvailable()) &#123;</span><br><span class="line">    IMU.readAcceleration(acc_x, acc_y, acc_z);</span><br><span class="line">    Serial.print(acc_x); Serial.print(<span class="string">&quot;,&quot;</span>); Serial.print(acc_y); Serial.print(<span class="string">&quot;,&quot;</span>); Serial.print(acc_z); Serial.print(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//자이로센서</span></span><br><span class="line">  <span class="keyword">if</span> (IMU.gyroscopeAvailable()) &#123;</span><br><span class="line">    IMU.readGyroscope(gyro_x, gyro_y, gyro_z);</span><br><span class="line">    Serial.print(gyro_x); Serial.print(<span class="string">&quot;,&quot;</span>); Serial.print(gyro_y); Serial.print(<span class="string">&quot;,&quot;</span>); Serial.print(gyro_z); Serial.print(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//지자계센서</span></span><br><span class="line">  <span class="keyword">if</span> (IMU.magneticFieldAvailable()) &#123;</span><br><span class="line">    IMU.readMagneticField(mag_x, mag_y, mag_z);</span><br><span class="line">    Serial.print(mag_x); Serial.print(<span class="string">&quot;,&quot;</span>); Serial.print(mag_y); Serial.print(<span class="string">&quot;,&quot;</span>); Serial.println(mag_z);</span><br><span class="line">  &#125;</span><br><span class="line">  delay(<span class="number">50</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Graph</p></blockquote><img width="1204" alt="IMU" src="https://user-images.githubusercontent.com/42334717/89924286-c6d1ad00-dc3c-11ea-9da0-2ff8961262f9.png"><hr><h1 id="Bluetooth-Module"><a href="#Bluetooth-Module" class="headerlink" title="Bluetooth Module"></a>Bluetooth Module</h1><img width="912" alt="스크린샷 2020-08-12 오전 1 47 07" src="https://user-images.githubusercontent.com/42334717/89924997-bcfc7980-dc3d-11ea-8533-10b7bea3d618.png"><figure class="highlight c++"><figcaption><span>PeripheralExplorer.ino</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Peripheral Explorer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  This example scans for BLE peripherals until one with a particular name (&quot;LED&quot;)</span></span><br><span class="line"><span class="comment">  is found. Then connects, and discovers + prints all the peripheral&#x27;s attributes.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  The circuit:</span></span><br><span class="line"><span class="comment">  - Arduino MKR WiFi 1010, Arduino Uno WiFi Rev2 board, Arduino Nano 33 IoT,</span></span><br><span class="line"><span class="comment">    Arduino Nano 33 BLE, or Arduino Nano 33 BLE Sense board.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  You can use it with another board that is compatible with this library and the</span></span><br><span class="line"><span class="comment">  Peripherals -&gt; LED example.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  This example code is in the public domain.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ArduinoBLE.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line">  <span class="keyword">while</span> (!Serial);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// begin initialization</span></span><br><span class="line">  <span class="keyword">if</span> (!BLE.begin()) &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;starting BLE failed!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Serial.println(<span class="string">&quot;BLE Central - Peripheral Explorer&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// start scanning for peripherals</span></span><br><span class="line">  BLE.scan();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// check if a peripheral has been discovered</span></span><br><span class="line">  BLEDevice peripheral = BLE.available();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (peripheral) &#123;</span><br><span class="line">    <span class="comment">// discovered a peripheral, print out address, local name, and advertised service</span></span><br><span class="line">    Serial.print(<span class="string">&quot;Found &quot;</span>);</span><br><span class="line">    Serial.print(peripheral.address());</span><br><span class="line">    Serial.print(<span class="string">&quot; &#x27;&quot;</span>);</span><br><span class="line">    Serial.print(peripheral.localName());</span><br><span class="line">    Serial.print(<span class="string">&quot;&#x27; &quot;</span>);</span><br><span class="line">    Serial.print(peripheral.advertisedServiceUuid());</span><br><span class="line">    Serial.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// see if peripheral is a LED</span></span><br><span class="line">    <span class="keyword">if</span> (peripheral.localName() == <span class="string">&quot;IMU&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">// stop scanning</span></span><br><span class="line">      BLE.stopScan();</span><br><span class="line"></span><br><span class="line">      explorerPeripheral(peripheral);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// peripheral disconnected, we are done</span></span><br><span class="line">      <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// do nothing</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">explorerPeripheral</span><span class="params">(BLEDevice peripheral)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// connect to the peripheral</span></span><br><span class="line">  Serial.println(<span class="string">&quot;Connecting ...&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (peripheral.connect()) &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;Connected&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;Failed to connect!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// discover peripheral attributes</span></span><br><span class="line">  Serial.println(<span class="string">&quot;Discovering attributes ...&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (peripheral.discoverAttributes()) &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;Attributes discovered&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;Attribute discovery failed!&quot;</span>);</span><br><span class="line">    peripheral.disconnect();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// read and print device name of peripheral</span></span><br><span class="line">  Serial.println();</span><br><span class="line">  Serial.print(<span class="string">&quot;Device name: &quot;</span>);</span><br><span class="line">  Serial.println(peripheral.deviceName());</span><br><span class="line">  Serial.print(<span class="string">&quot;Appearance: 0x&quot;</span>);</span><br><span class="line">  Serial.println(peripheral.appearance(), HEX);</span><br><span class="line">  Serial.println();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// loop the services of the peripheral and explore each</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; peripheral.serviceCount(); i++) &#123;</span><br><span class="line">    BLEService service = peripheral.service(i);</span><br><span class="line"></span><br><span class="line">    exploreService(service);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Serial.println();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// we are done exploring, disconnect</span></span><br><span class="line">  Serial.println(<span class="string">&quot;Disconnecting ...&quot;</span>);</span><br><span class="line">  peripheral.disconnect();</span><br><span class="line">  Serial.println(<span class="string">&quot;Disconnected&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exploreService</span><span class="params">(BLEService service)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// print the UUID of the service</span></span><br><span class="line">  Serial.print(<span class="string">&quot;Service &quot;</span>);</span><br><span class="line">  Serial.println(service.uuid());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// loop the characteristics of the service and explore each</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; service.characteristicCount(); i++) &#123;</span><br><span class="line">    BLECharacteristic characteristic = service.characteristic(i);</span><br><span class="line"></span><br><span class="line">    exploreCharacteristic(characteristic);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exploreCharacteristic</span><span class="params">(BLECharacteristic characteristic)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// print the UUID and properties of the characteristic</span></span><br><span class="line">  Serial.print(<span class="string">&quot;\tCharacteristic &quot;</span>);</span><br><span class="line">  Serial.print(characteristic.uuid());</span><br><span class="line">  Serial.print(<span class="string">&quot;, properties 0x&quot;</span>);</span><br><span class="line">  Serial.print(characteristic.properties(), HEX);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// check if the characteristic is readable</span></span><br><span class="line">  <span class="keyword">if</span> (characteristic.canRead()) &#123;</span><br><span class="line">    <span class="comment">// read the characteristic value</span></span><br><span class="line">    characteristic.read();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (characteristic.valueLength() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// print out the value of the characteristic</span></span><br><span class="line">      Serial.print(<span class="string">&quot;, value 0x&quot;</span>);</span><br><span class="line">      printData(characteristic.value(), characteristic.valueLength());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  Serial.println();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// loop the descriptors of the characteristic and explore each</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; characteristic.descriptorCount(); i++) &#123;</span><br><span class="line">    BLEDescriptor descriptor = characteristic.descriptor(i);</span><br><span class="line"></span><br><span class="line">    exploreDescriptor(descriptor);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exploreDescriptor</span><span class="params">(BLEDescriptor descriptor)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// print the UUID of the descriptor</span></span><br><span class="line">  Serial.print(<span class="string">&quot;\t\tDescriptor &quot;</span>);</span><br><span class="line">  Serial.print(descriptor.uuid());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// read the descriptor value</span></span><br><span class="line">  descriptor.read();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// print out the value of the descriptor</span></span><br><span class="line">  Serial.print(<span class="string">&quot;, value 0x&quot;</span>);</span><br><span class="line">  printData(descriptor.value(), descriptor.valueLength());</span><br><span class="line"></span><br><span class="line">  Serial.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printData</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> data[], <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> b = data[i]; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (b &lt; <span class="number">16</span>) &#123;</span><br><span class="line">      Serial.print(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Serial.print(b, HEX);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>Output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">BLE Central - Peripheral Explorer</span><br><span class="line">Found e8:61:57:48:1a:ef &#x27;IMU&#x27; 1101</span><br><span class="line">Connecting ...</span><br><span class="line">Connected</span><br><span class="line">Discovering attributes ...</span><br><span class="line">Attributes discovered</span><br><span class="line"></span><br><span class="line">Device name: IMU</span><br><span class="line">Appearance: <span class="number">0x0</span></span><br><span class="line"></span><br><span class="line">Service <span class="number">1800</span></span><br><span class="line">Characteristic <span class="number">2</span>a00, properties <span class="number">0x2</span>, value <span class="number">0x494D55</span></span><br><span class="line">Characteristic <span class="number">2</span>a01, properties <span class="number">0x2</span>, value <span class="number">0x0000</span></span><br><span class="line">Service <span class="number">1801</span></span><br><span class="line">Characteristic <span class="number">2</span>a05, properties <span class="number">0x20</span></span><br><span class="line">Descriptor <span class="number">2902</span>, value <span class="number">0x0000</span></span><br><span class="line">Service <span class="number">1101</span></span><br><span class="line">Characteristic <span class="number">2101</span>, properties <span class="number">0x12</span>, value <span class="number">0x0A</span></span><br><span class="line">Descriptor <span class="number">2902</span>, value <span class="number">0x0000</span></span><br><span class="line"></span><br><span class="line">Disconnecting ...</span><br><span class="line">Disconnected</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>peripheral.ino</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ArduinoBLE.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Arduino_LSM9DS1.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">BLEService <span class="title">ACC</span><span class="params">(<span class="string">&quot;1001&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">BLEFloatCharacteristic <span class="title">accX</span><span class="params">(<span class="string">&quot;2001&quot;</span>, BLERead | BLENotify)</span></span>;</span><br><span class="line"><span class="function">BLEFloatCharacteristic <span class="title">accY</span><span class="params">(<span class="string">&quot;2002&quot;</span>, BLERead | BLENotify)</span></span>;</span><br><span class="line"><span class="function">BLEFloatCharacteristic <span class="title">accZ</span><span class="params">(<span class="string">&quot;2003&quot;</span>, BLERead | BLENotify)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">BLEService <span class="title">GYRO</span><span class="params">(<span class="string">&quot;1002&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">BLEFloatCharacteristic <span class="title">gyroX</span><span class="params">(<span class="string">&quot;2011&quot;</span>, BLERead | BLENotify)</span></span>;</span><br><span class="line"><span class="function">BLEFloatCharacteristic <span class="title">gyroY</span><span class="params">(<span class="string">&quot;2012&quot;</span>, BLERead | BLENotify)</span></span>;</span><br><span class="line"><span class="function">BLEFloatCharacteristic <span class="title">gyroZ</span><span class="params">(<span class="string">&quot;2013&quot;</span>, BLERead | BLENotify)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">BLEService <span class="title">MAG</span><span class="params">(<span class="string">&quot;1003&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">BLEFloatCharacteristic <span class="title">magX</span><span class="params">(<span class="string">&quot;2021&quot;</span>, BLERead | BLENotify)</span></span>;</span><br><span class="line"><span class="function">BLEFloatCharacteristic <span class="title">magY</span><span class="params">(<span class="string">&quot;2022&quot;</span>, BLERead | BLENotify)</span></span>;</span><br><span class="line"><span class="function">BLEFloatCharacteristic <span class="title">magZ</span><span class="params">(<span class="string">&quot;2023&quot;</span>, BLERead | BLENotify)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> acc_x, acc_y, acc_z;</span><br><span class="line"><span class="keyword">float</span> gyro_x, gyro_y, gyro_z;</span><br><span class="line"><span class="keyword">float</span> mag_x, mag_y, mag_z;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(!BLE.begin()) &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;Starting BLE Failed!&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!IMU.begin()) &#123; <span class="comment">//LSM9DSI센서 시작</span></span><br><span class="line">    Serial.println(<span class="string">&quot;LSM9DSI센서 오류!&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  BLE.setDeviceName(<span class="string">&quot;IMU&quot;</span>);</span><br><span class="line">  BLE.setLocalName(<span class="string">&quot;IMU&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  BLE.setAdvertisedService(ACC);</span><br><span class="line">  BLE.setAdvertisedService(GYRO);</span><br><span class="line">  BLE.setAdvertisedService(MAG);</span><br><span class="line">  ACC.addCharacteristic(accX);</span><br><span class="line">  ACC.addCharacteristic(accY);</span><br><span class="line">  ACC.addCharacteristic(accZ);</span><br><span class="line">  GYRO.addCharacteristic(gyroX);</span><br><span class="line">  GYRO.addCharacteristic(gyroY);</span><br><span class="line">  GYRO.addCharacteristic(gyroZ);</span><br><span class="line">  MAG.addCharacteristic(magX);</span><br><span class="line">  MAG.addCharacteristic(magY);</span><br><span class="line">  MAG.addCharacteristic(magZ);</span><br><span class="line">  BLE.addService(ACC);</span><br><span class="line">  BLE.addService(GYRO);</span><br><span class="line">  BLE.addService(MAG);</span><br><span class="line">  BLE.setConnectable(<span class="literal">true</span>);</span><br><span class="line">  BLE.setAdvertisingInterval(<span class="number">100</span>);</span><br><span class="line">  BLE.advertise();</span><br><span class="line">  Serial.println(<span class="string">&quot;Bluetooth Device Active, Waiting for Connections...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  BLEDevice central = BLE.central();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(central) &#123;</span><br><span class="line">    Serial.print(<span class="string">&quot;Connected to Central: &quot;</span>);</span><br><span class="line">    Serial.println(central.address());</span><br><span class="line">    <span class="keyword">while</span>(central.connected()) &#123;</span><br><span class="line">      IMU.readAcceleration(acc_x, acc_y, acc_z);</span><br><span class="line">      IMU.readGyroscope(gyro_x, gyro_y, gyro_z);</span><br><span class="line">      IMU.readMagneticField(mag_x, mag_y, mag_z);      </span><br><span class="line">      accX.writeValue(acc_x);</span><br><span class="line">      accY.writeValue(acc_y);</span><br><span class="line">      accZ.writeValue(acc_z);</span><br><span class="line">      gyroX.writeValue(gyro_x);</span><br><span class="line">      gyroY.writeValue(gyro_y);</span><br><span class="line">      gyroZ.writeValue(gyro_z);</span><br><span class="line">      magX.writeValue(mag_x);</span><br><span class="line">      magY.writeValue(mag_y);</span><br><span class="line">      magZ.writeValue(mag_z);</span><br><span class="line">      Serial.println(acc_x);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  Serial.print(<span class="string">&quot;Disconnected from Central: &quot;</span>);</span><br><span class="line">  Serial.println(BLE.address());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>central.ino</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ArduinoBLE.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> dat&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> asdf[<span class="number">4</span>];</span><br><span class="line">  <span class="keyword">float</span> zxcv;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">getData</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> data[], <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">  dat dat;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    dat.asdf[i] = data[i]; </span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> dat.zxcv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printcsv</span><span class="params">(BLECharacteristic c1, BLECharacteristic c2, BLECharacteristic c3, BLECharacteristic c4, BLECharacteristic c5, BLECharacteristic c6, BLECharacteristic c7, BLECharacteristic c8, BLECharacteristic c9)</span></span>&#123;</span><br><span class="line">  c1.read();</span><br><span class="line">  c2.read();</span><br><span class="line">  c3.read();</span><br><span class="line">  c4.read();</span><br><span class="line">  c5.read();</span><br><span class="line">  c6.read();</span><br><span class="line">  c7.read();</span><br><span class="line">  c8.read();</span><br><span class="line">  c9.read(); </span><br><span class="line">  <span class="keyword">float</span> f1=getData(c1.value(), c1.valueLength());</span><br><span class="line">  <span class="keyword">float</span> f2=getData(c2.value(), c2.valueLength());</span><br><span class="line">  <span class="keyword">float</span> f3=getData(c3.value(), c3.valueLength());</span><br><span class="line">  <span class="keyword">float</span> f4=getData(c4.value(), c4.valueLength());</span><br><span class="line">  <span class="keyword">float</span> f5=getData(c5.value(), c5.valueLength());</span><br><span class="line">  <span class="keyword">float</span> f6=getData(c6.value(), c6.valueLength());</span><br><span class="line">  <span class="keyword">float</span> f7=getData(c7.value(), c7.valueLength());</span><br><span class="line">  <span class="keyword">float</span> f8=getData(c8.value(), c8.valueLength());</span><br><span class="line">  <span class="keyword">float</span> f9=getData(c9.value(), c9.valueLength());</span><br><span class="line">  Serial.print(f1);</span><br><span class="line">  Serial.print(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  Serial.print(f2);</span><br><span class="line">  Serial.print(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  Serial.print(f3);</span><br><span class="line">  Serial.print(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  Serial.print(f4);</span><br><span class="line">  Serial.print(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  Serial.print(f5);</span><br><span class="line">  Serial.print(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  Serial.print(f6);</span><br><span class="line">  Serial.print(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  Serial.print(f7);</span><br><span class="line">  Serial.print(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  Serial.print(f8);</span><br><span class="line">  Serial.print(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  Serial.print(f9);</span><br><span class="line">  Serial.print(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!BLE.begin()) &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;Starting BLE Failed!&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  BLE.scan();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  BLEDevice peripheral = BLE.available();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(peripheral)&#123;</span><br><span class="line">    <span class="keyword">if</span>(peripheral.localName()==<span class="string">&quot;IMU&quot;</span>)&#123;</span><br><span class="line">      BLE.stopScan();</span><br><span class="line">      <span class="keyword">if</span>(peripheral.connect())&#123;</span><br><span class="line">        Serial.println(<span class="string">&quot;Connect1&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(peripheral.discoverAttributes())&#123;</span><br><span class="line">        Serial.println(<span class="string">&quot;Connect2&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      BLEService acc=peripheral.service(<span class="string">&quot;1001&quot;</span>);</span><br><span class="line">      BLECharacteristic accx=acc.characteristic(<span class="string">&quot;2001&quot;</span>);</span><br><span class="line">      BLECharacteristic accy=acc.characteristic(<span class="string">&quot;2002&quot;</span>);</span><br><span class="line">      BLECharacteristic accz=acc.characteristic(<span class="string">&quot;2003&quot;</span>);</span><br><span class="line">      BLEService gyro=peripheral.service(<span class="string">&quot;1002&quot;</span>);</span><br><span class="line">      BLECharacteristic gyrox=gyro.characteristic(<span class="string">&quot;2011&quot;</span>);</span><br><span class="line">      BLECharacteristic gyroy=gyro.characteristic(<span class="string">&quot;2012&quot;</span>);</span><br><span class="line">      BLECharacteristic gyroz=gyro.characteristic(<span class="string">&quot;2013&quot;</span>);</span><br><span class="line">      BLEService mag=peripheral.service(<span class="string">&quot;1003&quot;</span>);</span><br><span class="line">      BLECharacteristic magx=mag.characteristic(<span class="string">&quot;2021&quot;</span>);</span><br><span class="line">      BLECharacteristic magy=mag.characteristic(<span class="string">&quot;2022&quot;</span>);</span><br><span class="line">      BLECharacteristic magz=mag.characteristic(<span class="string">&quot;2023&quot;</span>);</span><br><span class="line">      <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="comment">//        accx.read();</span></span><br><span class="line"><span class="comment">//        float f1=getData(accx.value(),accx.valueLength());</span></span><br><span class="line"><span class="comment">//        Serial.print(f1);</span></span><br><span class="line"><span class="comment">//        Serial.print(&#x27;,&#x27;);</span></span><br><span class="line"><span class="comment">//        accy.read();</span></span><br><span class="line"><span class="comment">//        float f2=getData(accy.value(),accy.valueLength());</span></span><br><span class="line"><span class="comment">//        Serial.print(f2);</span></span><br><span class="line"><span class="comment">//        Serial.print(&#x27;,&#x27;);</span></span><br><span class="line"><span class="comment">//        accz.read();</span></span><br><span class="line"><span class="comment">//        float f3=getData(accz.value(),accz.valueLength());</span></span><br><span class="line"><span class="comment">//        Serial.println(f3);</span></span><br><span class="line">        <span class="keyword">if</span>(peripheral.connected())&#123;</span><br><span class="line">          printcsv(accx,accy,accz,gyrox,gyroy,gyroz,magx,magy,magz);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">          peripheral.disconnect();</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  BLE.scan();</span><br><span class="line">  Serial.println(<span class="string">&quot;rescan&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/c-c/">C, C++</category>
      
      <category domain="https://zerohertz.github.io/categories/c-c/arduino/">Arduino</category>
      
      
      <category domain="https://zerohertz.github.io/tags/arduino/">Arduino</category>
      
      <category domain="https://zerohertz.github.io/tags/c-c/">C, C++</category>
      
      <category domain="https://zerohertz.github.io/tags/raspberrypi/">RaspberryPi</category>
      
      <category domain="https://zerohertz.github.io/tags/python/">Python</category>
      
      
      <comments>https://zerohertz.github.io/arduino-nano-33-ble/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LabVIEW</title>
      <link>https://zerohertz.github.io/labview/</link>
      <guid>https://zerohertz.github.io/labview/</guid>
      <pubDate>Thu, 06 Aug 2020 05:03:22 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;LabVIEW-시작&quot;&gt;&lt;a href=&quot;#LabVIEW-시작&quot; class=&quot;headerlink&quot; title=&quot;LabVIEW 시작&quot;&gt;&lt;/a&gt;LabVIEW 시작&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;ni.com&quot;&gt;LabVIEW Download&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;시작 화면&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/42334717/89501783-e4e37b80-d7fe-11ea-8070-7fad634b4753.png&quot; alt=&quot;시작 화면&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Front Panel &amp;amp; Block Diagram&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/42334717/89502100-6affc200-d7ff-11ea-86c3-39dfe880abf8.png&quot; alt=&quot;Front Panel &amp;amp; Block Diagram&quot;&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="LabVIEW-시작"><a href="#LabVIEW-시작" class="headerlink" title="LabVIEW 시작"></a>LabVIEW 시작</h1><p><a href="ni.com">LabVIEW Download</a></p><blockquote><p>시작 화면</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/89501783-e4e37b80-d7fe-11ea-8070-7fad634b4753.png" alt="시작 화면"></p><blockquote><p>Front Panel &amp; Block Diagram</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/89502100-6affc200-d7ff-11ea-86c3-39dfe880abf8.png" alt="Front Panel &amp; Block Diagram"></p><a id="more"></a><hr><h1 id="기본-연산"><a href="#기본-연산" class="headerlink" title="기본 연산"></a>기본 연산</h1><blockquote><p>AND of Boolean</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/89502740-6f78aa80-d800-11ea-9560-0d685b1425b9.png" alt="AND"></p><blockquote><p>Add of String</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/89502927-bff00800-d800-11ea-9e35-8a4a0a2f7c06.png" alt="Add"></p><ul><li><code>Change to Indicator</code>를 통하여 Output으로 전환</li><li><code>Ctrl + U</code> : 아이콘 재정렬</li><li><code>Ctrl + B</code> : 끊어진 와이어 삭제</li><li><code>Ctrl + T</code> : Block Diagram 창 복구</li></ul><hr><h1 id="While-loop"><a href="#While-loop" class="headerlink" title="While loop"></a>While loop</h1><blockquote><p>While loop</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/89503293-4ad10280-d801-11ea-9ff8-4b3dbd3627f1.png" alt="while"></p><hr><h1 id="형변환"><a href="#형변환" class="headerlink" title="형변환"></a>형변환</h1><blockquote><p>형변환</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/89507525-95557d80-d807-11ea-8b72-a7926e1f8ab0.png" alt="형변환"></p><hr><h1 id="배열"><a href="#배열" class="headerlink" title="배열"></a>배열</h1><blockquote><p>배열</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/90225562-8d6f8c00-de4c-11ea-9d7c-2911ad82feb7.png" alt="배열"></p><blockquote><p>Build Array</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/90226442-f86d9280-de4d-11ea-9252-05e65b29a655.png" alt="Build Array"></p><blockquote><p>사칙연산</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/90227271-3cad6280-de4f-11ea-8e01-daf9bf07525b.png" alt="사칙연산"></p><blockquote><p>Delete From Array</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/90227586-cb21e400-de4f-11ea-92eb-b3fbaca70b46.png" alt="Delete From Array"></p><hr><h1 id="Cluster"><a href="#Cluster" class="headerlink" title="Cluster"></a>Cluster</h1><blockquote><p>Cluster</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/90230455-88163f80-de54-11ea-8c5d-3f0a7051f9eb.png" alt="Cluster"></p><hr><h1 id="Formula-Node"><a href="#Formula-Node" class="headerlink" title="Formula Node"></a>Formula Node</h1><blockquote><p>Formula Node</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/90231941-e04e4100-de56-11ea-997f-ff5113fa4229.png" alt="Formula Node"></p>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/labview/">LabVIEW</category>
      
      
      <category domain="https://zerohertz.github.io/tags/labview/">LabVIEW</category>
      
      
      <comments>https://zerohertz.github.io/labview/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Diagnosis Systems for Ball Bearing Cage Defects using Fisher Discriminant Ratio</title>
      <link>https://zerohertz.github.io/diagnosis-systems-for-ball-bearing-cage-defects-using-fisher-discriminant-ratio/</link>
      <guid>https://zerohertz.github.io/diagnosis-systems-for-ball-bearing-cage-defects-using-fisher-discriminant-ratio/</guid>
      <pubDate>Wed, 29 Jul 2020 02:51:10 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Abstract&quot;&gt;&lt;a href=&quot;#Abstract&quot; class=&quot;headerlink&quot; title=&quot;Abstract&quot;&gt;&lt;/a&gt;Abstract&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/42334717/90792834-f1f78300-e345-11ea-9563-22bd2a9604f4.png&quot; alt=&quot;Abstract&quot;&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h1><p><img src="https://user-images.githubusercontent.com/42334717/90792834-f1f78300-e345-11ea-9563-22bd2a9604f4.png" alt="Abstract"></p><a id="more"></a><hr><h1 id="Poster"><a href="#Poster" class="headerlink" title="Poster"></a>Poster</h1><p><img src="https://user-images.githubusercontent.com/42334717/91074437-811ed680-e677-11ea-8728-9699ddb3e62e.jpg" alt="PP05-042 오효근"></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1plcm9oZXJ0ei96ZXJvaGVydHouZ2l0aHViLmlvL2ZpbGVzLzUxMTkyMjgvUFAwNS0wNDIucGRm">PP05-042 오효근.pdf<i class="fa fa-external-link-alt"></i></span></p><hr><h1 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h1><figure class="highlight r"><figcaption><span>fdr.R</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line">setwd(<span class="string">&quot;C:/Users/ohg34/Downloads&quot;</span>)</span><br><span class="line"></span><br><span class="line">normal=read.csv(<span class="string">&#x27;normal.csv&#x27;</span>,header=<span class="literal">F</span>)</span><br><span class="line">fault=read.csv(<span class="string">&#x27;fault.csv&#x27;</span>,header=<span class="literal">F</span>)</span><br><span class="line"></span><br><span class="line">normal=normal[<span class="number">100000</span>:<span class="number">200000</span>,<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">fault=fault[<span class="number">100000</span>:<span class="number">200000</span>,<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">fdr=<span class="keyword">function</span>(data1,data2)&#123;</span><br><span class="line">  ff=(mean(data1)-mean(data2))^<span class="number">2</span>/((sd(data1))^<span class="number">2</span>+(sd(data2))^<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">return</span>(ff)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allfdr=<span class="keyword">function</span>(data1,data2)&#123;</span><br><span class="line">  i=<span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span>(i&lt;=ncol(data1))&#123;</span><br><span class="line">    cat(i,<span class="string">&#x27; : &#x27;</span>,fdr(data1[,i],data2[,i]),<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sk=<span class="keyword">function</span>(x,Winsiz)&#123;</span><br><span class="line">  i=<span class="number">0</span></span><br><span class="line">  sk=<span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>((i+Winsiz)&lt;=length(x))&#123;</span><br><span class="line">    j=<span class="number">1</span></span><br><span class="line">    sam=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(j&lt;=Winsiz)&#123;</span><br><span class="line">      sam[j]=x[i+j]</span><br><span class="line">      j=j+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    sk[i+<span class="number">1</span>]&lt;-sum(((sam-mean(sam))^<span class="number">3</span>)/sd(sam)^<span class="number">3</span>)*(<span class="number">1</span>/(Winsiz-<span class="number">1</span>))</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>(sk)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ku=<span class="keyword">function</span>(x,Winsiz)&#123;</span><br><span class="line">  i=<span class="number">0</span></span><br><span class="line">  ku=<span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>((i+Winsiz)&lt;=length(x))&#123;</span><br><span class="line">    j=<span class="number">1</span></span><br><span class="line">    sam=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(j&lt;=Winsiz)&#123;</span><br><span class="line">      sam[j]=x[i+j]</span><br><span class="line">      j=j+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    ku[i+<span class="number">1</span>]&lt;-sum(((sam-mean(sam))^<span class="number">4</span>)/sd(sam)^<span class="number">4</span>)*(<span class="number">1</span>/(Winsiz-<span class="number">1</span>))</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>(ku)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rm=<span class="keyword">function</span>(x,Winsiz)&#123;</span><br><span class="line">  i=<span class="number">0</span></span><br><span class="line">  rm=<span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>((i+Winsiz)&lt;=length(x))&#123;</span><br><span class="line">    j=<span class="number">1</span></span><br><span class="line">    sam=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(j&lt;=Winsiz)&#123;</span><br><span class="line">      sam[j]=x[i+j]</span><br><span class="line">      j=j+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    rm[i+<span class="number">1</span>]&lt;-sqrt(sum(sam^<span class="number">2</span>)/Winsiz)</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>(rm)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p2p=<span class="keyword">function</span>(x,Winsiz)&#123;</span><br><span class="line">  i=<span class="number">0</span></span><br><span class="line">  pp=<span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>((i+Winsiz)&lt;=length(x))&#123;</span><br><span class="line">    j=<span class="number">1</span></span><br><span class="line">    sam=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(j&lt;=Winsiz)&#123;</span><br><span class="line">      sam[j]=x[i+j]</span><br><span class="line">      j=j+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    pp[i+<span class="number">1</span>]&lt;-max(sam)-min(sam)</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>(pp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">iq=<span class="keyword">function</span>(x,Winsiz)&#123;</span><br><span class="line">  i=<span class="number">0</span></span><br><span class="line">  qq=<span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>((i+Winsiz)&lt;=length(x))&#123;</span><br><span class="line">    j=<span class="number">1</span></span><br><span class="line">    sam=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(j&lt;=Winsiz)&#123;</span><br><span class="line">      sam[j]=x[i+j]</span><br><span class="line">      j=j+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    qq[i+<span class="number">1</span>]&lt;-IQR(sam)</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>(qq)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cf=<span class="keyword">function</span>(x,Winsiz)&#123;</span><br><span class="line">  i=<span class="number">0</span></span><br><span class="line">  cc=<span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>((i+Winsiz)&lt;=length(x))&#123;</span><br><span class="line">    j=<span class="number">1</span></span><br><span class="line">    sam=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(j&lt;=Winsiz)&#123;</span><br><span class="line">      sam[j]=x[i+j]</span><br><span class="line">      j=j+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    cc[i+<span class="number">1</span>]&lt;-(max(sam)-min(sam))/(sqrt(sum(sam^<span class="number">2</span>)/Winsiz))</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>(cc)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test=<span class="keyword">function</span>(data,Winsiz)&#123;</span><br><span class="line">  X_skew=sk(data$V2,Winsiz)</span><br><span class="line">  X_kurt=ku(data$V2,Winsiz)</span><br><span class="line">  X_rms=rm(data$V2,Winsiz)</span><br><span class="line">  X_p2p=p2p(data$V2,Winsiz)</span><br><span class="line">  X_iq=iq(data$V2,Winsiz)</span><br><span class="line">  X_cf=cf(data$V2,Winsiz)</span><br><span class="line">  Y_skew=sk(data$V3,Winsiz)</span><br><span class="line">  Y_kurt=ku(data$V3,Winsiz)</span><br><span class="line">  Y_rms=rm(data$V3,Winsiz)</span><br><span class="line">  Y_p2p=p2p(data$V3,Winsiz)</span><br><span class="line">  Y_iq=iq(data$V3,Winsiz)</span><br><span class="line">  Y_cf=cf(data$V3,Winsiz)</span><br><span class="line">  Z_skew=sk(data$V4,Winsiz)</span><br><span class="line">  Z_kurt=ku(data$V4,Winsiz)</span><br><span class="line">  Z_rms=rm(data$V4,Winsiz)</span><br><span class="line">  Z_p2p=p2p(data$V4,Winsiz)</span><br><span class="line">  Z_iq=iq(data$V4,Winsiz)</span><br><span class="line">  Z_cf=cf(data$V4,Winsiz)</span><br><span class="line">  all=cbind(X_skew,X_kurt,X_rms,X_p2p,X_iq,X_cf,Y_skew,Y_kurt,Y_rms,Y_p2p,Y_iq,Y_cf,Z_skew,Z_kurt,Z_rms,Z_p2p,Z_iq,Z_cf)</span><br><span class="line">  options(max.print=<span class="number">10000000</span>)</span><br><span class="line">  <span class="keyword">return</span>(all)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FDRtest=<span class="keyword">function</span>(max,size,start)&#123;</span><br><span class="line">  j=start</span><br><span class="line">  i=<span class="number">1</span></span><br><span class="line">  </span><br><span class="line">  x_sk=<span class="number">0</span></span><br><span class="line">  x_ku=<span class="number">0</span></span><br><span class="line">  x_rm=<span class="number">0</span></span><br><span class="line">  x_p2p=<span class="number">0</span></span><br><span class="line">  x_iq=<span class="number">0</span></span><br><span class="line">  x_cf=<span class="number">0</span></span><br><span class="line">  y_sk=<span class="number">0</span></span><br><span class="line">  y_ku=<span class="number">0</span></span><br><span class="line">  y_rm=<span class="number">0</span></span><br><span class="line">  y_p2p=<span class="number">0</span></span><br><span class="line">  y_iq=<span class="number">0</span></span><br><span class="line">  y_cf=<span class="number">0</span></span><br><span class="line">  z_sk=<span class="number">0</span></span><br><span class="line">  z_ku=<span class="number">0</span></span><br><span class="line">  z_rm=<span class="number">0</span></span><br><span class="line">  z_p2p=<span class="number">0</span></span><br><span class="line">  z_iq=<span class="number">0</span></span><br><span class="line">  z_cf=<span class="number">0</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(j&lt;=max)&#123;</span><br><span class="line">    h=test(normal,j)</span><br><span class="line">    f=test(fault,j)</span><br><span class="line">    </span><br><span class="line">    x_sk[i]&lt;-fdr(f[,<span class="number">1</span>],h[,<span class="number">1</span>])</span><br><span class="line">    x_ku[i]&lt;-fdr(f[,<span class="number">2</span>],h[,<span class="number">2</span>])</span><br><span class="line">    x_rm[i]&lt;-fdr(f[,<span class="number">3</span>],h[,<span class="number">3</span>])</span><br><span class="line">    x_p2p[i]&lt;-fdr(f[,<span class="number">4</span>],h[,<span class="number">4</span>])</span><br><span class="line">    x_iq[i]&lt;-fdr(f[,<span class="number">5</span>],h[,<span class="number">5</span>])</span><br><span class="line">    x_cf[i]&lt;-fdr(f[,<span class="number">6</span>],h[,<span class="number">6</span>])</span><br><span class="line">    y_sk[i]&lt;-fdr(f[,<span class="number">7</span>],h[,<span class="number">7</span>])</span><br><span class="line">    y_ku[i]&lt;-fdr(f[,<span class="number">8</span>],h[,<span class="number">8</span>])</span><br><span class="line">    y_rm[i]&lt;-fdr(f[,<span class="number">9</span>],h[,<span class="number">9</span>])</span><br><span class="line">    y_p2p[i]&lt;-fdr(f[,<span class="number">10</span>],h[,<span class="number">10</span>])</span><br><span class="line">    y_iq[i]&lt;-fdr(f[,<span class="number">11</span>],h[,<span class="number">11</span>])</span><br><span class="line">    y_cf[i]&lt;-fdr(f[,<span class="number">12</span>],h[,<span class="number">12</span>])</span><br><span class="line">    z_sk[i]&lt;-fdr(f[,<span class="number">13</span>],h[,<span class="number">13</span>])</span><br><span class="line">    z_ku[i]&lt;-fdr(f[,<span class="number">14</span>],h[,<span class="number">14</span>])</span><br><span class="line">    z_rm[i]&lt;-fdr(f[,<span class="number">15</span>],h[,<span class="number">15</span>])</span><br><span class="line">    z_p2p[i]&lt;-fdr(f[,<span class="number">16</span>],h[,<span class="number">16</span>])</span><br><span class="line">    z_iq[i]&lt;-fdr(f[,<span class="number">17</span>],h[,<span class="number">17</span>])</span><br><span class="line">    z_cf[i]&lt;-fdr(f[,<span class="number">18</span>],h[,<span class="number">18</span>])</span><br><span class="line">    </span><br><span class="line">    print(j)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(i%%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">      cat((j-start)/(max-start)*<span class="number">100</span>,<span class="string">&#x27;%\n&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    j=j+size</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  data=cbind(x_sk,x_ku,x_rm,x_p2p,x_iq,x_cf,y_sk,y_ku,y_rm,y_p2p,y_iq,y_cf,z_sk,z_ku,z_rm,z_p2p,z_iq,z_cf)</span><br><span class="line">  <span class="keyword">return</span>(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fdr_dat=FDRtest(<span class="number">100000</span>,<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line">write.table(fdr_dat,<span class="string">&#x27;fdr.csv&#x27;</span>,sep=<span class="string">&#x27;,&#x27;</span>,row.names=<span class="literal">F</span>)</span><br></pre></td></tr></table></figure><figure class="highlight r"><figcaption><span>Fast_fdr.R</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line">setwd(<span class="string">&quot;C:/Users/ohg34/Downloads&quot;</span>)</span><br><span class="line"></span><br><span class="line">normal=read.csv(<span class="string">&#x27;normal.csv&#x27;</span>,header=<span class="literal">F</span>)</span><br><span class="line">fault=read.csv(<span class="string">&#x27;fault.csv&#x27;</span>,header=<span class="literal">F</span>)</span><br><span class="line"></span><br><span class="line">normal=normal[<span class="number">100000</span>:<span class="number">2000000</span>,<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">fault=fault[<span class="number">100000</span>:<span class="number">2000000</span>,<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">fdr=<span class="keyword">function</span>(data1,data2)&#123;</span><br><span class="line">  ff=(mean(data1)-mean(data2))^<span class="number">2</span>/((sd(data1))^<span class="number">2</span>+(sd(data2))^<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">return</span>(ff)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allfdr=<span class="keyword">function</span>(data1,data2)&#123;</span><br><span class="line">  i=<span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span>(i&lt;=ncol(data1))&#123;</span><br><span class="line">    cat(i,<span class="string">&#x27; : &#x27;</span>,fdr(data1[,i],data2[,i]),<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sk=<span class="keyword">function</span>(x,Winsiz)&#123;</span><br><span class="line">  i=<span class="number">0</span></span><br><span class="line">  sk=<span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>(i&lt;floor(length(x)/Winsiz))&#123;</span><br><span class="line">    j=<span class="number">1</span></span><br><span class="line">    sam=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(j&lt;=Winsiz)&#123;</span><br><span class="line">      sam[j]=x[i*Winsiz+j]</span><br><span class="line">      j=j+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    sk[i+<span class="number">1</span>]&lt;-sum(((sam-mean(sam))^<span class="number">3</span>)/sd(sam)^<span class="number">3</span>)*(<span class="number">1</span>/(Winsiz-<span class="number">1</span>))</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>(sk)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ku=<span class="keyword">function</span>(x,Winsiz)&#123;</span><br><span class="line">  i=<span class="number">0</span></span><br><span class="line">  ku=<span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>(i&lt;floor(length(x)/Winsiz))&#123;</span><br><span class="line">    j=<span class="number">1</span></span><br><span class="line">    sam=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(j&lt;=Winsiz)&#123;</span><br><span class="line">      sam[j]=x[i*Winsiz+j]</span><br><span class="line">      j=j+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    ku[i+<span class="number">1</span>]&lt;-sum(((sam-mean(sam))^<span class="number">4</span>)/sd(sam)^<span class="number">4</span>)*(<span class="number">1</span>/(Winsiz-<span class="number">1</span>))</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>(ku)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rm=<span class="keyword">function</span>(x,Winsiz)&#123;</span><br><span class="line">  i=<span class="number">0</span></span><br><span class="line">  rm=<span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>(i&lt;floor(length(x)/Winsiz))&#123;</span><br><span class="line">    j=<span class="number">1</span></span><br><span class="line">    sam=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(j&lt;=Winsiz)&#123;</span><br><span class="line">      sam[j]=x[i*Winsiz+j]</span><br><span class="line">      j=j+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    rm[i+<span class="number">1</span>]&lt;-sqrt(sum(sam^<span class="number">2</span>)/Winsiz)</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>(rm)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p2p=<span class="keyword">function</span>(x,Winsiz)&#123;</span><br><span class="line">  i=<span class="number">0</span></span><br><span class="line">  pp=<span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>(i&lt;floor(length(x)/Winsiz))&#123;</span><br><span class="line">    j=<span class="number">1</span></span><br><span class="line">    sam=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(j&lt;=Winsiz)&#123;</span><br><span class="line">      sam[j]=x[i*Winsiz+j]</span><br><span class="line">      j=j+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    pp[i+<span class="number">1</span>]&lt;-max(sam)-min(sam)</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>(pp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">iq=<span class="keyword">function</span>(x,Winsiz)&#123;</span><br><span class="line">  i=<span class="number">0</span></span><br><span class="line">  qq=<span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>(i&lt;floor(length(x)/Winsiz))&#123;</span><br><span class="line">    j=<span class="number">1</span></span><br><span class="line">    sam=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(j&lt;=Winsiz)&#123;</span><br><span class="line">      sam[j]=x[i*Winsiz+j]</span><br><span class="line">      j=j+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    qq[i+<span class="number">1</span>]&lt;-IQR(sam)</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>(qq)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cf=<span class="keyword">function</span>(x,Winsiz)&#123;</span><br><span class="line">  i=<span class="number">0</span></span><br><span class="line">  cc=<span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>(i&lt;floor(length(x)/Winsiz))&#123;</span><br><span class="line">    j=<span class="number">1</span></span><br><span class="line">    sam=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(j&lt;=Winsiz)&#123;</span><br><span class="line">      sam[j]=x[i*Winsiz+j]</span><br><span class="line">      j=j+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    cc[i+<span class="number">1</span>]&lt;-(max(sam)-min(sam))/(sqrt(sum(sam^<span class="number">2</span>)/Winsiz))</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>(cc)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test=<span class="keyword">function</span>(data,Winsiz)&#123;</span><br><span class="line">  X_skew=sk(data$V2,Winsiz)</span><br><span class="line">  X_kurt=ku(data$V2,Winsiz)</span><br><span class="line">  X_rms=rm(data$V2,Winsiz)</span><br><span class="line">  X_p2p=p2p(data$V2,Winsiz)</span><br><span class="line">  X_iq=iq(data$V2,Winsiz)</span><br><span class="line">  X_cf=cf(data$V2,Winsiz)</span><br><span class="line">  all=cbind(X_skew,X_kurt,X_rms,X_p2p,X_iq,X_cf)</span><br><span class="line">  options(max.print=<span class="number">10000000</span>)</span><br><span class="line">  <span class="keyword">return</span>(all)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FDRtest=<span class="keyword">function</span>(max,size,start)&#123;</span><br><span class="line">  j=start</span><br><span class="line">  i=<span class="number">1</span></span><br><span class="line">  </span><br><span class="line">  x_sk=<span class="number">0</span></span><br><span class="line">  x_ku=<span class="number">0</span></span><br><span class="line">  x_rm=<span class="number">0</span></span><br><span class="line">  x_p2p=<span class="number">0</span></span><br><span class="line">  x_iq=<span class="number">0</span></span><br><span class="line">  x_cf=<span class="number">0</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(j&lt;=max)&#123;</span><br><span class="line">    h=test(normal,j)</span><br><span class="line">    f=test(fault,j)</span><br><span class="line">    </span><br><span class="line">    x_sk[i]&lt;-fdr(f[,<span class="number">1</span>],h[,<span class="number">1</span>])</span><br><span class="line">    x_ku[i]&lt;-fdr(f[,<span class="number">2</span>],h[,<span class="number">2</span>])</span><br><span class="line">    x_rm[i]&lt;-fdr(f[,<span class="number">3</span>],h[,<span class="number">3</span>])</span><br><span class="line">    x_p2p[i]&lt;-fdr(f[,<span class="number">4</span>],h[,<span class="number">4</span>])</span><br><span class="line">    x_iq[i]&lt;-fdr(f[,<span class="number">5</span>],h[,<span class="number">5</span>])</span><br><span class="line">    x_cf[i]&lt;-fdr(f[,<span class="number">6</span>],h[,<span class="number">6</span>])</span><br><span class="line">    </span><br><span class="line">    print(j)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(i%%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">      cat((j-start)/(max-start)*<span class="number">100</span>,<span class="string">&#x27;%\n&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    j=j+size</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  data=cbind(x_sk,x_ku,x_rm,x_p2p,x_iq,x_cf)</span><br><span class="line">  <span class="keyword">return</span>(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fdr_dat=FDRtest(<span class="number">100000</span>,<span class="number">1000</span>,<span class="number">1000</span>)</span><br><span class="line">write.table(fdr_dat,<span class="string">&#x27;fdr.csv&#x27;</span>,sep=<span class="string">&#x27;,&#x27;</span>,row.names=<span class="literal">F</span>)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/research/">Research</category>
      
      <category domain="https://zerohertz.github.io/categories/research/journal/">Journal</category>
      
      
      <category domain="https://zerohertz.github.io/tags/machine-learning/">Machine Learning</category>
      
      <category domain="https://zerohertz.github.io/tags/signal-processing/">Signal Processing</category>
      
      <category domain="https://zerohertz.github.io/tags/phm/">PHM</category>
      
      <category domain="https://zerohertz.github.io/tags/smart-data/">Smart data</category>
      
      <category domain="https://zerohertz.github.io/tags/dnn/">DNN</category>
      
      <category domain="https://zerohertz.github.io/tags/statistics/">Statistics</category>
      
      <category domain="https://zerohertz.github.io/tags/matlab/">Matlab</category>
      
      <category domain="https://zerohertz.github.io/tags/r/">R</category>
      
      
      <comments>https://zerohertz.github.io/diagnosis-systems-for-ball-bearing-cage-defects-using-fisher-discriminant-ratio/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>hexo-tag-gdemo</title>
      <link>https://zerohertz.github.io/hexo-tag-gdemo/</link>
      <guid>https://zerohertz.github.io/hexo-tag-gdemo/</guid>
      <pubDate>Tue, 28 Jul 2020 13:01:03 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;멋진-Plug-in&quot;&gt;&lt;a href=&quot;#멋진-Plug-in&quot; class=&quot;headerlink&quot; title=&quot;멋진 Plug in&quot;&gt;&lt;/a&gt;멋진 Plug in&lt;/h1&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.css&quot;&gt;
            &lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/prismjs/themes/prism-tomorrow.css&quot;&gt;
            &lt;script src=&quot;//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.js&quot;&gt;&lt;/script&gt;
            &lt;div id=&#39;demo-teriminal1&#39; style=&#39;height: 80px&#39;&gt;&lt;/div&gt;
            &lt;script&gt;
        new GDemo(&#39;#demo-teriminal1&#39;)
          .openApp(&#39;terminal&#39;, {minHeight: &#39;80px&#39;, windowTitle: &#39;bash&#39;, promptString: &#39;$&#39;})
    .command(`npm install @heowc&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;hexo&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;tag&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;gdemo`, {onCompleteDelay: 500})
        .respond(`install`)
        .end();
    &lt;/script&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="멋진-Plug-in"><a href="#멋진-Plug-in" class="headerlink" title="멋진 Plug in"></a>멋진 Plug in</h1><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.css">            <link rel="stylesheet" href="//cdn.jsdelivr.net/npm/prismjs/themes/prism-tomorrow.css">            <script src="//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.js"></script>            <div id='demo-teriminal1' style='height: 80px'></div>            <script>        new GDemo('#demo-teriminal1')          .openApp('terminal', {minHeight: '80px', windowTitle: 'bash', promptString: '$'})    .command(`npm install @heowc<span class="token operator">/</span>hexo<span class="token operator">-</span>tag<span class="token operator">-</span>gdemo`, {onCompleteDelay: 500})        .respond(`install`)        .end();    </script><a id="more"></a><hr><h1 id="사용법"><a href="#사용법" class="headerlink" title="사용법"></a>사용법</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gdemo_terminal &#39;command1;command2;...&#39; &#39;minHeight&#39; &#39;windowTitle&#39; &#39;onCompleteDelay&#39; &#39;promptString&#39; &#39;id&#39; &#39;highlightingLang&#39; %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endgdemo_terminal %&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.css">            <link rel="stylesheet" href="//cdn.jsdelivr.net/npm/prismjs/themes/prism-tomorrow.css">            <script src="//cdn.jsdelivr.net/npm/@glorious/demo@0.11.1/dist/gdemo.min.js"></script>            <div id='career' style='height: 150px'></div>            <script>        new GDemo('#career')          .openApp('terminal', {minHeight: '150px', windowTitle: 'Career', promptString: '$'})    .command(`<span class="token number">2017.03</span> ~ <span class="token punctuation">:</span> Konkuk Univ<span class="token operator">.</span> Mechanical Engineering`, {onCompleteDelay: 300}).command(`<span class="token number">2018.06</span> ~ <span class="token number">2019.11</span> <span class="token punctuation">:</span> Former undergraduate researcher at MRV Lab<span class="token operator">.</span><span class="token punctuation">(</span>Medical Robotics and Virtual Reality Laboratory<span class="token punctuation">)</span>`, {onCompleteDelay: 300}).command(`<span class="token number">2019.11</span> ~ <span class="token punctuation">:</span> Undergraduate researcher at SiM Lab<span class="token operator">.</span><span class="token punctuation">(</span>Smart intelligent Manufacturing system Laboratory<span class="token punctuation">)</span>`, {onCompleteDelay: 300})        .respond(``)        .end();    </script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gdemo_terminal &#39;2017.03 ~ : Konkuk Univ. Mechanical Engineering;2018.06 ~ 2019.11 : Former undergraduate researcher at MRV Lab.(Medical Robotics and Virtual Reality Laboratory);2019.11 ~ : Undergraduate researcher at SiM Lab.(Smart intelligent Manufacturing system Laboratory)&#39; &#39;150px&#39; &#39;Career&#39; &#39;300&#39; &#39;$&#39; &#39;career&#39; &#39;vim&#39; %&#125;</span><br><span class="line">&#123;% endgdemo_terminal %&#125;</span><br></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly9oZW93Yy5kZXYvMjAxOC8xMS8xNC9pbnRyb2R1Y3Rpb24taGV4by10YWctZ2RlbW8v">Reference<i class="fa fa-external-link-alt"></i></span></p>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/etc/">Etc.</category>
      
      
      <category domain="https://zerohertz.github.io/tags/git/">Git</category>
      
      
      <comments>https://zerohertz.github.io/hexo-tag-gdemo/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Source Code(Obstructive Sleep Apnea)</title>
      <link>https://zerohertz.github.io/source-code-obstructive-sleep-apnea/</link>
      <guid>https://zerohertz.github.io/source-code-obstructive-sleep-apnea/</guid>
      <pubDate>Mon, 27 Jul 2020 09:27:01 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Prototype-1-Arduino-Computer&quot;&gt;&lt;a href=&quot;#Prototype-1-Arduino-Computer&quot; class=&quot;headerlink&quot; title=&quot;Prototype 1(Arduino, Computer)&quot;&gt;&lt;/a&gt;Prototype 1(Arduino, Computer)&lt;/h1&gt;&lt;h2 id=&quot;Arduino&quot;&gt;&lt;a href=&quot;#Arduino&quot; class=&quot;headerlink&quot; title=&quot;Arduino&quot;&gt;&lt;/a&gt;Arduino&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;figcaption&gt;&lt;span&gt;Senosr.ino&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Serial.begin(&lt;span class=&quot;number&quot;&gt;2000000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x_val = analogRead(A0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; y_val = analogRead(A1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; z_val = analogRead(A2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; AE = analogRead(A7);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(AE &amp;gt;= &lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    AE = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    AE = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Serial.print(x_val);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Serial.print(&lt;span class=&quot;string&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Serial.print(y_val);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Serial.print(&lt;span class=&quot;string&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Serial.print(z_val);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Serial.print(&lt;span class=&quot;string&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Serial.print(AE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Serial.print(&lt;span class=&quot;string&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  delay(&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Prototype-1-Arduino-Computer"><a href="#Prototype-1-Arduino-Computer" class="headerlink" title="Prototype 1(Arduino, Computer)"></a>Prototype 1(Arduino, Computer)</h1><h2 id="Arduino"><a href="#Arduino" class="headerlink" title="Arduino"></a>Arduino</h2><figure class="highlight c++"><figcaption><span>Senosr.ino</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">2000000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> x_val = analogRead(A0);</span><br><span class="line">  <span class="keyword">int</span> y_val = analogRead(A1);</span><br><span class="line">  <span class="keyword">int</span> z_val = analogRead(A2);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> AE = analogRead(A7);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(AE &gt;= <span class="number">500</span>)&#123;</span><br><span class="line">    AE = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    AE = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  Serial.print(x_val);</span><br><span class="line">  Serial.print(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">  Serial.print(y_val);</span><br><span class="line">  Serial.print(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">  Serial.print(z_val);</span><br><span class="line">  Serial.print(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">  Serial.print(AE);</span><br><span class="line">  Serial.print(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  delay(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><figcaption><span>Serial.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;CSerialComm.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CSerialComm SerialComm;</span><br><span class="line"></span><br><span class="line">ofstream file;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;File name : &quot;</span>;</span><br><span class="line"><span class="built_in">string</span> nameOfFile;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; nameOfFile;</span><br><span class="line">nameOfFile = nameOfFile + <span class="string">&quot;.csv&quot;</span>;</span><br><span class="line">file.open(nameOfFile);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Port num : &quot;</span>;</span><br><span class="line"><span class="built_in">string</span> port_name;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; port_name;</span><br><span class="line"><span class="keyword">char</span> port[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(port, port_name.c_str());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SerialComm.connect(port))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Serial port is connected!!\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Sercial connection fail!!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">Sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">BYTE data_init[<span class="number">32</span>];</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (j &lt; <span class="number">10</span>) &#123;</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">SerialComm.readCommand(data_init[i]);</span><br><span class="line"><span class="keyword">if</span> (data_init[i] == <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">j++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; j &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">BYTE data[<span class="number">32</span>];</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line">chrono::system_clock::time_point start = <span class="built_in">std</span>::chrono::system_clock::now();</span><br><span class="line">chrono::duration&lt;<span class="keyword">double</span>&gt; sec = <span class="built_in">std</span>::chrono::system_clock::now() - start;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (GetAsyncKeyState(VK_ESCAPE)) <span class="keyword">break</span>;</span><br><span class="line">sec = <span class="built_in">std</span>::chrono::system_clock::now() - start;</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">SerialComm.readCommand(data[i]);</span><br><span class="line"><span class="keyword">if</span> (data[i] == <span class="string">&#x27;\n&#x27;</span>)&#123;</span><br><span class="line"><span class="built_in">string</span> time = to_string(sec.count());</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">str_data</span><span class="params">(data, data + i + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="built_in">string</span> str = time + <span class="string">&#x27;,&#x27;</span> + str_data;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str;</span><br><span class="line">file &lt;&lt; str;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">file.close();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>CSerialComm.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;serialport.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RETURN_SUCCESS 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RETURN_FAIL 0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CSerialComm</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CSerialComm();</span><br><span class="line">~CSerialComm();</span><br><span class="line"></span><br><span class="line">CSerialPortserial;</span><br><span class="line"><span class="function"><span class="keyword">int</span><span class="title">connect</span><span class="params">(<span class="keyword">char</span>* _portNum)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span><span class="title">readCommand</span><span class="params">(BYTE &amp;p)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span><span class="title">disconnect</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>CSerialComm.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;CSerialComm.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CSerialComm::CSerialComm() &#123;&#125;</span><br><span class="line">CSerialComm::~CSerialComm() &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CSerialComm::connect</span><span class="params">(<span class="keyword">char</span>* portNum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!serial.OpenPort(portNum))</span><br><span class="line"><span class="keyword">return</span> RETURN_FAIL;</span><br><span class="line"></span><br><span class="line">serial.ConfigurePort(<span class="number">2000000</span>, <span class="number">8</span>, FALSE, NOPARITY, ONESTOPBIT);</span><br><span class="line">serial.SetCommunicationTimeouts(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> RETURN_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CSerialComm::readCommand</span><span class="params">(BYTE &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (serial.ReadByte(p))</span><br><span class="line"><span class="keyword">return</span> RETURN_SUCCESS;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> RETURN_FAIL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CSerialComm::disconnect</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">serial.ClosePort();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="Prototype-2-Arduino-nano-33-BLE-RaspberryPi"><a href="#Prototype-2-Arduino-nano-33-BLE-RaspberryPi" class="headerlink" title="Prototype 2(Arduino nano 33 BLE, RaspberryPi)"></a>Prototype 2(Arduino nano 33 BLE, RaspberryPi)</h1><h2 id="Arduino-1"><a href="#Arduino-1" class="headerlink" title="Arduino"></a>Arduino</h2><figure class="highlight c++"><figcaption><span>peripheral.ino</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ArduinoBLE.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Arduino_LSM9DS1.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">BLEService <span class="title">ACC</span><span class="params">(<span class="string">&quot;1001&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">BLEFloatCharacteristic <span class="title">accX</span><span class="params">(<span class="string">&quot;2001&quot;</span>, BLERead | BLENotify)</span></span>;</span><br><span class="line"><span class="function">BLEFloatCharacteristic <span class="title">accY</span><span class="params">(<span class="string">&quot;2002&quot;</span>, BLERead | BLENotify)</span></span>;</span><br><span class="line"><span class="function">BLEFloatCharacteristic <span class="title">accZ</span><span class="params">(<span class="string">&quot;2003&quot;</span>, BLERead | BLENotify)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">BLEService <span class="title">GYRO</span><span class="params">(<span class="string">&quot;1002&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">BLEFloatCharacteristic <span class="title">gyroX</span><span class="params">(<span class="string">&quot;2011&quot;</span>, BLERead | BLENotify)</span></span>;</span><br><span class="line"><span class="function">BLEFloatCharacteristic <span class="title">gyroY</span><span class="params">(<span class="string">&quot;2012&quot;</span>, BLERead | BLENotify)</span></span>;</span><br><span class="line"><span class="function">BLEFloatCharacteristic <span class="title">gyroZ</span><span class="params">(<span class="string">&quot;2013&quot;</span>, BLERead | BLENotify)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">BLEService <span class="title">MAG</span><span class="params">(<span class="string">&quot;1003&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">BLEFloatCharacteristic <span class="title">magX</span><span class="params">(<span class="string">&quot;2021&quot;</span>, BLERead | BLENotify)</span></span>;</span><br><span class="line"><span class="function">BLEFloatCharacteristic <span class="title">magY</span><span class="params">(<span class="string">&quot;2022&quot;</span>, BLERead | BLENotify)</span></span>;</span><br><span class="line"><span class="function">BLEFloatCharacteristic <span class="title">magZ</span><span class="params">(<span class="string">&quot;2023&quot;</span>, BLERead | BLENotify)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> acc_x, acc_y, acc_z;</span><br><span class="line"><span class="keyword">float</span> gyro_x, gyro_y, gyro_z;</span><br><span class="line"><span class="keyword">float</span> mag_x, mag_y, mag_z;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(!BLE.begin()) &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;Starting BLE Failed!&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!IMU.begin()) &#123; <span class="comment">//LSM9DSI센서 시작</span></span><br><span class="line">    Serial.println(<span class="string">&quot;LSM9DSI센서 오류!&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  BLE.setDeviceName(<span class="string">&quot;IMU&quot;</span>);</span><br><span class="line">  BLE.setLocalName(<span class="string">&quot;IMU&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  BLE.setAdvertisedService(ACC);</span><br><span class="line">  BLE.setAdvertisedService(GYRO);</span><br><span class="line">  BLE.setAdvertisedService(MAG);</span><br><span class="line">  ACC.addCharacteristic(accX);</span><br><span class="line">  ACC.addCharacteristic(accY);</span><br><span class="line">  ACC.addCharacteristic(accZ);</span><br><span class="line">  GYRO.addCharacteristic(gyroX);</span><br><span class="line">  GYRO.addCharacteristic(gyroY);</span><br><span class="line">  GYRO.addCharacteristic(gyroZ);</span><br><span class="line">  MAG.addCharacteristic(magX);</span><br><span class="line">  MAG.addCharacteristic(magY);</span><br><span class="line">  MAG.addCharacteristic(magZ);</span><br><span class="line">  BLE.addService(ACC);</span><br><span class="line">  BLE.addService(GYRO);</span><br><span class="line">  BLE.addService(MAG);</span><br><span class="line">  BLE.setConnectable(<span class="literal">true</span>);</span><br><span class="line">  BLE.setAdvertisingInterval(<span class="number">100</span>);</span><br><span class="line">  BLE.advertise();</span><br><span class="line">  Serial.println(<span class="string">&quot;Bluetooth Device Active, Waiting for Connections...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  BLEDevice central = BLE.central();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(central) &#123;</span><br><span class="line">    Serial.print(<span class="string">&quot;Connected to Central: &quot;</span>);</span><br><span class="line">    Serial.println(central.address());</span><br><span class="line">    <span class="keyword">while</span>(central.connected()) &#123;</span><br><span class="line">      IMU.readAcceleration(acc_x, acc_y, acc_z);</span><br><span class="line">      IMU.readGyroscope(gyro_x, gyro_y, gyro_z);</span><br><span class="line">      IMU.readMagneticField(mag_x, mag_y, mag_z);      </span><br><span class="line">      accX.writeValue(acc_x);</span><br><span class="line">      accY.writeValue(acc_y);</span><br><span class="line">      accZ.writeValue(acc_z);</span><br><span class="line">      gyroX.writeValue(gyro_x);</span><br><span class="line">      gyroY.writeValue(gyro_y);</span><br><span class="line">      gyroZ.writeValue(gyro_z);</span><br><span class="line">      magX.writeValue(mag_x);</span><br><span class="line">      magY.writeValue(mag_y);</span><br><span class="line">      magZ.writeValue(mag_z);</span><br><span class="line">      Serial.println(acc_x);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  Serial.print(<span class="string">&quot;Disconnected from Central: &quot;</span>);</span><br><span class="line">  Serial.println(BLE.address());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>central.ino</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ArduinoBLE.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> dat&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> asdf[<span class="number">4</span>];</span><br><span class="line">  <span class="keyword">float</span> zxcv;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">getData</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> data[], <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">  dat dat;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    dat.asdf[i] = data[i]; </span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> dat.zxcv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printcsv</span><span class="params">(BLECharacteristic c1, BLECharacteristic c2, BLECharacteristic c3, BLECharacteristic c4, BLECharacteristic c5, BLECharacteristic c6, BLECharacteristic c7, BLECharacteristic c8, BLECharacteristic c9)</span></span>&#123;</span><br><span class="line">  c1.read();</span><br><span class="line">  c2.read();</span><br><span class="line">  c3.read();</span><br><span class="line">  c4.read();</span><br><span class="line">  c5.read();</span><br><span class="line">  c6.read();</span><br><span class="line">  c7.read();</span><br><span class="line">  c8.read();</span><br><span class="line">  c9.read(); </span><br><span class="line">  <span class="keyword">float</span> f1=getData(c1.value(), c1.valueLength());</span><br><span class="line">  <span class="keyword">float</span> f2=getData(c2.value(), c2.valueLength());</span><br><span class="line">  <span class="keyword">float</span> f3=getData(c3.value(), c3.valueLength());</span><br><span class="line">  <span class="keyword">float</span> f4=getData(c4.value(), c4.valueLength());</span><br><span class="line">  <span class="keyword">float</span> f5=getData(c5.value(), c5.valueLength());</span><br><span class="line">  <span class="keyword">float</span> f6=getData(c6.value(), c6.valueLength());</span><br><span class="line">  <span class="keyword">float</span> f7=getData(c7.value(), c7.valueLength());</span><br><span class="line">  <span class="keyword">float</span> f8=getData(c8.value(), c8.valueLength());</span><br><span class="line">  <span class="keyword">float</span> f9=getData(c9.value(), c9.valueLength());</span><br><span class="line">  Serial.print(f1);</span><br><span class="line">  Serial.print(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  Serial.print(f2);</span><br><span class="line">  Serial.print(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  Serial.print(f3);</span><br><span class="line">  Serial.print(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  Serial.print(f4);</span><br><span class="line">  Serial.print(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  Serial.print(f5);</span><br><span class="line">  Serial.print(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  Serial.print(f6);</span><br><span class="line">  Serial.print(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  Serial.print(f7);</span><br><span class="line">  Serial.print(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  Serial.print(f8);</span><br><span class="line">  Serial.print(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  Serial.print(f9);</span><br><span class="line">  Serial.print(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!BLE.begin()) &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;Starting BLE Failed!&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  BLE.scan();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  BLEDevice peripheral = BLE.available();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(peripheral)&#123;</span><br><span class="line">    <span class="keyword">if</span>(peripheral.localName()==<span class="string">&quot;IMU&quot;</span>)&#123;</span><br><span class="line">      BLE.stopScan();</span><br><span class="line">      <span class="keyword">if</span>(peripheral.connect())&#123;</span><br><span class="line">        Serial.println(<span class="string">&quot;Connect1&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(peripheral.discoverAttributes())&#123;</span><br><span class="line">        Serial.println(<span class="string">&quot;Connect2&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      BLEService acc=peripheral.service(<span class="string">&quot;1001&quot;</span>);</span><br><span class="line">      BLECharacteristic accx=acc.characteristic(<span class="string">&quot;2001&quot;</span>);</span><br><span class="line">      BLECharacteristic accy=acc.characteristic(<span class="string">&quot;2002&quot;</span>);</span><br><span class="line">      BLECharacteristic accz=acc.characteristic(<span class="string">&quot;2003&quot;</span>);</span><br><span class="line">      BLEService gyro=peripheral.service(<span class="string">&quot;1002&quot;</span>);</span><br><span class="line">      BLECharacteristic gyrox=gyro.characteristic(<span class="string">&quot;2011&quot;</span>);</span><br><span class="line">      BLECharacteristic gyroy=gyro.characteristic(<span class="string">&quot;2012&quot;</span>);</span><br><span class="line">      BLECharacteristic gyroz=gyro.characteristic(<span class="string">&quot;2013&quot;</span>);</span><br><span class="line">      BLEService mag=peripheral.service(<span class="string">&quot;1003&quot;</span>);</span><br><span class="line">      BLECharacteristic magx=mag.characteristic(<span class="string">&quot;2021&quot;</span>);</span><br><span class="line">      BLECharacteristic magy=mag.characteristic(<span class="string">&quot;2022&quot;</span>);</span><br><span class="line">      BLECharacteristic magz=mag.characteristic(<span class="string">&quot;2023&quot;</span>);</span><br><span class="line">      <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="comment">//        accx.read();</span></span><br><span class="line"><span class="comment">//        float f1=getData(accx.value(),accx.valueLength());</span></span><br><span class="line"><span class="comment">//        Serial.print(f1);</span></span><br><span class="line"><span class="comment">//        Serial.print(&#x27;,&#x27;);</span></span><br><span class="line"><span class="comment">//        accy.read();</span></span><br><span class="line"><span class="comment">//        float f2=getData(accy.value(),accy.valueLength());</span></span><br><span class="line"><span class="comment">//        Serial.print(f2);</span></span><br><span class="line"><span class="comment">//        Serial.print(&#x27;,&#x27;);</span></span><br><span class="line"><span class="comment">//        accz.read();</span></span><br><span class="line"><span class="comment">//        float f3=getData(accz.value(),accz.valueLength());</span></span><br><span class="line"><span class="comment">//        Serial.println(f3);</span></span><br><span class="line">        <span class="keyword">if</span>(peripheral.connected())&#123;</span><br><span class="line">          printcsv(accx,accy,accz,gyrox,gyroy,gyroz,magx,magy,magz);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">          peripheral.disconnect();</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  BLE.scan();</span><br><span class="line">  Serial.println(<span class="string">&quot;rescan&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><figcaption><span>ser.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> serial</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">ser = serial.Serial(<span class="string">&#x27;/dev/ttyACM0&#x27;</span>, <span class="number">115200</span>)</span><br><span class="line">f = open(<span class="string">&#x27;filename.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">t = time.time()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> ser.in_waiting != <span class="number">0</span>:</span><br><span class="line">            t1 = time.time() - t</span><br><span class="line">            t2 = round(t1, <span class="number">5</span>)</span><br><span class="line">            t3 = str(t2)</span><br><span class="line">            sensor = ser.readline()</span><br><span class="line">            print(t3)</span><br><span class="line">            print(sensor.decode())</span><br><span class="line">            f.write(t3)</span><br><span class="line">            f.write(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">            f.write(sensor.decode())</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><hr><h1 id="R"><a href="#R" class="headerlink" title="R"></a>R</h1><h2 id="Undersampling"><a href="#Undersampling" class="headerlink" title="Undersampling"></a>Undersampling</h2><figure class="highlight r"><figcaption><span>undersampling.R</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">setwd(<span class="string">&quot;/Users/zerohertz/MATLAB/Obstructive Sleep Apnea/&quot;</span>)</span><br><span class="line"></span><br><span class="line">del=read.csv(<span class="string">&quot;delta.csv&quot;</span>,header=<span class="literal">T</span>)</span><br><span class="line"></span><br><span class="line">del0=subset(del,subset=(del$Sleep==<span class="number">0</span>))</span><br><span class="line">del10=subset(del,subset=(del$Sleep==<span class="number">10</span>))</span><br><span class="line">del20=subset(del,subset=(del$Sleep==<span class="number">20</span>))</span><br><span class="line">del30=subset(del,subset=(del$Sleep==<span class="number">30</span>))</span><br><span class="line">del40=subset(del,subset=(del$Sleep==<span class="number">40</span>))</span><br><span class="line"></span><br><span class="line">s1=del10[sample(nrow(del10),<span class="number">1252</span>,replace=<span class="literal">FALSE</span>),]</span><br><span class="line">s2=del20[sample(nrow(del20),<span class="number">10954</span>,replace=<span class="literal">FALSE</span>),]</span><br><span class="line">s3=del30[sample(nrow(del30),<span class="number">1643</span>,replace=<span class="literal">FALSE</span>),]</span><br><span class="line">s4=del40[sample(nrow(del40),<span class="number">4421</span>,replace=<span class="literal">FALSE</span>),]</span><br><span class="line"></span><br><span class="line">sleep=rbind(s1,s2,s3,s4)</span><br><span class="line"></span><br><span class="line">write.table(sleep,file=<span class="string">&quot;sl1.csv&quot;</span>,sep=<span class="string">&quot;,&quot;</span>,row.names=<span class="literal">F</span>,col.names=<span class="literal">T</span>)</span><br></pre></td></tr></table></figure><h2 id="Make-Label-Data"><a href="#Make-Label-Data" class="headerlink" title="Make Label Data"></a>Make Label Data</h2><figure class="highlight r"><figcaption><span>MakeLabelData</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i &lt;= length(raw[,<span class="number">1</span>]))&#123;</span><br><span class="line">time=raw[i,<span class="number">1</span>]</span><br><span class="line">ti=time%/%<span class="number">30</span>+<span class="number">1</span></span><br><span class="line">raw[i,<span class="number">6</span>]=lab[ti,<span class="number">1</span>]</span><br><span class="line">i=i+<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">write.table(raw,file=<span class="string">&quot;label.csv&quot;</span>,sep=<span class="string">&quot;,&quot;</span>,row.names=<span class="literal">F</span>,col.names=<span class="literal">F</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="DNF-Number"><a href="#DNF-Number" class="headerlink" title="DNF Number"></a>DNF Number</h1><figure class="highlight matlab"><figcaption><span>dnf.m</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dnf_num</span> = <span class="title">dnf</span><span class="params">(c1, c2, al, be)</span></span></span><br><span class="line">    dnf_num = <span class="number">1</span>/(al+be)*(al*(kurtosis(c1)/kurtosis(c2))+be*(<span class="built_in">sqrt</span>(var(c1))/<span class="built_in">sqrt</span>(var(c2))));</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/research/">Research</category>
      
      <category domain="https://zerohertz.github.io/categories/research/journal/">Journal</category>
      
      
      <category domain="https://zerohertz.github.io/tags/machine-learning/">Machine Learning</category>
      
      <category domain="https://zerohertz.github.io/tags/signal-processing/">Signal Processing</category>
      
      <category domain="https://zerohertz.github.io/tags/phm/">PHM</category>
      
      <category domain="https://zerohertz.github.io/tags/arduino/">Arduino</category>
      
      <category domain="https://zerohertz.github.io/tags/c-c/">C, C++</category>
      
      <category domain="https://zerohertz.github.io/tags/raspberrypi/">RaspberryPi</category>
      
      <category domain="https://zerohertz.github.io/tags/python/">Python</category>
      
      <category domain="https://zerohertz.github.io/tags/dnn/">DNN</category>
      
      <category domain="https://zerohertz.github.io/tags/statistics/">Statistics</category>
      
      <category domain="https://zerohertz.github.io/tags/matlab/">Matlab</category>
      
      
      <comments>https://zerohertz.github.io/source-code-obstructive-sleep-apnea/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Matlab(12)</title>
      <link>https://zerohertz.github.io/matlab-12/</link>
      <guid>https://zerohertz.github.io/matlab-12/</guid>
      <pubDate>Fri, 17 Jul 2020 07:07:02 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;제어문&quot;&gt;&lt;a href=&quot;#제어문&quot; class=&quot;headerlink&quot; title=&quot;제어문&quot;&gt;&lt;/a&gt;제어문&lt;/h1&gt;&lt;h2 id=&quot;조건문&quot;&gt;&lt;a href=&quot;#조건문&quot; class=&quot;headerlink&quot; title=&quot;조건문&quot;&gt;&lt;/a&gt;조건문&lt;/h2&gt;&lt;h3 id=&quot;if-elseif-else&quot;&gt;&lt;a href=&quot;#if-elseif-else&quot; class=&quot;headerlink&quot; title=&quot;if-elseif-else&quot;&gt;&lt;/a&gt;if-elseif-else&lt;/h3&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; 조건&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    실행 문장&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;elseif&lt;/span&gt; 조건&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    실행 문장&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;elseif&lt;/span&gt; 조건&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    실행 문장&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    실행 문장&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;switch&quot;&gt;&lt;a href=&quot;#switch&quot; class=&quot;headerlink&quot; title=&quot;switch&quot;&gt;&lt;/a&gt;switch&lt;/h3&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt;(변수)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;(값&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        실행 문장&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;(값&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        실행 문장&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;otherwise&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        실행 문장&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="제어문"><a href="#제어문" class="headerlink" title="제어문"></a>제어문</h1><h2 id="조건문"><a href="#조건문" class="headerlink" title="조건문"></a>조건문</h2><h3 id="if-elseif-else"><a href="#if-elseif-else" class="headerlink" title="if-elseif-else"></a>if-elseif-else</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 조건<span class="number">1</span></span><br><span class="line">    실행 문장</span><br><span class="line"><span class="keyword">elseif</span> 조건<span class="number">2</span></span><br><span class="line">    실행 문장</span><br><span class="line"><span class="keyword">elseif</span> 조건<span class="number">3</span></span><br><span class="line">    실행 문장</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    실행 문장</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(변수)</span><br><span class="line">    <span class="keyword">case</span>(값<span class="number">1</span>)</span><br><span class="line">        실행 문장</span><br><span class="line">    <span class="keyword">case</span>(값<span class="number">2</span>)</span><br><span class="line">        실행 문장</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">otherwise</span></span><br><span class="line">        실행 문장</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="반복문"><a href="#반복문" class="headerlink" title="반복문"></a>반복문</h2><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(조건)</span><br><span class="line">    실행 문장</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 변수 = 시작:끝</span><br><span class="line">    실행 문장</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 변수 = 시작:delta:끝</span><br><span class="line">    실행 문장</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 변수 = [num1, num2, ...]</span><br><span class="line">    실행 문장</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><hr><h1 id="함수"><a href="#함수" class="headerlink" title="함수"></a>함수</h1><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 주석 작성 시 help 명령어에 출력</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 출력 = 함수명<span class="params">(param1, param2, ...)</span></span></span><br><span class="line">실행 문장</span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">함수명 = @(param1, param2, ...) 공식;</span><br></pre></td></tr></table></figure><hr><h1 id="DNN"><a href="#DNN" class="headerlink" title="DNN"></a>DNN</h1><figure class="highlight matlab"><figcaption><span>MNIST.m</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; digitDatasetPath=fullfile(matlabroot,<span class="string">&#x27;toolbox&#x27;</span>,<span class="string">&#x27;nnet&#x27;</span>,<span class="string">&#x27;nndemos&#x27;</span>,<span class="string">&#x27;nndatasets&#x27;</span>,<span class="string">&#x27;DigitDataset&#x27;</span>)</span><br><span class="line"></span><br><span class="line">digitDatasetPath =</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;/Applications/MATLAB_R2020a.app/toolbox/nnet/nndemos/nndatasets/DigitDataset&#x27;</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; imds=imageDatastore(digitDatasetPath,<span class="string">&#x27;IncludeSubfolders&#x27;</span>,<span class="built_in">true</span>,<span class="string">&#x27;LabelSource&#x27;</span>,<span class="string">&#x27;foldernames&#x27;</span>)</span><br><span class="line"></span><br><span class="line">imds = </span><br><span class="line"></span><br><span class="line">  ImageDatastore - 속성 있음:</span><br><span class="line"></span><br><span class="line">                       Files: &#123;</span><br><span class="line">                              <span class="string">&#x27; .../toolbox/nnet/nndemos/nndatasets/DigitDataset/0/image10000.png&#x27;</span>;</span><br><span class="line">                              <span class="string">&#x27; .../toolbox/nnet/nndemos/nndatasets/DigitDataset/0/image9001.png&#x27;</span>;</span><br><span class="line">                              <span class="string">&#x27; .../toolbox/nnet/nndemos/nndatasets/DigitDataset/0/image9002.png&#x27;</span></span><br><span class="line">                               ... and <span class="number">9997</span> more</span><br><span class="line">                              &#125;</span><br><span class="line">                     Folders: &#123;</span><br><span class="line">                              <span class="string">&#x27; .../MATLAB_R2020a.app/toolbox/nnet/nndemos/nndatasets/DigitDataset&#x27;</span></span><br><span class="line">                              &#125;</span><br><span class="line">                      Labels: [<span class="number">0</span>; <span class="number">0</span>; <span class="number">0</span> ... and <span class="number">9997</span> more categorical]</span><br><span class="line">    AlternateFileSystemRoots: &#123;&#125;</span><br><span class="line">                    ReadSize: <span class="number">1</span></span><br><span class="line">      SupportedOutputFormats: [<span class="string">&quot;png&quot;</span>    <span class="string">&quot;jpg&quot;</span>    <span class="string">&quot;jpeg&quot;</span>    <span class="string">&quot;tif&quot;</span>    <span class="string">&quot;tiff&quot;</span>]</span><br><span class="line">         DefaultOutputFormat: <span class="string">&quot;png&quot;</span></span><br><span class="line">                     ReadFcn: @readDatastoreImage</span><br><span class="line"></span><br><span class="line">&gt;&gt; <span class="built_in">figure</span>;</span><br><span class="line">perm=randperm(<span class="number">10000</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">20</span></span><br><span class="line">    subplot(<span class="number">4</span>,<span class="number">5</span>,<span class="built_in">i</span>);</span><br><span class="line">    imshow(imds.Files&#123;perm(<span class="built_in">i</span>)&#125;);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">&gt;&gt; layers=[imageInputLayer([<span class="number">28</span> <span class="number">28</span> <span class="number">1</span>])</span><br><span class="line">convolution2dLayer(<span class="number">3</span>,<span class="number">8</span>,<span class="string">&#x27;Padding&#x27;</span>,<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">batchNormalizationLayer</span><br><span class="line">reluLayer</span><br><span class="line">maxPooling2dLayer(<span class="number">2</span>,<span class="string">&#x27;Stride&#x27;</span>,<span class="number">2</span>)</span><br><span class="line">convolution2dLayer(<span class="number">3</span>,<span class="number">16</span>,<span class="string">&#x27;Padding&#x27;</span>,<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">batchNormalizationLayer</span><br><span class="line">reluLayer</span><br><span class="line">maxPooling2dLayer(<span class="number">2</span>,<span class="string">&#x27;stride&#x27;</span>,<span class="number">2</span>)</span><br><span class="line">convolution2dLayer(<span class="number">3</span>,<span class="number">32</span>,<span class="string">&#x27;Padding&#x27;</span>,<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">batchNormalizationLayer</span><br><span class="line">reluLayer</span><br><span class="line">fullyConnectedLayer(<span class="number">10</span>)</span><br><span class="line">softmaxLayer</span><br><span class="line">classificationLayer];</span><br><span class="line"></span><br><span class="line">&gt;&gt; options=trainingOptions(<span class="string">&#x27;sgdm&#x27;</span>,<span class="string">&#x27;InitialLearnRate&#x27;</span>,<span class="number">0.01</span>,<span class="string">&#x27;MaxEpochs&#x27;</span>,<span class="number">4</span>,<span class="string">&#x27;Shuffle&#x27;</span>,<span class="string">&#x27;every-epoch&#x27;</span>,<span class="string">&#x27;ExecutionEnvironment&#x27;</span>,<span class="string">&#x27;cpu&#x27;</span>,<span class="string">&#x27;Plots&#x27;</span>,<span class="string">&#x27;training-progress&#x27;</span>) <span class="comment">% gpu 가능</span></span><br><span class="line"></span><br><span class="line">options = </span><br><span class="line"></span><br><span class="line">  TrainingOptionsSGDM - 속성 있음:</span><br><span class="line"></span><br><span class="line">                    Momentum: <span class="number">0.9000</span></span><br><span class="line">            InitialLearnRate: <span class="number">0.0100</span></span><br><span class="line">           LearnRateSchedule: <span class="string">&#x27;none&#x27;</span></span><br><span class="line">         LearnRateDropFactor: <span class="number">0.1000</span></span><br><span class="line">         LearnRateDropPeriod: <span class="number">10</span></span><br><span class="line">            L2Regularization: <span class="number">1.0000e-04</span></span><br><span class="line">     GradientThresholdMethod: <span class="string">&#x27;l2norm&#x27;</span></span><br><span class="line">           GradientThreshold: Inf</span><br><span class="line">                   MaxEpochs: <span class="number">4</span></span><br><span class="line">               MiniBatchSize: <span class="number">128</span></span><br><span class="line">                     Verbose: <span class="number">1</span></span><br><span class="line">            VerboseFrequency: <span class="number">50</span></span><br><span class="line">              ValidationData: []</span><br><span class="line">         ValidationFrequency: <span class="number">50</span></span><br><span class="line">          ValidationPatience: Inf</span><br><span class="line">                     Shuffle: <span class="string">&#x27;every-epoch&#x27;</span></span><br><span class="line">              CheckpointPath: <span class="string">&#x27;&#x27;</span></span><br><span class="line">        ExecutionEnvironment: <span class="string">&#x27;cpu&#x27;</span></span><br><span class="line">                  WorkerLoad: []</span><br><span class="line">                   OutputFcn: []</span><br><span class="line">                       Plots: <span class="string">&#x27;training-progress&#x27;</span></span><br><span class="line">              SequenceLength: <span class="string">&#x27;longest&#x27;</span></span><br><span class="line">        SequencePaddingValue: <span class="number">0</span></span><br><span class="line">    SequencePaddingDirection: <span class="string">&#x27;right&#x27;</span></span><br><span class="line">        DispatchInBackground: <span class="number">0</span></span><br><span class="line">     ResetInputNormalization: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; net=trainNetwork(imds,layers,options)</span><br><span class="line">입력 데이터의 정규화를 초기화하는 중입니다.</span><br><span class="line">｜＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝｜</span><br><span class="line">｜　　Ｅｐｏｃｈ　　｜　　반복　횟수　　｜　　　　경과　시간　　　　　｜　　미니　배치　정확도　　｜　　미니　배치　손실　　｜　　기본　학습률　　｜</span><br><span class="line">｜　　　　　　　　　｜　　　　　　　　　｜　　（ｈｈ：ｍｍ：ｓｓ）　　｜　　　　　　　　　　　　　｜　　　　　　　　　　　　｜　　　　　　　　　　｜</span><br><span class="line">｜＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝｜</span><br><span class="line">｜　　　　　　　１　｜　　　　　　　１　｜　　　　　００：００：００　｜　　　　　　１０．９４％　｜　　　　　２．９６０９　｜　　　０．０１００　｜</span><br><span class="line">｜　　　　　　　１　｜　　　　　　５０　｜　　　　　００：００：０３　｜　　　　　　８１．２５％　｜　　　　　０．５８６６　｜　　　０．０１００　｜</span><br><span class="line">｜　　　　　　　２　｜　　　　　１００　｜　　　　　００：００：０５　｜　　　　　　９４．５３％　｜　　　　　０．１７１９　｜　　　０．０１００　｜</span><br><span class="line">｜　　　　　　　２　｜　　　　　１５０　｜　　　　　００：００：０７　｜　　　　　　９８．４４％　｜　　　　　０．１７８４　｜　　　０．０１００　｜</span><br><span class="line">｜　　　　　　　３　｜　　　　　２００　｜　　　　　００：００：１０　｜　　　　　１００．００％　｜　　　　　０．０６１５　｜　　　０．０１００　｜</span><br><span class="line">｜　　　　　　　４　｜　　　　　２５０　｜　　　　　００：００：１２　｜　　　　　　９８．４４％　｜　　　　　０．０７１３　｜　　　０．０１００　｜</span><br><span class="line">｜　　　　　　　４　｜　　　　　３００　｜　　　　　００：００：１４　｜　　　　　１００．００％　｜　　　　　０．０３２６　｜　　　０．０１００　｜</span><br><span class="line">｜　　　　　　　４　｜　　　　　３１２　｜　　　　　００：００：１５　｜　　　　　１００．００％　｜　　　　　０．０２９１　｜　　　０．０１００　｜</span><br><span class="line">｜＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝｜</span><br><span class="line"></span><br><span class="line">net = </span><br><span class="line"></span><br><span class="line">  SeriesNetwork - 속성 있음:</span><br><span class="line"></span><br><span class="line">         Layers: [<span class="number">15</span>×<span class="number">1</span> nnet.cnn.layer.Layer]</span><br><span class="line">     InputNames: &#123;<span class="string">&#x27;imageinput&#x27;</span>&#125;</span><br><span class="line">    OutputNames: &#123;<span class="string">&#x27;classoutput&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt; Out=classify(net,imds)</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/42334717/89501255-ff692500-d7fd-11ea-9cf5-9534f547e3c0.png" alt="trainNetwork"></p><figure class="highlight matlab"><figcaption><span>alex.m</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">camera=webcam;</span><br><span class="line">nnet=alexnet;</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">true</span></span><br><span class="line">    picture=camera.snapshot;</span><br><span class="line">    picture=imresize(picture,[<span class="number">227</span>,<span class="number">227</span>]);</span><br><span class="line">    label=classify(nnet,picture);</span><br><span class="line">    image(picture);</span><br><span class="line">    title(char(label));</span><br><span class="line">    drawnow;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/matlab/">Matlab</category>
      
      
      <category domain="https://zerohertz.github.io/tags/dnn/">DNN</category>
      
      <category domain="https://zerohertz.github.io/tags/matlab/">Matlab</category>
      
      
      <comments>https://zerohertz.github.io/matlab-12/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Development of a Obstructive Sleep Apnea Diagnosis Algorithm Using HRV</title>
      <link>https://zerohertz.github.io/development-of-a-obstructive-sleep-apnea-diagnosis-algorithm-using-hrv/</link>
      <guid>https://zerohertz.github.io/development-of-a-obstructive-sleep-apnea-diagnosis-algorithm-using-hrv/</guid>
      <pubDate>Tue, 14 Jul 2020 07:37:45 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Condition-Indicator&quot;&gt;&lt;a href=&quot;#Condition-Indicator&quot; class=&quot;headerlink&quot; title=&quot;Condition Indicator&quot;&gt;&lt;/a&gt;Condition Indicator&lt;/h1&gt;&lt;h2 id=&quot;Sleep-Fragmentation-Index-SFI&quot;&gt;&lt;a href=&quot;#Sleep-Fragmentation-Index-SFI&quot; class=&quot;headerlink&quot; title=&quot;Sleep Fragmentation Index(SFI)&quot;&gt;&lt;/a&gt;Sleep Fragmentation Index(SFI)&lt;/h2&gt;&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Apnea-Hypopnea-Index-AHI&quot;&gt;&lt;a href=&quot;#Apnea-Hypopnea-Index-AHI&quot; class=&quot;headerlink&quot; title=&quot;Apnea-Hypopnea Index(AHI)&quot;&gt;&lt;/a&gt;Apnea-Hypopnea Index(AHI)&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;수면 시, 호흡의 장애 심각도를 측정하는 지표&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Condition-Indicator"><a href="#Condition-Indicator" class="headerlink" title="Condition Indicator"></a>Condition Indicator</h1><h2 id="Sleep-Fragmentation-Index-SFI"><a href="#Sleep-Fragmentation-Index-SFI" class="headerlink" title="Sleep Fragmentation Index(SFI)"></a>Sleep Fragmentation Index(SFI)</h2><blockquote></blockquote><h2 id="Apnea-Hypopnea-Index-AHI"><a href="#Apnea-Hypopnea-Index-AHI" class="headerlink" title="Apnea-Hypopnea Index(AHI)"></a>Apnea-Hypopnea Index(AHI)</h2><blockquote><p>수면 시, 호흡의 장애 심각도를 측정하는 지표</p></blockquote><a id="more"></a><h1 id="Data-Result"><a href="#Data-Result" class="headerlink" title="Data Result"></a>Data Result</h1><h2 id="2020-07-22"><a href="#2020-07-22" class="headerlink" title="2020/07/22"></a>2020/07/22</h2><blockquote><p>특수문자 사용으로 인한 .csv 파일 저장 오류</p></blockquote><h2 id="2020-07-27"><a href="#2020-07-27" class="headerlink" title="2020/07/27"></a>2020/07/27</h2><blockquote><p>Acceleration</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/88665268-58a7c900-d119-11ea-9861-3e05d5f4c587.jpg" alt="Acc"></p><blockquote><p>Acoustic Emission</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/88665261-56de0580-d119-11ea-86b5-31a9b10bb816.jpg" alt="AE"></p><blockquote><p>Accerleration &amp; Acoustic Emission</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/88665402-868d0d80-d119-11ea-8e9f-98daa1f4f6a1.png" alt="Acc &amp; AE"></p><blockquote><p>Accerleration &amp; Acoustic Emission &amp; Scoring Data</p></blockquote><p><img src="https://user-images.githubusercontent.com/42334717/90608792-110aed80-e23e-11ea-9887-a03d635c1e58.jpg" alt="20200813_무호흡_진단_알고리즘_발표_H_Oh-3"></p><p><img src="https://user-images.githubusercontent.com/42334717/90608764-051f2b80-e23e-11ea-9156-8175f6ebb90e.jpg" alt="20200813_무호흡_진단_알고리즘_발표_H_Oh-4"></p>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/research/">Research</category>
      
      <category domain="https://zerohertz.github.io/categories/research/journal/">Journal</category>
      
      
      <category domain="https://zerohertz.github.io/tags/machine-learning/">Machine Learning</category>
      
      <category domain="https://zerohertz.github.io/tags/signal-processing/">Signal Processing</category>
      
      <category domain="https://zerohertz.github.io/tags/phm/">PHM</category>
      
      <category domain="https://zerohertz.github.io/tags/smart-data/">Smart data</category>
      
      <category domain="https://zerohertz.github.io/tags/arduino/">Arduino</category>
      
      <category domain="https://zerohertz.github.io/tags/c-c/">C, C++</category>
      
      <category domain="https://zerohertz.github.io/tags/raspberrypi/">RaspberryPi</category>
      
      <category domain="https://zerohertz.github.io/tags/python/">Python</category>
      
      <category domain="https://zerohertz.github.io/tags/dnn/">DNN</category>
      
      <category domain="https://zerohertz.github.io/tags/statistics/">Statistics</category>
      
      <category domain="https://zerohertz.github.io/tags/matlab/">Matlab</category>
      
      
      <comments>https://zerohertz.github.io/development-of-a-obstructive-sleep-apnea-diagnosis-algorithm-using-hrv/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Catia</title>
      <link>https://zerohertz.github.io/catia/</link>
      <guid>https://zerohertz.github.io/catia/</guid>
      <pubDate>Tue, 07 Jul 2020 05:26:44 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;시작&quot;&gt;&lt;a href=&quot;#시작&quot; class=&quot;headerlink&quot; title=&quot;시작&quot;&gt;&lt;/a&gt;시작&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Start&lt;/code&gt; - &lt;code&gt;Part Design&lt;/code&gt; - &lt;code&gt;Enable hybrid design&lt;/code&gt; 체크 박스 해제&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;확대&lt;ul&gt;
&lt;li&gt;가운데 누른 상태 - 왼쪽 클릭 - 위아래 이동&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;곡선의-정확도&quot;&gt;&lt;a href=&quot;#곡선의-정확도&quot; class=&quot;headerlink&quot; title=&quot;곡선의 정확도&quot;&gt;&lt;/a&gt;곡선의 정확도&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Tools&lt;/code&gt; - &lt;code&gt;Option&lt;/code&gt; - &lt;code&gt;Display&lt;/code&gt; - &lt;code&gt;Performance&lt;/code&gt; - &lt;code&gt;3D Accuracy&lt;/code&gt; - &lt;code&gt;0.01&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;축-설정&quot;&gt;&lt;a href=&quot;#축-설정&quot; class=&quot;headerlink&quot; title=&quot;축 설정&quot;&gt;&lt;/a&gt;축 설정&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Infrastructure&lt;/code&gt; - &lt;code&gt;Part Infrastructure&lt;/code&gt; - &lt;code&gt;Part Document&lt;/code&gt; - &lt;code&gt;Create an axis system&lt;/code&gt; 체크 - &lt;code&gt;Hybrid Design&lt;/code&gt; 체크 박스 해제&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="시작"><a href="#시작" class="headerlink" title="시작"></a>시작</h1><blockquote><p><code>Start</code> - <code>Part Design</code> - <code>Enable hybrid design</code> 체크 박스 해제</p></blockquote><ul><li>확대<ul><li>가운데 누른 상태 - 왼쪽 클릭 - 위아래 이동</li></ul></li></ul><h1 id="곡선의-정확도"><a href="#곡선의-정확도" class="headerlink" title="곡선의 정확도"></a>곡선의 정확도</h1><blockquote><p><code>Tools</code> - <code>Option</code> - <code>Display</code> - <code>Performance</code> - <code>3D Accuracy</code> - <code>0.01</code></p></blockquote><h1 id="축-설정"><a href="#축-설정" class="headerlink" title="축 설정"></a>축 설정</h1><blockquote><p><code>Infrastructure</code> - <code>Part Infrastructure</code> - <code>Part Document</code> - <code>Create an axis system</code> 체크 - <code>Hybrid Design</code> 체크 박스 해제</p></blockquote><a id="more"></a><h1 id="단축키"><a href="#단축키" class="headerlink" title="단축키"></a>단축키</h1><ul><li><code>Positioned Sketch</code>(Alt + s)<ul><li>일반 <code>Sketch</code>와 다르게 수평축(<code>H</code>), 수직축(<code>V</code>) 설정 가능</li><li><code>Swap</code>으로 <code>H</code>와 <code>V</code>를 바꾸기 가능</li></ul></li><li>구속<ul><li><code>Tools</code> - <code>Customize</code> - <code>Commands</code> - <code>All Commands</code> - <code>Constraint</code> - <code>Show properties...</code> - <code>Accelelator</code> - <code>space</code></li><li>구속 누르고 <code>Coincidence</code></li></ul></li><li>Exit workbench<ul><li><code>Tools</code> - <code>Customize</code> - <code>Commands</code> - <code>All Commands</code> - <code>Exit workbench</code> - <code>Show properties...</code> -<code>Accelelator</code> - <code>Alt + q</code></li></ul></li><li>Positioned Sketch<ul><li><code>Tools</code> - <code>Customize</code> - <code>Commands</code> - <code>All Commands</code> - <code>Positioned Sketch</code> - <code>Show properties...</code> -<code>Accelelator</code> - <code>Alt + s</code></li></ul></li></ul><h1 id="Pad"><a href="#Pad" class="headerlink" title="Pad"></a>Pad</h1><ul><li>높이 생성</li></ul><h1 id="Pocket"><a href="#Pocket" class="headerlink" title="Pocket"></a>Pocket</h1><ul><li>깊이 생성</li></ul><h1 id="Edge-Fillet"><a href="#Edge-Fillet" class="headerlink" title="Edge Fillet"></a>Edge Fillet</h1><ul><li>Fillet을 줄 모서리와 반경 선택</li></ul>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/mechanical-engineering/">Mechanical Engineering</category>
      
      
      <category domain="https://zerohertz.github.io/tags/mechanical-engineering/">Mechanical Engineering</category>
      
      
      <comments>https://zerohertz.github.io/catia/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Computer programming</title>
      <link>https://zerohertz.github.io/computer-programming/</link>
      <guid>https://zerohertz.github.io/computer-programming/</guid>
      <pubDate>Mon, 06 Jul 2020 01:10:44 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Day-1&quot;&gt;&lt;a href=&quot;#Day-1&quot; class=&quot;headerlink&quot; title=&quot;Day 1&quot;&gt;&lt;/a&gt;Day 1&lt;/h1&gt;&lt;h2 id=&quot;C와의-차이점&quot;&gt;&lt;a href=&quot;#C와의-차이점&quot; class=&quot;headerlink&quot; title=&quot;C와의 차이점&quot;&gt;&lt;/a&gt;C와의 차이점&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/code&gt; -&amp;gt; &lt;code&gt;#include &amp;lt;iostream&amp;gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;형식지정자 필요없어짐&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.h&lt;/code&gt; 사라짐&lt;ul&gt;
&lt;li&gt;호환은 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;의 개념&lt;ul&gt;
&lt;li&gt;object&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool&lt;/code&gt;의 개념&lt;ul&gt;
&lt;li&gt;C&lt;ul&gt;
&lt;li&gt;참 : 0 이외의 값&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C++&lt;ul&gt;
&lt;li&gt;true : 1&lt;/li&gt;
&lt;li&gt;false : 0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt;의 개념&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Practice&quot;&gt;&lt;a href=&quot;#Practice&quot; class=&quot;headerlink&quot; title=&quot;Practice&quot;&gt;&lt;/a&gt;Practice&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;practice.cpp&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot;1. a + b / 3 * 3 = &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; a + b / &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot;2. b &amp;lt;&amp;lt; 2 = &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; (b &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot;3. a != b = &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; (a != b) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot;4. b % a = &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; (b % a) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot;5. (a &amp;gt; b) ? a : b = &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; ((a &amp;gt; b) ? a : b) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot;6. sizeof(a) = &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(a) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    c = a++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot;7. C = a++ 이후 c의 값 : &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; c &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a += b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot;8. a += b 이후 a의 값 : &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot;9. a &amp;amp; b = &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; (a &amp;amp; b) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    c = (a + b, a - b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot;10. c = (a + b, a - b) 이후 c의 값 : &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; c &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Output&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt; a + b / &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2.&lt;/span&gt; b &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3.&lt;/span&gt; a != b = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;4.&lt;/span&gt; b % a = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;5.&lt;/span&gt; (a &amp;gt; b) ? a : b = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;6.&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(a) = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;7.&lt;/span&gt; C = a++ 이후 c의 값 : &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;8.&lt;/span&gt; a += b 이후 a의 값 : &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;9.&lt;/span&gt; a &amp;amp; b = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;10.&lt;/span&gt; c = (a + b, a - b) 이후 c의 값 : &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Process finished with &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt; code &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h1><h2 id="C와의-차이점"><a href="#C와의-차이점" class="headerlink" title="C와의 차이점"></a>C와의 차이점</h2><ul><li><code>#include &lt;stdio.h&gt;</code> -&gt; <code>#include &lt;iostream&gt;</code><ul><li>형식지정자 필요없어짐</li></ul></li><li><code>.h</code> 사라짐<ul><li>호환은 가능</li></ul></li><li><code>class</code>의 개념<ul><li>object</li></ul></li><li><code>bool</code>의 개념<ul><li>C<ul><li>참 : 0 이외의 값</li></ul></li><li>C++<ul><li>true : 1</li><li>false : 0</li></ul></li></ul></li><li><code>string</code>의 개념</li></ul><h2 id="Practice"><a href="#Practice" class="headerlink" title="Practice"></a>Practice</h2><blockquote><p>practice.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1. a + b / 3 * 3 = &quot;</span> &lt;&lt; a + b / <span class="number">3</span> * <span class="number">3</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2. b &lt;&lt; 2 = &quot;</span> &lt;&lt; (b &lt;&lt; <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;3. a != b = &quot;</span> &lt;&lt; (a != b) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;4. b % a = &quot;</span> &lt;&lt; (b % a) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;5. (a &gt; b) ? a : b = &quot;</span> &lt;&lt; ((a &gt; b) ? a : b) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;6. sizeof(a) = &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(a) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    c = a++;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;7. C = a++ 이후 c의 값 : &quot;</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    a += b;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;8. a += b 이후 a의 값 : &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;9. a &amp; b = &quot;</span> &lt;&lt; (a &amp; b) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    c = (a + b, a - b);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;10. c = (a + b, a - b) 이후 c의 값 : &quot;</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> a + b / <span class="number">3</span> * <span class="number">3</span> = <span class="number">14</span></span><br><span class="line"><span class="number">2.</span> b &lt;&lt; <span class="number">2</span> = <span class="number">40</span></span><br><span class="line"><span class="number">3.</span> a != b = <span class="number">1</span></span><br><span class="line"><span class="number">4.</span> b % a = <span class="number">0</span></span><br><span class="line"><span class="number">5.</span> (a &gt; b) ? a : b = <span class="number">10</span></span><br><span class="line"><span class="number">6.</span> <span class="keyword">sizeof</span>(a) = <span class="number">4</span></span><br><span class="line"><span class="number">7.</span> C = a++ 이후 c의 값 : <span class="number">5</span></span><br><span class="line"><span class="number">8.</span> a += b 이후 a의 값 : <span class="number">16</span></span><br><span class="line"><span class="number">9.</span> a &amp; b = <span class="number">0</span></span><br><span class="line"><span class="number">10.</span> c = (a + b, a - b) 이후 c의 값 : <span class="number">6</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="연산자"><a href="#연산자" class="headerlink" title="연산자"></a>연산자</h2><ul><li>산술 연산자<ul><li><code>*</code>, <code>/</code>, <code>%</code></li><li><code>+</code>, <code>-</code></li></ul></li><li>비트 이동 연산자<ul><li><code>&lt;&lt;</code>, <code>&gt;&gt;</code></li></ul></li><li>관계 연산자<ul><li><code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code></li><li><code>==</code>, <code>!=</code></li></ul></li><li>논리 연산자<ul><li><code>&amp;&amp;</code></li><li><code>||</code></li></ul></li></ul><h2 id="Plus"><a href="#Plus" class="headerlink" title="Plus"></a>Plus</h2><blockquote><p>plus.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">10</span>, y = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;x = &quot;</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;++x = &quot;</span> &lt;&lt; ++x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;x = &quot;</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;y = &quot;</span> &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;y++ = &quot;</span> &lt;&lt; y++ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;y = &quot;</span> &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line">++x = <span class="number">11</span></span><br><span class="line">x = <span class="number">11</span></span><br><span class="line">y = <span class="number">10</span></span><br><span class="line">y++ = <span class="number">10</span></span><br><span class="line">y = <span class="number">11</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h2><blockquote><p>switch.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;점수를 입력하세요 : &quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">    score = score / <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(score)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;A+ 입니다.&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;A 입니다.&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;B 입니다.&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;C 입니다.&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;F 입니다.&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Continue-amp-Break"><a href="#Continue-amp-Break" class="headerlink" title="Continue &amp; Break"></a>Continue &amp; Break</h2><blockquote><p>continue_break.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;정수 입력 : &quot;</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">        <span class="keyword">if</span>(a == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(a % <span class="number">3</span> != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h1><h2 id="Pointer"><a href="#Pointer" class="headerlink" title="Pointer"></a>Pointer</h2><blockquote><p>pointer1.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">int</span> *pa; <span class="comment">//Pointer 변수</span></span><br><span class="line">    <span class="keyword">int</span> *pb;</span><br><span class="line">    pa = &amp;a;</span><br><span class="line">    pb = &amp;b;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Pointer of a : &quot;</span> &lt;&lt; pa &lt;&lt; <span class="string">&quot; == &quot;</span> &lt;&lt; &amp;a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Pointer of b : &quot;</span> &lt;&lt; pb &lt;&lt; <span class="string">&quot; == &quot;</span> &lt;&lt; &amp;b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Pointer of a : <span class="number">0x7ffee6a4f958</span> == <span class="number">0x7ffee6a4f958</span></span><br><span class="line">Pointer of b : <span class="number">0x7ffee6a4f954</span> == <span class="number">0x7ffee6a4f954</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>pointer2.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> *pa; <span class="comment">//Pointer 변수</span></span><br><span class="line">    pa = &amp;a[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*(pa + 1) = &quot;</span> &lt;&lt; *(pa + <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a[1] = &quot;</span> &lt;&lt; a[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*(pa + <span class="number">1</span>) = <span class="number">2</span></span><br><span class="line">a[<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>포인터는 상수 - 변경 불가</li></ul><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><blockquote><p>function.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">adder</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; adder(<span class="number">13</span>, <span class="number">14</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">adder</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum;</span><br><span class="line">    sum = a + b;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">27</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>Call by Value<ul><li>값 복사 - 수정 불가</li><li>전역변수 - 누구든지 접근 가능</li></ul></li><li>Call by Address</li><li>Call by Reference</li></ul><blockquote><p>call_by_value.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a : &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;\tb : &quot;</span> &lt;&lt; b &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    swap(a, b);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a : &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;\tb : &quot;</span> &lt;&lt; b &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a : <span class="number">2</span>b : <span class="number">3</span></span><br><span class="line">a : <span class="number">2</span>b : <span class="number">3</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>call_by_address.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a : &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;\tb : &quot;</span> &lt;&lt; b &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    swap(&amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a : &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;\tb : &quot;</span> &lt;&lt; b &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = *x;</span><br><span class="line">    *x = *y;</span><br><span class="line">    *y = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>call_by_reference.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a : &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;\tb : &quot;</span> &lt;&lt; b &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    swap(a, b);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a : &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;\tb : &quot;</span> &lt;&lt; b &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a : <span class="number">2</span>b : <span class="number">3</span></span><br><span class="line">a : <span class="number">3</span>b : <span class="number">2</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li><code>swap(int, int)</code>는 기본 제공 함수</li></ul><h2 id="배열"><a href="#배열" class="headerlink" title="배열"></a>배열</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n[<span class="number">10</span>]; <span class="comment">// 정수 10개짜리 빈 메모리 공간</span></span><br><span class="line"><span class="keyword">double</span> d[] = [<span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.5</span>, <span class="number">3.9</span>]; <span class="comment">// d의 크기는 자동 4로 설정</span></span><br><span class="line">n[<span class="number">10</span>] = <span class="number">20</span>; <span class="comment">// 인덱스 0~9까지만</span></span><br><span class="line">n[<span class="number">-1</span>] = <span class="number">9.9</span>; <span class="comment">// 인덱스 음수 불가</span></span><br><span class="line"><span class="keyword">int</span> m[<span class="number">2</span>][<span class="number">5</span>]; <span class="comment">// 2행 5열의 2차원 배열 선언</span></span><br><span class="line"><span class="keyword">int</span> grade[<span class="number">2</span>][<span class="number">3</span>] = &#123;&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;, &#123;<span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><ul><li>배열은 0부터 시작</li><li>함수에 매개변수로 전달 시 배열의 크기도 함께 전달</li></ul><blockquote><p>two_dimension_array.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Ary[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i &gt;= j)&#123;</span><br><span class="line">                    Ary[i][j] = i + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    Ary[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; Ary[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">0</span> </span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> </span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Calling-a-Function-with-an-Array-as-a-Parameter"><a href="#Calling-a-Function-with-an-Array-as-a-Parameter" class="headerlink" title="Calling a Function with an Array as a Parameter"></a>Calling a Function with an Array as a Parameter</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addArray</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> size)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeDouble</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> size)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> size)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sum = addArray(n, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;배열 n의 합은 &quot;</span> &lt;&lt; sum &lt;&lt; <span class="string">&quot;입니다.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    makeDouble(n, <span class="number">5</span>);</span><br><span class="line">    printArray(n, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addArray</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> su = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">        su = su + a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> su;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeDouble</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">        a[i] = a[i] * a[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">배열 n의 합은 <span class="number">15</span>입니다.</span><br><span class="line"><span class="number">1</span><span class="number">4</span><span class="number">9</span><span class="number">16</span><span class="number">25</span></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>배열이 함수의 파라미터로 들어갈 경우<ul><li><code>int *a</code></li><li><code>int a[]</code></li></ul></li></ul><h2 id="Const-and-Pointer"><a href="#Const-and-Pointer" class="headerlink" title="Const and Pointer"></a>Const and Pointer</h2><blockquote><p>const_pointer.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> var1 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> var2 = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> *p1 = &amp;var1;</span><br><span class="line">    <span class="keyword">int</span> *<span class="keyword">const</span> p2 = &amp;var2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//*p1 = 10; 오류</span></span><br><span class="line">    var1 = <span class="number">10</span>;</span><br><span class="line">    *p2 = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; var1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; var2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li><code>const int *pNum</code> - 포인터 자체의 값이 상수</li><li><code>int *const pNum</code> - 포인터가 가리키는 값이 상수</li></ul><blockquote><p>example.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 4</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_arr</span><span class="params">(<span class="keyword">int</span> *arr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">percentage</span><span class="params">(<span class="keyword">int</span> *arr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count[N] = &#123;<span class="number">42</span>, <span class="number">37</span>, <span class="number">83</span>, <span class="number">33</span>&#125;;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;인원수 : &quot;</span>;</span><br><span class="line">    print_arr(count);</span><br><span class="line">    percentage(count);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\n백분율 : &quot;</span>;</span><br><span class="line">    print_arr(count);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_arr</span><span class="params">(<span class="keyword">int</span> *arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *(arr + i) &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">percentage</span><span class="params">(<span class="keyword">int</span> *arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">        sum = sum + *(arr + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">        *(arr + i) = *(arr + i) * <span class="number">100</span> / sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">인원수 : <span class="number">42</span><span class="number">37</span><span class="number">83</span><span class="number">33</span></span><br><span class="line">백분율 : <span class="number">21</span><span class="number">18</span><span class="number">42</span><span class="number">16</span></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><blockquote><p>getline.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">song</span><span class="params">(<span class="string">&quot;Falling in love with you&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">elvis</span><span class="params">(<span class="string">&quot;Elvis Presley&quot;</span>)</span></span>;</span><br><span class="line">    <span class="built_in">string</span> singer;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; song + <span class="string">&quot;를 부른 가수는&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;(힌트 : 첫글자는 &quot;</span> &lt;&lt; elvis[<span class="number">0</span>] &lt;&lt; <span class="string">&quot;)?&quot;</span>;</span><br><span class="line"></span><br><span class="line">    getline(<span class="built_in">cin</span>, singer);</span><br><span class="line">    <span class="keyword">if</span>(singer == elvis)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;맞았습니다.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;틀렸습니다. &quot;</span> + elvis + <span class="string">&quot;입니다.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Falling in love with you를 부른 가수는(힌트 : 첫글자는 E)?Elvis Presley</span><br><span class="line">맞았습니다.</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Falling in love with you를 부른 가수는(힌트 : 첫글자는 E)?asdf</span><br><span class="line">틀렸습니다. Elvis Presley입니다.</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li><code>char</code> - <code>&#39; &#39;</code></li><li><code>string</code> - <code>&quot; &quot;</code></li></ul><h2 id="Quiz"><a href="#Quiz" class="headerlink" title="Quiz"></a>Quiz</h2><blockquote><p>quiz1.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;문자열 입력&gt;&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    getline(<span class="built_in">cin</span>, str);</span><br><span class="line">    <span class="keyword">int</span> len = str.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; str[j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">문자열 입력&gt;&gt;Morning</span><br><span class="line">M</span><br><span class="line">Mo</span><br><span class="line">Mor</span><br><span class="line">Morn</span><br><span class="line">Morni</span><br><span class="line">Mornin</span><br><span class="line">Morning</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>quiz2.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">biggest</span><span class="params">(<span class="keyword">double</span> x[], <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> big = x[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x[i] &gt; big)</span><br><span class="line">            big = x[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> big;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> a[<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;5개의 실수를 입력하라&gt;&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;제일 큰 수 = &quot;</span> &lt;&lt; biggest(a, <span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>개의 실수를 입력하라&gt;&gt;<span class="number">20.0</span></span><br><span class="line"><span class="number">3.44</span></span><br><span class="line"><span class="number">44.66</span></span><br><span class="line"><span class="number">22.0</span></span><br><span class="line"><span class="number">40.0</span></span><br><span class="line">제일 큰 수 = <span class="number">44.66</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><hr><h1 id="Day-3"><a href="#Day-3" class="headerlink" title="Day 3"></a>Day 3</h1><h2 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> name&#123; <span class="comment">// name이라는 이름 공간 생성</span></span><br><span class="line">    <span class="comment">// 이곳에 선언된 모든 이름은 name 이름 공간에 생성된 이름</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">name::function()</span><br></pre></td></tr></table></figure><ul><li>이름(Identifier) 충돌이 발생하는 경우<ul><li>여러 명이 서로 나누어 프로젝트를 개발하는 경우</li><li>오픈 소스 혹은 다른 사람이 작성한 소스나 목적 파일을 가져와서 컴파일하거나 링크하는 경우</li></ul></li><li><code>namespace</code><ul><li>이름 충돌 해결</li><li>개발자가 자신만의 이름 공간을 생성할 수 있도록 함</li></ul></li><li><code>std</code><ul><li>ANSI C++ 표준에서 정의한 이름 공간(<code>namespace</code>) 중 하나</li><li><code>&lt;iostream&gt;</code></li></ul></li></ul><blockquote><p>namespace.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Graphic&#123;</span><br><span class="line">    <span class="keyword">int</span> maximum = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Math&#123;</span><br><span class="line">    <span class="keyword">int</span> maximum = <span class="number">65536</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> a + b;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> a - b;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Radius Maximum = &quot;</span> &lt;&lt; Graphic::maximum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Integer Maximum = &quot;</span> &lt;&lt; Math::maximum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Integer Add = &quot;</span> &lt;&lt; Math::add(<span class="number">2</span>,<span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Integer Sub = &quot;</span> &lt;&lt; Math::sub(<span class="number">2</span>,<span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Radius Maximum = <span class="number">100</span></span><br><span class="line">Integer Maximum = <span class="number">65536</span></span><br><span class="line">Integer Add = <span class="number">6</span></span><br><span class="line">Integer Sub = <span class="number">-2</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="String-1"><a href="#String-1" class="headerlink" title="String"></a>String</h2><ul><li><code>cin.getline(char buf[], int size, char delimitChar)</code><ul><li>공백이 낀 문자열을 입력 받는 방법</li><li><code>buf</code>에 최대 <code>size-1</code>개의 문자 입력(끝에 <code>\0</code> 붙임)</li><li><code>delimitChar</code>를 만나면 입력 중단(끝에 <code>\0</code> 붙임)<ul><li>Default : <code>\n</code>(Enter)</li></ul></li></ul></li><li><code>string</code> 클래스<ul><li>문자열의 크기에 따른 제약 없음<ul><li>스스로 문자열의 버퍼 조정</li></ul></li><li>문자열 복사, 비교, 수정 등을 위한 다양한 함수와 연산자 제공</li><li>객체 지향적</li><li><code>&lt;string&gt;</code> 헤더 파일에 선선</li></ul></li></ul><blockquote><p>cin_getline.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;주소 입력 : &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> address[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">cin</span>.getline(address, <span class="number">100</span>, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;주소는 &quot;</span> &lt;&lt; address &lt;&lt; <span class="string">&quot;입니다.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">주소 입력 : ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇ</span><br><span class="line">주소는 ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ입니다.</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>string_getline.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;주소 입력 : &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> address;</span><br><span class="line">    getline(<span class="built_in">cin</span>, address);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;주소는 &quot;</span> &lt;&lt; address &lt;&lt; <span class="string">&quot;입니다.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">주소 입력 : asdfasdfasdfasdfasdfasdfasdfa</span><br><span class="line">주소는 asdfasdfasdfasdfasdfasdfasdfa입니다.</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>search.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;문자들을 입력하라 : &quot;</span>;</span><br><span class="line">    getline(<span class="built_in">cin</span>, str);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i] == <span class="string">&#x27;o&#x27;</span>)&#123;</span><br><span class="line">            count += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(str[i] == <span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;o&#x27;</span> &lt;&lt; <span class="string">&quot;의 개수는 &quot;</span> &lt;&lt; count &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">문자들을 입력하라 : Hello, World!</span><br><span class="line">o의 개수는 <span class="number">2</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Class-amp-Object"><a href="#Class-amp-Object" class="headerlink" title="Class &amp; Object"></a>Class &amp; Object</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Name::function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>class</code><ul><li>상태 정보(속성) : 멤버 변수</li><li>Action : 멤버 함수</li><li>객체를 만들어내기 위해 정의된 설계도, 틀</li><li>클래스는 객체가 아니며 실체도 아님</li></ul></li><li>Object<ul><li>객체는 생성될 때 클래스의 모양을 그대로 가지고 탄생</li><li>멤버 변수와 멤버 함수로 구성</li><li>메모리에 생성, 실체(Instance)로도 불림</li></ul></li><li>Why <code>class</code>?<ul><li>Encapsulation<ul><li><code>public</code><ul><li>외부에서 접근 가능</li></ul></li><li><code>protectected</code></li><li><code>private</code><ul><li>외부에서 접근 불가</li><li>Default</li></ul></li><li>캡슐화</li><li>클래스로 묶어둠</li></ul></li><li>Inheritance</li><li>Polymorphism</li></ul></li></ul><blockquote><p>circle.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> radius;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Circle::getArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3.14</span>*radius*radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Circle donut;</span><br><span class="line">    donut.radius = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">double</span> area = donut.getArea();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;donut 면적은 &quot;</span> &lt;&lt; area &lt;&lt; <span class="string">&quot;입니다.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    Circle pizza;</span><br><span class="line">    pizza.radius = <span class="number">30</span>;</span><br><span class="line">    area = pizza.getArea();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;pizza 면적은 &quot;</span> &lt;&lt; area &lt;&lt; <span class="string">&quot;입니다.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">donut 면적은 <span class="number">3.14</span>입니다.</span><br><span class="line">pizza 면적은 <span class="number">2826</span>입니다.</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>rectangle.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> width;</span><br><span class="line">    <span class="keyword">int</span> height;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> width*height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Rectangle rect;</span><br><span class="line">    rect.width = <span class="number">3</span>;</span><br><span class="line">    rect.height = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;사각형의 면적은 &quot;</span> &lt;&lt; rect.getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">사각형의 면적은 <span class="number">15</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h2><ul><li>생성자<ul><li>객체가 생성되는 시점에서 자동으로 호출되는 멤버 함수</li><li>생성자는 클래스의 이름과 같음</li><li><code>public</code>으로 선언</li></ul></li><li>종류<ul><li>기본 생성자<ul><li>매개변수 없음</li><li>생성자가 없으면 컴파일러가 자동으로 만들어줌</li></ul></li><li>사용자 정의 생성자<ul><li>매개변수 존재</li><li>객체 생성 및 멤버 변수 초기값 정의</li><li>기본 생성자 자동 생성 X</li></ul></li></ul></li></ul><blockquote><p>constructor.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> radius;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Circle();</span><br><span class="line">    Circle(<span class="keyword">int</span> r);</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Circle donut;</span><br><span class="line">    <span class="keyword">double</span> area = donut.getArea();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;donut 면적은 &quot;</span> &lt;&lt; area &lt;&lt; <span class="string">&quot;입니다.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Circle <span class="title">pizza</span><span class="params">(<span class="number">30</span>)</span></span>;</span><br><span class="line">    area = pizza.getArea();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;pizza 면적은 &quot;</span> &lt;&lt; area &lt;&lt; <span class="string">&quot;입니다.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Circle::getArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3.14</span>*radius*radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Circle::Circle()&#123;</span><br><span class="line">    radius = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Circle::Circle(<span class="keyword">int</span> r)&#123;</span><br><span class="line">    radius = r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">donut 면적은 <span class="number">3.14</span>입니다.</span><br><span class="line">pizza 면적은 <span class="number">2826</span>입니다.</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Quiz-1"><a href="#Quiz-1" class="headerlink" title="Quiz"></a>Quiz</h2><blockquote><p>quiz2.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tower</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> height;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Tower();</span><br><span class="line">    Tower(<span class="keyword">int</span> h);</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getHeight</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Tower myTower;</span><br><span class="line">    <span class="function">Tower <span class="title">seoulTower</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;높이는 &quot;</span> &lt;&lt; myTower.getHeight() &lt;&lt; <span class="string">&quot;미터&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;높이는 &quot;</span> &lt;&lt; seoulTower.getHeight() &lt;&lt; <span class="string">&quot;미터&quot;</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Tower::Tower()&#123;</span><br><span class="line">    height = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">Tower::Tower(<span class="keyword">int</span> h)&#123;</span><br><span class="line">    height = h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Tower::getHeight</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> height;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">높이는 <span class="number">1</span>미터</span><br><span class="line">높이는 <span class="number">100</span>미터</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><hr><h1 id="Day-4"><a href="#Day-4" class="headerlink" title="Day 4"></a>Day 4</h1><h2 id="Class-Practice"><a href="#Class-Practice" class="headerlink" title="Class Practice"></a>Class Practice</h2><blockquote><p>integer.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Integer</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> val1;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Integer(<span class="keyword">int</span> val);</span><br><span class="line">    Integer(<span class="built_in">string</span> val);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> val)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isEven</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Integer <span class="title">n</span><span class="params">(<span class="number">30</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; n.get() &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    n.<span class="built_in">set</span>(<span class="number">50</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; n.get() &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="function">Integer <span class="title">m</span><span class="params">(<span class="string">&quot;300&quot;</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; m.get() &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; m.isEven();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Integer::Integer(<span class="keyword">int</span> val)&#123;</span><br><span class="line">    val1 = val;</span><br><span class="line">&#125;</span><br><span class="line">Integer::Integer(<span class="built_in">string</span> val)&#123;</span><br><span class="line">    val1 = stoi(val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Integer::set</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    val1 = val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Integer::get</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Integer::isEven</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(val1%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">30</span> <span class="number">50</span> <span class="number">300</span> <span class="number">1</span></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Destructor"><a href="#Destructor" class="headerlink" title="Destructor"></a>Destructor</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">name</span>&#123;</span></span><br><span class="line">    ~name();</span><br><span class="line">&#125;</span><br><span class="line">name::~name()&#123;&#125;;</span><br></pre></td></tr></table></figure><ul><li>객체가 소멸되는 시점에서 자동으로 호출되는 함수</li><li>소멸자의 목적<ul><li>객체가 사라질 때 마무리 작업을 위함</li><li>실행 도중 동적으로 할당 받은 메모리 해제, 파일 저장 및 닫기, 네트워크 닫기 등</li></ul></li><li>소멸자는 <code>return</code> 불가</li><li>객체는 생성의 반대순으로 소멸</li><li>동적 메모리 할당 사용 시 소멸자 이용</li></ul><blockquote><p>destructor.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Circle();</span><br><span class="line">    Circle(<span class="keyword">int</span> r);</span><br><span class="line">    <span class="keyword">int</span> radius;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>;</span><br><span class="line">    ~Circle();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Circle donut;</span><br><span class="line">    <span class="keyword">double</span> area = donut.getArea();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;donut 면적은 &quot;</span> &lt;&lt; area &lt;&lt; <span class="string">&quot;입니다.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    donut.~Circle();</span><br><span class="line"></span><br><span class="line">    <span class="function">Circle <span class="title">pizza</span><span class="params">(<span class="number">30</span>)</span></span>;</span><br><span class="line">    area = pizza.getArea();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;pizza 면적은 &quot;</span> &lt;&lt; area &lt;&lt; <span class="string">&quot;입니다.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    pizza.~Circle();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Circle::Circle()&#123;</span><br><span class="line">    radius = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;반지름 &quot;</span> &lt;&lt; radius &lt;&lt; <span class="string">&quot; 원 생성&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Circle::Circle(<span class="keyword">int</span> r)&#123;</span><br><span class="line">    radius = r;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;반지름 &quot;</span> &lt;&lt; radius &lt;&lt; <span class="string">&quot; 원 생성&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Circle::getArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3.14</span>*radius*radius;</span><br><span class="line">&#125;</span><br><span class="line">Circle::~Circle()&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;반지름 &quot;</span> &lt;&lt; radius &lt;&lt; <span class="string">&quot; 원 소멸&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">반지름 <span class="number">1</span> 원 생성</span><br><span class="line">donut 면적은 <span class="number">3.14</span>입니다.</span><br><span class="line">반지름 <span class="number">1</span> 원 소멸</span><br><span class="line">반지름 <span class="number">30</span> 원 생성</span><br><span class="line">pizza 면적은 <span class="number">2826</span>입니다.</span><br><span class="line">반지름 <span class="number">30</span> 원 소멸</span><br><span class="line">반지름 <span class="number">30</span> 원 소멸</span><br><span class="line">반지름 <span class="number">1</span> 원 소멸</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="접근-지정자"><a href="#접근-지정자" class="headerlink" title="접근 지정자"></a>접근 지정자</h2><ul><li>캡슐화의 목적<ul><li>객체 보호, 보안</li><li>C++에서 객체의 캡슐화 전략<ul><li>객체의 상태를 나타내는 데이터 멤버(멤버 변수)에 대한 보호</li><li>중요한 멤버는 다른 클래스나 객체에서 접근할 수 없도록 보호</li><li>외부와으이 인터페이스를 위해서 일부 멤버는 외부에 접근 허용</li></ul></li></ul></li><li>멤버에 대한 3가지 접근 지정자<ul><li><code>private</code><ul><li>동일한 클래스의 멤버 함수에만 제한함</li></ul></li><li><code>public</code><ul><li>모든 다른 클래스에 허용, 외부함수(<code>main()</code>)도 허용</li></ul></li><li><code>protected</code><ul><li>클래스 자신과 상속받은 자식 클래스에만 허용</li></ul></li></ul></li></ul><h2 id="Inline"><a href="#Inline" class="headerlink" title="Inline"></a>Inline</h2><ul><li>짧은 함수의 다수 호출로 인해 오버헤드가 일어남</li><li>이를 <code>inline</code>을 통해 해결</li><li>장점 : 시간 단축</li><li>단점 : 코드가 길어짐</li><li>클래스의 선언부에 구현된 멤버 함수는 자동 <code>inline</code> 함수</li></ul><h2 id="Program"><a href="#Program" class="headerlink" title="Program"></a>Program</h2><ul><li>바람직한 프로그램<ul><li><code>main.cpp</code></li><li><code>class.h</code> : 클래스 선언부 - 헤더 파일(<code>.h</code>)에 저장</li><li><code>class.cpp</code> : 클래스 구현부 - <code>.cpp</code> 파일에 저장</li></ul></li><li>클래스를 헤더 파일과 <code>.cpp</code> 파일로 분리하여 작성</li><li>목적 : 클래스 재사용</li></ul><blockquote><p>main.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Box.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Box <span class="title">b</span><span class="params">(<span class="number">10</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    b.draw();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    b.setSize(<span class="number">7</span>, <span class="number">4</span>);</span><br><span class="line">    b.setFill(<span class="string">&#x27;%&#x27;</span>);</span><br><span class="line">    b.draw();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Box.h</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> UNTITLED_BOX_H <span class="comment">// 조건 컴파일 역할, n은 not, 정의되어있지 않으면 정의, 정의되어있으면 실행 X</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UNTITLED_BOX_H <span class="comment">// 중복 include 실행방지</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> width, height;</span><br><span class="line">    <span class="keyword">char</span> fill;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Box(<span class="keyword">int</span> w, <span class="keyword">int</span> h);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setFill</span><span class="params">(<span class="keyword">char</span> f)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setSize</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// UNTITLED_BOX_H</span></span></span><br></pre></td></tr></table></figure><blockquote><p>Box.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Box.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">Box::Box(<span class="keyword">int</span> w, <span class="keyword">int</span> h)&#123;</span><br><span class="line">    setSize(w, h);</span><br><span class="line">    fill = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Box::setFill</span><span class="params">(<span class="keyword">char</span> f)</span></span>&#123;</span><br><span class="line">    fill = f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Box::setSize</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h)</span></span>&#123;</span><br><span class="line">    width = w;</span><br><span class="line">    height = h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Box::draw</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; height; n++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; width; m++)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; fill;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">**********</span><br><span class="line">**********</span><br><span class="line"></span><br><span class="line">%%%%%%%</span><br><span class="line">%%%%%%%</span><br><span class="line">%%%%%%%</span><br><span class="line">%%%%%%%</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rand</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">srand</span><span class="params">((<span class="keyword">unsigned</span> <span class="keyword">int</span>) time(<span class="literal">NULL</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">srand((<span class="keyword">unsigned</span>) time(<span class="number">0</span>)); <span class="comment">// Seed 값 설정, 현재시간 이용 초기화</span></span><br><span class="line">rand() % (End - Begin + <span class="number">1</span>) + Begin; <span class="comment">// int 스케일링</span></span><br><span class="line">rand() % (End - Begin) / RAND_MAX + Begin; <span class="comment">// float 스케일링</span></span><br></pre></td></tr></table></figure><ul><li><code>rand()</code> = $[0, 2^{15}-1]$</li></ul><blockquote><p>random.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EvenRandom</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    EvenRandom();</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">nextinRange</span><span class="params">(<span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    EvenRandom r;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;-- 0에서 &quot;</span> &lt;&lt; RAND_MAX &lt;&lt; <span class="string">&quot;까지의 랜덤 짝수 정수 10개 : &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> n = r.next();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">&quot;-- 2에서 10까지의 랜덤 짝수 정수 10개 : &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> n = r.nextinRange(<span class="number">2</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EvenRandom::EvenRandom()&#123;</span><br><span class="line">    srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>) time(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EvenRandom::next</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ran = rand();</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ran % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ran;</span><br><span class="line">        &#125;</span><br><span class="line">        ran = rand();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EvenRandom::nextinRange</span><span class="params">(<span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ran = rand() % (high - low + <span class="number">1</span>) + low;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ran % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ran;</span><br><span class="line">        &#125;</span><br><span class="line">        ran = rand() % (high - low + <span class="number">1</span>) + low;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- <span class="number">0</span>에서 <span class="number">2147483647</span>까지의 랜덤 짝수 정수 <span class="number">10</span>개 : </span><br><span class="line"><span class="number">754544228</span><span class="number">1733691306</span><span class="number">1091657446</span><span class="number">454057686</span><span class="number">268781690</span><span class="number">2138855454</span><span class="number">962661234</span><span class="number">305563340</span><span class="number">433726818</span><span class="number">1087132208</span></span><br><span class="line"></span><br><span class="line">-- <span class="number">2</span>에서 <span class="number">10</span>까지의 랜덤 짝수 정수 <span class="number">10</span>개 : </span><br><span class="line"><span class="number">10</span><span class="number">10</span><span class="number">6</span><span class="number">2</span><span class="number">2</span><span class="number">4</span><span class="number">6</span><span class="number">4</span><span class="number">2</span><span class="number">4</span></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><hr><h1 id="Day-5"><a href="#Day-5" class="headerlink" title="Day 5"></a>Day 5</h1><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><blockquote><p>oval.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Oval</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> width, height;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Oval();</span><br><span class="line">    Oval(<span class="keyword">int</span> w, <span class="keyword">int</span> h);</span><br><span class="line">    ~Oval();</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getHeight</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Oval a, b(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    a.<span class="built_in">set</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    a.show();</span><br><span class="line">    b.show();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Oval::Oval()&#123;</span><br><span class="line">    width = <span class="number">1</span>;</span><br><span class="line">    height = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Oval::Oval(<span class="keyword">int</span> w,<span class="keyword">int</span> h)&#123;</span><br><span class="line">    width = w;</span><br><span class="line">    height = h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Oval::~Oval()&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Oval 소멸 &quot;</span>;</span><br><span class="line">    show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Oval::getArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3.14</span>*width*height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Oval::getWidth</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> width;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Oval::getHeight</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Oval::set</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h)</span></span>&#123;</span><br><span class="line">    width = w;</span><br><span class="line">    height = h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Oval::show</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;width = &quot;</span> &lt;&lt; width &lt;&lt; <span class="string">&quot;, height = &quot;</span> &lt;&lt; height &lt;&lt; <span class="string">&quot;, Area = &quot;</span> &lt;&lt; getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">width = <span class="number">10</span>, height = <span class="number">20</span>, Area = <span class="number">628</span></span><br><span class="line">width = <span class="number">3</span>, height = <span class="number">4</span>, Area = <span class="number">37.68</span></span><br><span class="line">Oval 소멸 width = <span class="number">3</span>, height = <span class="number">4</span>, Area = <span class="number">37.68</span></span><br><span class="line">Oval 소멸 width = <span class="number">10</span>, height = <span class="number">20</span>, Area = <span class="number">628</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Object-Pointer"><a href="#Object-Pointer" class="headerlink" title="Object Pointer"></a>Object Pointer</h2><ul><li>객체에 대한 포인터<ul><li>객체의 주소 값을 가지는 변수</li></ul></li><li>포인터로 멤버를 접근할 때<ul><li><code>객체포인터-&gt;멤버</code></li></ul></li></ul><blockquote><p>circle1.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> radius;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Circle()&#123;radius = <span class="number">1</span>;&#125;</span><br><span class="line">    Circle(<span class="keyword">int</span> r)&#123;radius = r;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Circle donut;</span><br><span class="line">    <span class="keyword">double</span> d = donut.getArea();</span><br><span class="line"></span><br><span class="line">    Circle *p;</span><br><span class="line">    p = &amp;donut;</span><br><span class="line">    <span class="keyword">double</span> b = p-&gt;getArea();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; d &lt;&lt; <span class="string">&quot;==&quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Circle::getArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> radius*radius*<span class="number">3.14</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.14</span>==<span class="number">3.14</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>circle2.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> radius;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Circle()&#123;radius = <span class="number">1</span>;&#125;</span><br><span class="line">    Circle(<span class="keyword">int</span> r)&#123;radius = r;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Circle donut;</span><br><span class="line">    <span class="function">Circle <span class="title">pizza</span><span class="params">(<span class="number">30</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; donut.getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    Circle *p;</span><br><span class="line">    p = &amp;donut;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; p-&gt;getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (*p).getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    p = &amp; pizza;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; p-&gt;getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (*p).getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Circle::getArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> radius*radius*<span class="number">3.14</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.14</span></span><br><span class="line"><span class="number">3.14</span></span><br><span class="line"><span class="number">3.14</span></span><br><span class="line"><span class="number">2826</span></span><br><span class="line"><span class="number">2826</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Object-Array"><a href="#Object-Array" class="headerlink" title="Object Array"></a>Object Array</h2><ul><li>객체 배열 선언 가능<ul><li>기본 타이 배열 선언과 형식 동일<ul><li><code>Circle c[3];</code></li></ul></li></ul></li><li>객체 배열 선언<ul><li>객체 배열을 위한 공간 할당</li><li>배열의 각 원소 객체마다 생성자 실행<ul><li>매개변수 없는 생성자 호출</li><li>매개변수 있는 생성자를 한번에는 호출할 수 없음</li></ul></li><li><code>Circle c[3] = &#123;Circle(10), Circle(20), Circle()&#125;;</code></li></ul></li><li>배열 소멸<ul><li>배열의 각 객체마다 소멸자 호출</li><li>생성의 반대순으로 소멸</li></ul></li></ul><blockquote><p>circle1.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> radius;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Circle()&#123;radius = <span class="number">1</span>;&#125;</span><br><span class="line">    Circle(<span class="keyword">int</span> r)&#123;radius = r;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setRadius</span><span class="params">(<span class="keyword">int</span> r)</span></span>&#123;radius = r;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Circle circleArray[<span class="number">3</span>];</span><br><span class="line">    circleArray[<span class="number">0</span>].setRadius(<span class="number">10</span>);</span><br><span class="line">    circleArray[<span class="number">1</span>].setRadius(<span class="number">20</span>);</span><br><span class="line">    circleArray[<span class="number">2</span>].setRadius(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Circle &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;의 면적은 &quot;</span> &lt;&lt; circleArray[i].getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Circle *p;</span><br><span class="line">    p = circleArray;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Circle &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;의 면적은 &quot;</span> &lt;&lt; p-&gt;getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Circle::getArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> radius*radius*<span class="number">3.14</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Circle <span class="number">0</span>의 면적은 <span class="number">314</span></span><br><span class="line">Circle <span class="number">1</span>의 면적은 <span class="number">1256</span></span><br><span class="line">Circle <span class="number">2</span>의 면적은 <span class="number">2826</span></span><br><span class="line">Circle <span class="number">0</span>의 면적은 <span class="number">314</span></span><br><span class="line">Circle <span class="number">1</span>의 면적은 <span class="number">1256</span></span><br><span class="line">Circle <span class="number">2</span>의 면적은 <span class="number">2826</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>circle2.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> radius;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Circle()&#123;radius = <span class="number">1</span>;&#125;</span><br><span class="line">    Circle(<span class="keyword">int</span> r)&#123;radius = r;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setRadius</span><span class="params">(<span class="keyword">int</span> r)</span></span>&#123;radius = r;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">3.14</span>*radius*radius;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Circle c[<span class="number">3</span>] = &#123;Circle(<span class="number">10</span>), Circle(<span class="number">20</span>), Circle()&#125;;</span><br><span class="line">    Circle *p = c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;c[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;]의 면적은 &quot;</span> &lt;&lt; c[i].getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;(c+&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;)의 면적은 &quot;</span> &lt;&lt; (c+i)-&gt;getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*(c+&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;)의 면적은 &quot;</span> &lt;&lt; (*(c+i)).getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;]의 면적은 &quot;</span> &lt;&lt; p[i].getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;(p+&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;)의 면적은 &quot;</span> &lt;&lt; (p+i)-&gt;getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*(p+&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;)의 면적은 &quot;</span> &lt;&lt; (*(p+i)).getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p-&gt;&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;의 면적은 &quot;</span> &lt;&lt; p-&gt;getArea() &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">c[<span class="number">0</span>]의 면적은 <span class="number">314</span></span><br><span class="line">c[<span class="number">1</span>]의 면적은 <span class="number">1256</span></span><br><span class="line">c[<span class="number">2</span>]의 면적은 <span class="number">3.14</span></span><br><span class="line">(c+<span class="number">0</span>)의 면적은 <span class="number">314</span></span><br><span class="line">(c+<span class="number">1</span>)의 면적은 <span class="number">1256</span></span><br><span class="line">(c+<span class="number">2</span>)의 면적은 <span class="number">3.14</span></span><br><span class="line">*(c+<span class="number">0</span>)의 면적은 <span class="number">314</span></span><br><span class="line">*(c+<span class="number">1</span>)의 면적은 <span class="number">1256</span></span><br><span class="line">*(c+<span class="number">2</span>)의 면적은 <span class="number">3.14</span></span><br><span class="line">p[<span class="number">0</span>]의 면적은 <span class="number">314</span></span><br><span class="line">p[<span class="number">1</span>]의 면적은 <span class="number">1256</span></span><br><span class="line">p[<span class="number">2</span>]의 면적은 <span class="number">3.14</span></span><br><span class="line">(p+<span class="number">0</span>)의 면적은 <span class="number">314</span></span><br><span class="line">(p+<span class="number">1</span>)의 면적은 <span class="number">1256</span></span><br><span class="line">(p+<span class="number">2</span>)의 면적은 <span class="number">3.14</span></span><br><span class="line">*(p+<span class="number">0</span>)의 면적은 <span class="number">314</span></span><br><span class="line">*(p+<span class="number">1</span>)의 면적은 <span class="number">1256</span></span><br><span class="line">*(p+<span class="number">2</span>)의 면적은 <span class="number">3.14</span></span><br><span class="line">p-&gt;<span class="number">0</span>의 면적은 <span class="number">314</span></span><br><span class="line">p-&gt;<span class="number">1</span>의 면적은 <span class="number">1256</span></span><br><span class="line">p-&gt;<span class="number">2</span>의 면적은 <span class="number">3.14</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Dynamic-Memory"><a href="#Dynamic-Memory" class="headerlink" title="Dynamic Memory"></a>Dynamic Memory</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">데이터타입 *포인터변수 = <span class="keyword">new</span> 데이터타입;</span><br><span class="line">데이터타입 *포인터변수 = <span class="keyword">new</span> 데이터타입(초기값); <span class="comment">// 배열의 초기화는 for문</span></span><br><span class="line"><span class="keyword">delete</span> 포인터변수;</span><br><span class="line"></span><br><span class="line">데이터타입 *포인터변수 = <span class="keyword">new</span> 데이터타입[배열의크기]; <span class="comment">// 배열의 동적 할당</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; 배열의크기; i++)&#123;</span><br><span class="line">    포인터변수[i] = 값;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> [] 포인터변수;</span><br><span class="line"></span><br><span class="line">클래스이름 *포인터변수 = <span class="keyword">new</span> 클래스이름; <span class="comment">// 객체의 동적 할당</span></span><br><span class="line">클래스이름 *포인터변수 = <span class="keyword">new</span> 클래스이름(생성자매개변수리스트);</span><br><span class="line"><span class="keyword">delete</span> 포인터변수;</span><br></pre></td></tr></table></figure><ul><li>정적 할당<ul><li>변수 선언을 통해 필요한 메모리 할당</li><li>많은 양의 메모리는 배열 선언을 통해 할당</li></ul></li><li>동적 할당<ul><li>필요한 양이 예측되지 않는 경우, 프로그램 작성 시 할당 받을 수 없음</li><li>실행 중에 운영체제로부터 할당 받음<ul><li>힙(<code>heap</code>)으로부터 할당</li><li>힙은 운영체제가 소유하고 관리하는 메모리, 모든 프로세스가 공유할 수 있는 메모리</li></ul></li></ul></li><li><code>C</code>의 동적 메모리 할당<ul><li><code>malloc()</code></li><li><code>free()</code></li></ul></li><li><code>C++</code>의 동적 메모리 할당, 반환<ul><li><code>new</code> 연산자<ul><li>기본 타입 메모리 할당, 배열 할당, 객체 할당, 객체 배열 할당</li><li>객체의 동적 생성 - 힙 메모리로부터 객체를 위한 메모리 할당 요청</li><li>객체 할당 시 생성자 호출</li></ul></li><li><code>delete</code><ul><li><code>new</code>로 할당 받은 메모리 반환</li><li>객체의 동적 소멸 - 소멸자 호출 뒤 객체를 힙에 반환</li></ul></li></ul></li></ul><table><thead><tr><th align="center">Data Type</th><th align="center">정적 할당</th><th align="center">동적 할당</th></tr></thead><tbody><tr><td align="center">Integer</td><td align="center"><code>int a = val; int *pa = &amp;a;</code></td><td align="center"><code>int *p = new int(val);</code></td></tr><tr><td align="center">Array</td><td align="center"><code>int arr[num];</code></td><td align="center"><code>int *parr = new int[100];</code></td></tr><tr><td align="center">Object</td><td align="center"><code>Class instance(val); Class *pc = &amp;instance;</code></td><td align="center"><code>Class *pc = new Class;</code></td></tr></tbody></table><blockquote><p>circle.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> radius;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Circle()&#123;radius = <span class="number">1</span>; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;생성자 실행&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">    Circle(<span class="keyword">int</span> r)&#123;radius = r; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;생성자 실행&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">    ~Circle()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;소멸자 실행&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">3.14</span>*radius*radius;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> radius;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;정수 반지름 입력(음수이면 종료 &gt;&gt; &quot;</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; radius;</span><br><span class="line">        <span class="keyword">if</span>(radius &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        Circle *p = <span class="keyword">new</span> Circle(radius);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;원의 면적은 &quot;</span> &lt;&lt; p-&gt;getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">정수 반지름 입력(음수이면 종료 &gt;&gt; <span class="number">5</span></span><br><span class="line">생성자 실행</span><br><span class="line">원의 면적은 <span class="number">78.5</span></span><br><span class="line">소멸자 실행</span><br><span class="line">정수 반지름 입력(음수이면 종료 &gt;&gt; <span class="number">9</span></span><br><span class="line">생성자 실행</span><br><span class="line">원의 면적은 <span class="number">254.34</span></span><br><span class="line">소멸자 실행</span><br><span class="line">정수 반지름 입력(음수이면 종료 &gt;&gt; <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="This-Pointer"><a href="#This-Pointer" class="headerlink" title="This Pointer"></a>This Pointer</h2><ul><li>현재의 실행중인 객체를 가리키는 <code>pointer</code> 변수</li><li>포인터, 객체 자신 포인터</li><li>클래스의 멤버 함수 내에서만 사용</li><li>개발자가 선언하는 변수가 아닌 컴파일러가 선언한 변수</li><li>용도<ul><li>매개변수 이름 == 멤버 변수 이름</li><li>매개변수가 자신의 객체주소를 <code>return</code></li></ul></li><li>사용범위<ul><li>멤버 함수</li></ul></li></ul><h2 id="Quiz-2"><a href="#Quiz-2" class="headerlink" title="Quiz"></a>Quiz</h2><blockquote><p>quiz1.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sample</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> *p;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Sample(<span class="keyword">int</span> n)&#123;</span><br><span class="line">        size = n; p = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">big</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> size;&#125;</span><br><span class="line">    ~Sample()&#123;<span class="keyword">delete</span> [] p;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Sample <span class="title">s</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    s.read();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;동적배열 정수 &quot;</span> &lt;&lt; s.getSize() &lt;&lt; <span class="string">&quot;개를 출력합니다. &quot;</span>;</span><br><span class="line">    s.write();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;가장 큰 수는 &quot;</span> &lt;&lt; s.big() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sample::read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;입력하려는 정수의 개수는? &quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; size;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; size &lt;&lt; <span class="string">&quot;개의 정수를 입력하시오. &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sample::write</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; p[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sample::big</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> b = p[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">        b = (b &lt; p[i]) ? p[i] : b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">입력하려는 정수의 개수는? <span class="number">5</span></span><br><span class="line"><span class="number">5</span>개의 정수를 입력하시오. <span class="number">11</span> <span class="number">22</span> <span class="number">44</span> <span class="number">55</span> <span class="number">23</span></span><br><span class="line">동적배열 정수 <span class="number">5</span>개를 출력합니다. <span class="number">11</span> <span class="number">22</span> <span class="number">44</span> <span class="number">55</span> <span class="number">23</span> </span><br><span class="line">가장 큰 수는 <span class="number">55</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>quiz2.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> radius;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Circle()&#123;radius = <span class="number">1</span>;&#125;</span><br><span class="line">    Circle(<span class="keyword">int</span> r)&#123;radius = <span class="number">1</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setRadius</span><span class="params">(<span class="keyword">int</span> r)</span></span>&#123;radius = r;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getRadius</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> radius;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">3.14</span> * radius * radius;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sample</span>&#123;</span></span><br><span class="line">    Circle *p;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Sample(<span class="keyword">int</span> n)&#123;</span><br><span class="line">        size = n; p = <span class="keyword">new</span> Circle[n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Circle <span class="title">big</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> size;&#125;</span><br><span class="line">    ~Sample()&#123;<span class="keyword">delete</span> [] p;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Sample <span class="title">s</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    s.read();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;각 원 객체의 반지름 &quot;</span> &lt;&lt; s.getSize() &lt;&lt; <span class="string">&quot;개를 출력합니다. &quot;</span>;</span><br><span class="line">    s.write();</span><br><span class="line">    Circle big = s.big();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;가장 큰 원의 넓이 : &quot;</span> &lt;&lt; big.getArea() &lt;&lt; <span class="string">&quot;\t 가장 큰 원의 반지름 : &quot;</span> &lt;&lt; big.getRadius() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sample::read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;입력하려는 원의 개수는? &quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; size;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; size &lt;&lt; <span class="string">&quot;개의 원의 반지름을 입력하시오. &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">        p[i].setRadius(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sample::write</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; p[i].getRadius() &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Circle <span class="title">Sample::big</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Circle b = p[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">        b.setRadius((b.getRadius() &lt; p[i].getRadius()) ? p[i].getRadius() : b.getRadius());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">입력하려는 원의 개수는? <span class="number">3</span></span><br><span class="line"><span class="number">3</span>개의 원의 반지름을 입력하시오. <span class="number">3</span> <span class="number">16</span> <span class="number">2</span></span><br><span class="line">각 원 객체의 반지름 <span class="number">3</span>개를 출력합니다. <span class="number">3</span> <span class="number">16</span> <span class="number">2</span> </span><br><span class="line">가장 큰 원의 넓이 : <span class="number">803.84</span> 가장 큰 원의 반지름 : <span class="number">16</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><hr><h1 id="Day-6"><a href="#Day-6" class="headerlink" title="Day 6"></a>Day 6</h1><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><ul><li>문자열 생성<ul><li><code>string str0(&quot;name&quot;);</code></li><li><code>string str1 = &quot;name&quot;;</code></li><li><code>string str2(str);</code> - 복사생성자</li><li>주의 : 문자열 끝에 <code>&#39;\0(NULL)</code>가 없음</li></ul></li><li>문자열 연산자<ul><li>산술 연산자<ul><li><code>+=</code>, <code>+</code></li></ul></li><li>관계 연산자<ul><li><code>&gt;=</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>!=</code>, <code>==</code></li><li>비교는 사전식</li></ul></li><li>배열처럼 사용 가능</li></ul></li><li>문자열 변환 함수<ul><li>문자열 -&gt; 숫자<ul><li><code>stoi();</code></li><li><code>stof();</code></li><li><code>stod();</code></li></ul></li><li>숫자 -&gt; 문자열<ul><li><code>to_string();</code></li></ul></li><li>문자열 -&gt; C언어 문자열(<code>\0</code>)<ul><li><code>str.c_str();</code></li></ul></li></ul></li><li>문자열 크기 함수<ul><li><code>str.size();</code></li><li><code>str.length();</code></li><li><code>str.capacity();</code> - 시스템이 정해줌</li></ul></li><li>문자열 조작 함수<ul><li><code>str.append(string);</code><ul><li>문자열 뒤에 파라미터의 문자열 추가</li></ul></li><li><code>str.substr(시작 index, 크기);</code><ul><li>시작부터 크기만큼 추출</li></ul></li><li><code>str.replace(index, length, string);</code><ul><li><code>index</code>에서 <code>length</code>만큼 <code>string</code>으로 대체</li></ul></li><li><code>str.find(string, index);</code><ul><li><code>index</code>부터 <code>string</code>이 시작하는 위치 <code>int</code>값으로 <code>return</code></li></ul></li><li><code>str.resize(unsigned, char);</code><ul><li>숫자만큼의 크기로 바꾸며 남는다면 <code>char</code>으로 채움</li></ul></li></ul></li></ul><blockquote><p>string1.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">address</span><span class="params">(<span class="string">&quot;서울시 서울시 서울시&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">copyAddress</span><span class="params">(address)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> text[] = &#123;<span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">title</span><span class="params">(text)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; address &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; copyAddress &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; title &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">서울시 서울시 서울시</span><br><span class="line">서울시 서울시 서울시</span><br><span class="line">LOVE C++</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><blockquote><p>string2.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;문자열을 입력하세요 : &quot;</span>;</span><br><span class="line"></span><br><span class="line">    getline(<span class="built_in">cin</span>, str, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">int</span> len = str.length();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="built_in">string</span> first = str.substr(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">string</span> sub = str.substr(<span class="number">1</span>, len<span class="number">-1</span>);</span><br><span class="line">        str = sub + first;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; str &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">문자열을 입력하세요 : asdfasdfasdfasdf</span><br><span class="line">sdfasdfasdfasdfa</span><br><span class="line">dfasdfasdfasdfas</span><br><span class="line">fasdfasdfasdfasd</span><br><span class="line">asdfasdfasdfasdf</span><br><span class="line">sdfasdfasdfasdfa</span><br><span class="line">dfasdfasdfasdfas</span><br><span class="line">fasdfasdfasdfasd</span><br><span class="line">asdfasdfasdfasdf</span><br><span class="line">sdfasdfasdfasdfa</span><br><span class="line">dfasdfasdfasdfas</span><br><span class="line">fasdfasdfasdfasd</span><br><span class="line">asdfasdfasdfasdf</span><br><span class="line">sdfasdfasdfasdfa</span><br><span class="line">dfasdfasdfasdfas</span><br><span class="line">fasdfasdfasdfasd</span><br><span class="line">asdfasdfasdfasdf</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>string3.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> year;</span><br><span class="line">    <span class="built_in">string</span> month;</span><br><span class="line">    <span class="built_in">string</span> day;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Date(<span class="keyword">int</span> y, <span class="keyword">int</span> m, <span class="keyword">int</span> d)&#123;year = to_string(y); month = to_string(m); day = to_string(d);&#125;</span><br><span class="line">    Date(<span class="built_in">string</span> when);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">getYear</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> year;&#125;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">getMonth</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> month;&#125;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">getDay</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> day;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Date <span class="title">birth</span><span class="params">(<span class="number">2014</span>, <span class="number">3</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="function">Date <span class="title">independenceDay</span><span class="params">(<span class="string">&quot;1945/8/15&quot;</span>)</span></span>;</span><br><span class="line">    independenceDay.show();</span><br><span class="line">    birth.show();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; birth.getYear() &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; birth.getMonth() &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; birth.getDay() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Date::Date(<span class="built_in">string</span> when)&#123;</span><br><span class="line">    <span class="keyword">int</span> where1;</span><br><span class="line">    <span class="keyword">int</span> where2;</span><br><span class="line">    where1 = when.find(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    year = when.substr(<span class="number">0</span>, where1);</span><br><span class="line">    where2 = when.find(<span class="string">&#x27;/&#x27;</span>, where1 + <span class="number">1</span>);</span><br><span class="line">    month = when.substr(where1 + <span class="number">1</span>, where2 - where1 - <span class="number">1</span>);</span><br><span class="line">    day = when.substr(where2 + <span class="number">1</span>, when.size());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Date::show</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; year &lt;&lt; <span class="string">&quot;년&quot;</span> &lt;&lt; month &lt;&lt; <span class="string">&quot;월&quot;</span> &lt;&lt; day &lt;&lt; <span class="string">&quot;일&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1945</span>년<span class="number">8</span>월<span class="number">15</span>일</span><br><span class="line"><span class="number">2014</span>년<span class="number">3</span>월<span class="number">20</span>일</span><br><span class="line"><span class="number">2014</span>,<span class="number">3</span>,<span class="number">20</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Call-by-Reference"><a href="#Call-by-Reference" class="headerlink" title="Call by Reference"></a>Call by Reference</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;refn = n;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">c</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> &amp;<span class="title">refc</span> = <span class="title">c</span>;</span></span><br></pre></td></tr></table></figure><ul><li>참조 변수<ul><li>참조자 <code>&amp;</code>의 도입</li><li>이미 존재하는 변수에 대한 다른 이름(별명)을 선언<ul><li>참조 변수는 이름만 존재</li><li>참조 변수에 새로운 공간 할당 X</li><li>초기화로 지정된 기존 변수 공유</li></ul></li></ul></li></ul><blockquote><p>reference1.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;i&#x27;</span> &lt;&lt; <span class="string">&#x27;\t&#x27;</span> &lt;&lt; <span class="string">&#x27;n&#x27;</span> &lt;&lt; <span class="string">&#x27;\t&#x27;</span> &lt;&lt; <span class="string">&quot;refn&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> &amp;refn = n;</span><br><span class="line">    n = <span class="number">4</span>;</span><br><span class="line">    refn++;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">&#x27;\t&#x27;</span> &lt;&lt; n &lt;&lt; <span class="string">&#x27;\t&#x27;</span> &lt;&lt; refn &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    refn = i;</span><br><span class="line">    refn++;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">&#x27;\t&#x27;</span> &lt;&lt; n &lt;&lt; <span class="string">&#x27;\t&#x27;</span> &lt;&lt; refn &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> *p = &amp;refn;</span><br><span class="line">    *p = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">&#x27;\t&#x27;</span> &lt;&lt; n &lt;&lt; <span class="string">&#x27;\t&#x27;</span> &lt;&lt; refn &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">inrefn</span><br><span class="line"><span class="number">1</span><span class="number">5</span><span class="number">5</span></span><br><span class="line"><span class="number">1</span><span class="number">2</span><span class="number">2</span></span><br><span class="line"><span class="number">1</span><span class="number">20</span><span class="number">20</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>reference2.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> radius;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Circle()&#123;radius = <span class="number">1</span>;&#125;</span><br><span class="line">    Circle(<span class="keyword">int</span> radius)&#123;<span class="keyword">this</span>-&gt;radius = radius;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setRadius</span><span class="params">(<span class="keyword">int</span> radius)</span></span>&#123;<span class="keyword">this</span>-&gt;radius = radius;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">3.14</span>*radius*radius;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readRadius</span><span class="params">(Circle &amp;c)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Circle donut;</span><br><span class="line">    readRadius(donut);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;donut의 면적 = &quot;</span> &lt;&lt; donut.getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readRadius</span><span class="params">(Circle &amp;c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;정수 값으로 반지름을 입력하세요 &gt;&gt; &quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; r;</span><br><span class="line">    c.setRadius(r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">정수 값으로 반지름을 입력하세요 &gt;&gt; <span class="number">3</span></span><br><span class="line">donut의 면적 = <span class="number">28.26</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>reference3.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyintStack</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> p[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> tos;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MyintStack();</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">(<span class="keyword">int</span> &amp;refn)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MyintStack a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.push(i))</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;번째 stack full&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.pop(n))</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;번째 stack empty&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyintStack::MyintStack()&#123;</span><br><span class="line">    tos = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">MyintStack::push</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tos == <span class="number">10</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    p[tos] = n;</span><br><span class="line">    tos++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">MyintStack::pop</span><span class="params">(<span class="keyword">int</span> &amp;refn)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tos == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    tos--;</span><br><span class="line">    refn = p[tos];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span><span class="number">1</span><span class="number">2</span><span class="number">3</span><span class="number">4</span><span class="number">5</span><span class="number">6</span><span class="number">7</span><span class="number">8</span><span class="number">9</span></span><br><span class="line"><span class="number">11</span>번째 <span class="built_in">stack</span> full</span><br><span class="line"><span class="number">9</span><span class="number">8</span><span class="number">7</span><span class="number">6</span><span class="number">5</span><span class="number">4</span><span class="number">3</span><span class="number">2</span><span class="number">1</span><span class="number">0</span></span><br><span class="line"><span class="number">11</span>번째 <span class="built_in">stack</span> empty</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Quiz-3"><a href="#Quiz-3" class="headerlink" title="Quiz"></a>Quiz</h2><blockquote><p>quiz.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Player(<span class="built_in">string</span> name = <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="built_in">string</span> name)</span></span>&#123;<span class="keyword">this</span>-&gt;name = name;&#125;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> name;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getEnterKey</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line">        <span class="built_in">cin</span>.getline(buf, <span class="number">99</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GamblingGame</span>&#123;</span></span><br><span class="line">    Player p[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">3</span>];</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">matchAll</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    GamblingGame();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    GamblingGame game;</span><br><span class="line">    game.run();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GamblingGame::GamblingGame()&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;***** 갬블링 게임을 시작합니다. *****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>) time(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        num[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;첫번째 선수 이름&gt;&gt;&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line">    p[<span class="number">0</span>].setName(name);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;두번째 선수 이름&gt;&gt;&quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line">    p[<span class="number">1</span>].setName(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GamblingGame::run</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> n;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; p[i % <span class="number">2</span>].getName() &lt;&lt; <span class="string">&quot; : &lt;Enter&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        p[i % <span class="number">2</span>].getEnterKey();</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;matchAll())&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; p[i % <span class="number">2</span>].getName() &lt;&lt; <span class="string">&quot;님 승리!!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;아쉽군요!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GamblingGame::matchAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> n = rand() % <span class="number">3</span>;</span><br><span class="line">        num[i] = n;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; num[i] &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (num[<span class="number">0</span>] == num[<span class="number">1</span>] &amp;&amp; num[<span class="number">0</span>] == num[<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">***** 갬블링 게임을 시작합니다. *****</span><br><span class="line">첫번째 선수 이름&gt;&gt;Kim</span><br><span class="line">두번째 선수 이름&gt;&gt;Park</span><br><span class="line">Kim : &lt;Enter&gt;</span><br><span class="line"><span class="number">0</span><span class="number">1</span><span class="number">1</span>아쉽군요!</span><br><span class="line">Park : &lt;Enter&gt;</span><br><span class="line"><span class="number">2</span><span class="number">0</span><span class="number">2</span>아쉽군요!</span><br><span class="line">Kim : &lt;Enter&gt;</span><br><span class="line"><span class="number">1</span><span class="number">2</span><span class="number">1</span>아쉽군요!</span><br><span class="line">Park : &lt;Enter&gt;</span><br><span class="line"><span class="number">1</span><span class="number">1</span><span class="number">1</span>Park님 승리!!</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><hr><h1 id="Day-7"><a href="#Day-7" class="headerlink" title="Day 7"></a>Day 7</h1><h2 id="Dynamic-Memory-1"><a href="#Dynamic-Memory-1" class="headerlink" title="Dynamic Memory"></a>Dynamic Memory</h2><blockquote><p>stack.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyintStack</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> *parr;</span><br><span class="line">    <span class="keyword">int</span> tos;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MyintStack(<span class="keyword">int</span> size);</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">(<span class="keyword">int</span> &amp;refn)</span></span>;</span><br><span class="line">    ~MyintStack()&#123;<span class="keyword">delete</span> [] parr;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">MyintStack <span class="title">a</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.push(i))</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;번째 stack full&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.pop(n))</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;번째 stack empty&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyintStack::MyintStack(<span class="keyword">int</span> size)&#123;</span><br><span class="line">    tos = <span class="number">0</span>;</span><br><span class="line">    parr = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">MyintStack::push</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tos == <span class="number">10</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    parr[tos] = n;</span><br><span class="line">    tos++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">MyintStack::pop</span><span class="params">(<span class="keyword">int</span> &amp;refn)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tos == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    tos--;</span><br><span class="line">    refn = parr[tos];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span><span class="number">1</span><span class="number">2</span><span class="number">3</span><span class="number">4</span><span class="number">5</span><span class="number">6</span><span class="number">7</span><span class="number">8</span><span class="number">9</span></span><br><span class="line"><span class="number">11</span>번째 <span class="built_in">stack</span> full</span><br><span class="line"><span class="number">9</span><span class="number">8</span><span class="number">7</span><span class="number">6</span><span class="number">5</span><span class="number">4</span><span class="number">3</span><span class="number">2</span><span class="number">1</span><span class="number">0</span></span><br><span class="line"><span class="number">11</span>번째 <span class="built_in">stack</span> empty</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Return-Reference"><a href="#Return-Reference" class="headerlink" title="Return Reference"></a>Return Reference</h2><blockquote><p>return_ref1.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> &amp;<span class="title">find</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a = find();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> &amp;ref = find();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ref &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    find() = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; find() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>return_ref2.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> &amp;<span class="title">find</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> name[] = <span class="string">&quot;Zerohertz&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    find(name, <span class="number">0</span>) = <span class="string">&#x27;5&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> &amp;ref = find(name, <span class="number">2</span>);</span><br><span class="line">    ref = <span class="string">&#x27;t&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Zerohertz</span><br><span class="line"><span class="number">5</span>erohertz</span><br><span class="line"><span class="number">5</span>etohertz</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>reference.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addConst</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    x = x + <span class="number">200</span>;</span><br><span class="line">    y = y + <span class="number">200</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;addConst&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&amp;x = &quot;</span> &lt;&lt; &amp;x &lt;&lt; <span class="string">&quot;\tx = &quot;</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&amp;y = &quot;</span> &lt;&lt; &amp;y &lt;&lt; <span class="string">&quot;\ty = &quot;</span> &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">100</span>;</span><br><span class="line">    addConst(a, b);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Main&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&amp;a = &quot;</span> &lt;&lt; &amp;a &lt;&lt; <span class="string">&quot;\ta = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&amp;b = &quot;</span> &lt;&lt; &amp;b &lt;&lt; <span class="string">&quot;\tb = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">addConst</span><br><span class="line">&amp;x = <span class="number">0x7ffee84d09a8</span>x = <span class="number">300</span></span><br><span class="line">&amp;y = <span class="number">0x7ffee84d0964</span>y = <span class="number">300</span></span><br><span class="line">Main</span><br><span class="line">&amp;a = <span class="number">0x7ffee84d09a8</span>a = <span class="number">300</span></span><br><span class="line">&amp;b = <span class="number">0x7ffee84d09a4</span>b = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>return_ref3.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> &amp;<span class="title">addConst</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    x = x + <span class="number">200</span>;</span><br><span class="line">    y = y + <span class="number">200</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;addConst&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&amp;x = &quot;</span> &lt;&lt; &amp;x &lt;&lt; <span class="string">&quot;\tx = &quot;</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&amp;y = &quot;</span> &lt;&lt; &amp;y &lt;&lt; <span class="string">&quot;\ty = &quot;</span> &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">100</span>;</span><br><span class="line">    addConst(a, b) = <span class="number">555</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Main&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&amp;a = &quot;</span> &lt;&lt; &amp;a &lt;&lt; <span class="string">&quot;\ta = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&amp;b = &quot;</span> &lt;&lt; &amp;b &lt;&lt; <span class="string">&quot;\tb = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">addConst</span><br><span class="line">&amp;x = <span class="number">0x7ffee834b9a8</span>x = <span class="number">300</span></span><br><span class="line">&amp;y = <span class="number">0x7ffee834b964</span>y = <span class="number">300</span></span><br><span class="line">Main</span><br><span class="line">&amp;a = <span class="number">0x7ffee834b9a8</span>a = <span class="number">555</span></span><br><span class="line">&amp;b = <span class="number">0x7ffee834b9a4</span>b = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Shallow-Copy-amp-Deep-Copy"><a href="#Shallow-Copy-amp-Deep-Copy" class="headerlink" title="Shallow Copy &amp; Deep Copy"></a>Shallow Copy &amp; Deep Copy</h2><ul><li>Shallow copy<ul><li>객체 복사 시, 객체의 멤버를 1:1로 복사</li><li>객체의 멤버 변수에 동적 메모리가 할당된 경우<ul><li>사본은 원본 객체가 할당 받은 메모리를 공유하는 문제 발생</li></ul></li></ul></li><li>Deep copy<ul><li>객체 복사 시, 객체의 멤버를 1:1로 복사</li><li>객체의 멤버 변수에 동적 메모리가 할당된 경우<ul><li>사본은 원본이 가진 메모리 크기만큼 별도로 동적 할당</li><li>원본의 동적 메모리에 있는 내용을 사본에 복사</li></ul></li><li>완전한 형태의 복사<ul><li>사본과 원본은 메모리를 공유하는데 문제 없음</li></ul></li></ul></li></ul><blockquote><p>shallow1_copy.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *a = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">int</span> *b = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a의 주소(복사전) : &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;b의 주소(복사전) : &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    a = b;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a의 주소(복사후) : &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;b의 주소(복사후) : &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a의 값 : &quot;</span> &lt;&lt; *a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;b의 값 : &quot;</span> &lt;&lt; *b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> a;</span><br><span class="line">    <span class="keyword">delete</span> b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">untitled(<span class="number">997</span>,<span class="number">0x11451edc0</span>) <span class="built_in">malloc</span>: *** error <span class="keyword">for</span> object <span class="number">0x7fefdc405980</span>: pointer being freed was <span class="keyword">not</span> allocated</span><br><span class="line">untitled(<span class="number">997</span>,<span class="number">0x11451edc0</span>) <span class="built_in">malloc</span>: *** <span class="built_in">set</span> a breakpoint in malloc_error_break to debug</span><br><span class="line">a의 주소(복사전) : <span class="number">0x7fefdc405970</span></span><br><span class="line">b의 주소(복사전) : <span class="number">0x7fefdc405980</span></span><br><span class="line">a의 주소(복사후) : <span class="number">0x7fefdc405980</span></span><br><span class="line">b의 주소(복사후) : <span class="number">0x7fefdc405980</span></span><br><span class="line">a의 값 : <span class="number">5</span></span><br><span class="line">b의 값 : <span class="number">5</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">6</span></span><br></pre></td></tr></table></figure><blockquote><p>shallow2_copy.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> *name;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person(Person &amp;p)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = p.name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;id = p.id;</span><br><span class="line">    &#125;</span><br><span class="line">    Person(<span class="keyword">int</span> id, <span class="keyword">const</span> <span class="keyword">char</span> *name);</span><br><span class="line">    ~Person();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">changeName</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span> &lt;&lt; id &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">zerohertz</span><span class="params">(<span class="number">1</span>, <span class="string">&quot;zerohertz&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">zhz</span><span class="params">(zerohertz)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;***** zhz 객체 생성 후 *****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    zerohertz.show();</span><br><span class="line">    zhz.show();</span><br><span class="line"></span><br><span class="line">    zhz.changeName(<span class="string">&quot;0Hz&quot;</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;***** zhz 이름 변경 후 *****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    zerohertz.show();</span><br><span class="line">    zhz.show();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// zhz, zerohertz 순으로 소멸, zerohertz 소멸 시 오류</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person::Person(<span class="keyword">int</span> id, <span class="keyword">const</span> <span class="keyword">char</span> *name)&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;id = id;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(name);</span><br><span class="line">    <span class="keyword">this</span>-&gt;name = <span class="keyword">new</span> <span class="keyword">char</span>[len + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;name, name);</span><br><span class="line">&#125;</span><br><span class="line">Person::~Person()&#123;</span><br><span class="line">    <span class="keyword">delete</span> [] name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Person::changeName</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strlen</span>(name) &gt; <span class="built_in">strlen</span>(<span class="keyword">this</span>-&gt;name))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;name, name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">untitled(<span class="number">1347</span>,<span class="number">0x11c7dddc0</span>) <span class="built_in">malloc</span>: *** error <span class="keyword">for</span> object <span class="number">0x7f9184c05970</span>: pointer being freed was <span class="keyword">not</span> allocated</span><br><span class="line">untitled(<span class="number">1347</span>,<span class="number">0x11c7dddc0</span>) <span class="built_in">malloc</span>: *** <span class="built_in">set</span> a breakpoint in malloc_error_break to debug</span><br><span class="line">***** zhz 객체 생성 후 *****</span><br><span class="line"><span class="number">1</span>,zerohertz</span><br><span class="line"><span class="number">1</span>,zerohertz</span><br><span class="line">***** zhz 이름 변경 후 *****</span><br><span class="line"><span class="number">1</span>,<span class="number">0</span>Hz</span><br><span class="line"><span class="number">1</span>,<span class="number">0</span>Hz</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">6</span></span><br></pre></td></tr></table></figure><h2 id="Copy-Constructor"><a href="#Copy-Constructor" class="headerlink" title="Copy Constructor"></a>Copy Constructor</h2><blockquote><p>copy_constructor1.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> *name;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person(Person &amp;p);</span><br><span class="line">    Person(<span class="keyword">int</span> id, <span class="keyword">const</span> <span class="keyword">char</span> *name);</span><br><span class="line">    ~Person();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">changeName</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span> &lt;&lt; id &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">zerohertz</span><span class="params">(<span class="number">1</span>, <span class="string">&quot;zerohertz&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">zhz</span><span class="params">(zerohertz)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;***** zhz 객체 생성 후 *****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    zerohertz.show();</span><br><span class="line">    zhz.show();</span><br><span class="line"></span><br><span class="line">    zhz.changeName(<span class="string">&quot;0Hz&quot;</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;***** zhz 이름 변경 후 *****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    zerohertz.show();</span><br><span class="line">    zhz.show();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person::Person(Person &amp;p)&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;id = p.id;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(p.name);</span><br><span class="line">    <span class="keyword">this</span>-&gt;name = <span class="keyword">new</span> <span class="keyword">char</span>[len + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;name, p.name);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;복사 생성자 실행, 원본 객체의 이름 : &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Person::Person(<span class="keyword">int</span> id, <span class="keyword">const</span> <span class="keyword">char</span> *name)&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;id = id;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(name);</span><br><span class="line">    <span class="keyword">this</span>-&gt;name = <span class="keyword">new</span> <span class="keyword">char</span>[len + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;name, name);</span><br><span class="line">&#125;</span><br><span class="line">Person::~Person()&#123;</span><br><span class="line">    <span class="keyword">delete</span> [] name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Person::changeName</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strlen</span>(name) &gt; <span class="built_in">strlen</span>(<span class="keyword">this</span>-&gt;name))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;name, name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">복사 생성자 실행, 원본 객체의 이름 : zerohertz</span><br><span class="line">***** zhz 객체 생성 후 *****</span><br><span class="line"><span class="number">1</span>,zerohertz</span><br><span class="line"><span class="number">1</span>,zerohertz</span><br><span class="line">***** zhz 이름 변경 후 *****</span><br><span class="line"><span class="number">1</span>,zerohertz</span><br><span class="line"><span class="number">1</span>,<span class="number">0</span>Hz</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>copy_constructor2.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyString</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> *pBuf;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MyString(<span class="keyword">const</span> <span class="keyword">char</span> *s = <span class="literal">NULL</span>);</span><br><span class="line">    MyString(MyString &amp;MyStr);</span><br><span class="line">    ~MyString();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MyString str1;</span><br><span class="line">    <span class="function">MyString <span class="title">str2</span><span class="params">(<span class="string">&quot;Hello&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">MyString <span class="title">str3</span><span class="params">(<span class="string">&quot;World!&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">MyString <span class="title">str4</span><span class="params">(str3)</span></span>;</span><br><span class="line">    str1.print();</span><br><span class="line">    str2.print();</span><br><span class="line">    str3.print();</span><br><span class="line">    str4.print();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyString::MyString(<span class="keyword">const</span> <span class="keyword">char</span> *s)&#123;</span><br><span class="line">    <span class="keyword">if</span>(s == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        pBuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1</span>];</span><br><span class="line">        pBuf[<span class="number">0</span>] = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        pBuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(s) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(pBuf, s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">MyString::MyString(MyString &amp;MyStr)&#123;</span><br><span class="line">    <span class="keyword">int</span> len = MyStr.getSize();</span><br><span class="line">    <span class="keyword">this</span>-&gt;pBuf = <span class="keyword">new</span> <span class="keyword">char</span>[len + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;pBuf, MyStr.pBuf);</span><br><span class="line">&#125;</span><br><span class="line">MyString::~MyString()&#123;</span><br><span class="line">    <span class="keyword">if</span>(pBuf) <span class="keyword">delete</span> [] pBuf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyString::print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; pBuf &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MyString::getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strlen</span>(pBuf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Hello</span><br><span class="line">World!</span><br><span class="line">World!</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>객체에서 동적 메모리 사용 시 복사 생성자 직접 생성</strong></p><hr><h1 id="Day-9"><a href="#Day-9" class="headerlink" title="Day 9"></a>Day 9</h1><h2 id="Polymorphism-다형성"><a href="#Polymorphism-다형성" class="headerlink" title="Polymorphism(다형성)"></a>Polymorphism(다형성)</h2><ul><li>Overloading<ul><li>함수 중복</li><li>연산자 중복</li><li>Default Parameter</li></ul></li><li>Overriding<ul><li>함수 재정의</li></ul></li></ul><h2 id="Function-Overloading"><a href="#Function-Overloading" class="headerlink" title="Function Overloading"></a>Function Overloading</h2><ul><li>다른 함수로 인식</li><li>함수의 이름 동일</li><li>함수의 매개변수 type, 개수 다름</li><li>return type 무관</li><li>소멸자 불가 - 매개변수 X</li><li>모호하지 않게 선언</li></ul><blockquote><p>overloading.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">big</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a &gt; b) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">big</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; size; i++)</span><br><span class="line">        <span class="keyword">if</span>(res &lt; a[i]) res = a[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">9</span>, <span class="number">-2</span>, <span class="number">8</span>, <span class="number">6</span>&#125;;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; big(<span class="number">2</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; big(<span class="built_in">array</span>, <span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Default-Parameter"><a href="#Default-Parameter" class="headerlink" title="Default Parameter"></a>Default Parameter</h2><ul><li>사전에 값을 선언한 함수의 매개변수</li><li>생략 가능</li><li>일반 매개변수 뒤에 존재</li></ul><blockquote><p>default_param.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">char</span> c=<span class="string">&#x27; &#x27;</span>, <span class="keyword">int</span> line = <span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    f();</span><br><span class="line">    f(<span class="string">&#x27;%&#x27;</span>);</span><br><span class="line">    f(<span class="string">&#x27;@&#x27;</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">char</span> c, <span class="keyword">int</span> line)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; line; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">          </span><br><span class="line">%%%%%%%%%%</span><br><span class="line">@@@@@@@@@@</span><br><span class="line">@@@@@@@@@@</span><br><span class="line">@@@@@@@@@@</span><br><span class="line">@@@@@@@@@@</span><br><span class="line">@@@@@@@@@@</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>myvec.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyVector</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> *p;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MyVector(<span class="keyword">int</span> n = <span class="number">100</span>)&#123;p = <span class="keyword">new</span> <span class="keyword">int</span>[n]; size = n;&#125;</span><br><span class="line">    ~MyVector()&#123;<span class="keyword">delete</span> [] p;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MyVector *v1, *v2;</span><br><span class="line">    v1 = <span class="keyword">new</span> MyVector();</span><br><span class="line">    v2 = <span class="keyword">new</span> MyVector();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> v1;</span><br><span class="line">    <span class="keyword">delete</span> v2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Static-amp-Non-static"><a href="#Static-amp-Non-static" class="headerlink" title="Static &amp; Non-static"></a>Static &amp; Non-static</h2><ul><li><code>static</code><ul><li>변수와 함수에 대한 기억 부류의 한 종류<ul><li>생명 주기 : 프로그램이 시작될 때 생성, 프로그램 종료 시 소멸</li><li>사용 범위 : 선언된 범위, 접근 지정에 따름</li></ul></li><li>전역 변수나 전역변수를 클래스에 캡슐화<ul><li>전역 변수나 전역 함수를 가능한 사용하지 않도록</li><li>전역 변수나 전역 함수를 <code>static</code>으로 선언하여 클래스 멤버로 선언</li></ul></li><li>객체 사이에 공유 변수를 만들고자 할 때<ul><li><code>static</code> 멤버를 선언하여 모든 객체들이 공유</li></ul></li></ul></li><li>클래스의 멤버<ul><li><code>static</code><ul><li>프로그램이 시작할 때 생성</li><li>클래스당 한번만 생성, 클래스 멤버라고 불림</li><li>클래스의 모든 인스턴스(객체)들이 공유하는 멤버</li></ul></li><li>non-<code>static</code><ul><li>객체가 생성될 때 함께 생성</li><li>객체마다 객체 내에 생성</li><li>인스턴스 멤버라고 불림</li></ul></li></ul></li></ul><blockquote><p>person.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">double</span> money;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addMoney</span><span class="params">(<span class="keyword">int</span> money)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;money += money;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> sharedMoney;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addShared</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        sharedMoney += n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Person::sharedMoney = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person han;</span><br><span class="line">    han.money = <span class="number">100</span>;</span><br><span class="line">    han.sharedMoney = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    Person lee;</span><br><span class="line">    lee.money = <span class="number">150</span>;</span><br><span class="line">    lee.addMoney(<span class="number">200</span>);</span><br><span class="line">    lee.addShared(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; han.money &lt;&lt; <span class="string">&#x27;\t&#x27;</span> &lt;&lt; lee.money &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; han.sharedMoney &lt;&lt; <span class="string">&#x27;\t&#x27;</span> &lt;&lt; lee.sharedMoney &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    Person::sharedMoney = <span class="number">1000</span>;</span><br><span class="line">    Person::addShared(<span class="number">20000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; han.money &lt;&lt; <span class="string">&#x27;\t&#x27;</span> &lt;&lt; lee.money &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; han.sharedMoney &lt;&lt; <span class="string">&#x27;\t&#x27;</span> &lt;&lt; lee.sharedMoney &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span><span class="number">350</span></span><br><span class="line"><span class="number">400</span><span class="number">400</span></span><br><span class="line"><span class="number">100</span><span class="number">350</span></span><br><span class="line"><span class="number">21000</span><span class="number">21000</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>employee.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">double</span> salary;</span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">static</span> count;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Employee(<span class="built_in">string</span> name = <span class="string">&quot;&quot;</span>, <span class="keyword">double</span> salary = <span class="number">0</span>):name(name), salary(salary)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="keyword">static</span> <span class="title">getCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Employee()&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;count--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Employee::count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Employee <span class="title">e1</span><span class="params">(<span class="string">&quot;김철수&quot;</span>)</span></span>;</span><br><span class="line">    Employee e2;</span><br><span class="line">    <span class="function">Employee <span class="title">e3</span><span class="params">(<span class="string">&quot;김철호&quot;</span>, <span class="number">20000</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n = Employee::getCount();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;현재의 직원 수 : &quot;</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">현재의 직원 수 : <span class="number">3</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>circle.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> numOfCircles;</span><br><span class="line">    <span class="keyword">int</span> radius;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Circle(<span class="keyword">int</span> r = <span class="number">1</span>):radius(r)&#123;numOfCircles++;&#125;</span><br><span class="line">    ~Circle()&#123;numOfCircles--;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">3.14</span>*radius*radius;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getNumOfCircles</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> numOfCircles;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Circle::numOfCircles = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Circle *p = <span class="keyword">new</span> Circle[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;할당된 원의 개수 : &quot;</span> &lt;&lt; Circle::getNumOfCircles() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> [] p;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;할당된 원의 개수 : &quot;</span> &lt;&lt; Circle::getNumOfCircles() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    Circle a;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;할당된 원의 개수 : &quot;</span> &lt;&lt; Circle::getNumOfCircles() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    Circle b;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;할당된 원의 개수 : &quot;</span> &lt;&lt; Circle::getNumOfCircles() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">할당된 원의 개수 : <span class="number">10</span></span><br><span class="line">할당된 원의 개수 : <span class="number">0</span></span><br><span class="line">할당된 원의 개수 : <span class="number">1</span></span><br><span class="line">할당된 원의 개수 : <span class="number">2</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="Timeline-of-Program"><a href="#Timeline-of-Program" class="headerlink" title="Timeline of Program"></a>Timeline of Program</h3><ol><li>프로그램 시작<ul><li>전역 변수</li><li><code>static</code> 멤버<ul><li>멤버 변수</li><li>멤버 함수</li></ul></li></ul></li><li>객체<ul><li>non-<code>static</code> 멤버</li></ul></li><li>객체 종료<ul><li>non-<code>static</code> 멤버 종료</li></ul></li><li>프로그램 끝<ul><li>전역 변수 종료</li><li><code>static</code> 멤버 종료</li></ul></li></ol><h3 id="Access"><a href="#Access" class="headerlink" title="Access"></a>Access</h3><ul><li><code>static</code> 멤버 함수 -&gt; <code>static</code> 멤버 변수 : 가능</li><li><code>static</code> 멤버 함수 -&gt; non-<code>static</code> 멤버 변수 : 불가능</li><li><code>static</code> 멤버 함수 -&gt; non-<code>static</code> 멤버 함수 : 불가능</li><li>non-<code>static</code> 멤버 함수 -&gt; non-<code>static</code> 멤버 변수 : 가능</li><li>non-<code>static</code> 멤버 함수 -&gt; <code>static</code> 멤버 변수 : 가능</li><li>non-<code>static</code> 멤버 함수 -&gt; <code>static</code> 멤버 함수 : 가능</li><li><code>static</code> 멤버 함수가 접근할 수 있는 것<ul><li><code>static</code> 멤버 함수</li><li><code>static</code> 멤버 변수</li><li>함수 내의 지역 변수</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>-&gt;sharedMoney += n; <span class="comment">// static 이후 객체 생성 - 오류</span></span><br></pre></td></tr></table></figure><h2 id="Quiz-4"><a href="#Quiz-4" class="headerlink" title="Quiz"></a>Quiz</h2><blockquote><p>quiz.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Random</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="keyword">static</span> <span class="title">seed</span><span class="params">()</span></span>&#123;srand(time(<span class="literal">NULL</span>));&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="keyword">static</span> <span class="title">nextInt</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">char</span> <span class="keyword">static</span> <span class="title">nextAlphabet</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="keyword">static</span> <span class="title">nextDouble</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Random::seed();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1에서 100까지 랜덤한 정수 10개를 출력합니다.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) <span class="built_in">cout</span> &lt;&lt; Random::nextInt(<span class="number">1</span>, <span class="number">100</span>) &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;알파벳을 랜덤하게 10개를 출력합니다.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) <span class="built_in">cout</span> &lt;&lt; Random::nextAlphabet() &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;랜덤한 실수를 10개 출력합니다.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) <span class="built_in">cout</span> &lt;&lt; Random::nextDouble() &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) <span class="built_in">cout</span> &lt;&lt; Random::nextDouble() &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Random::nextInt</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> rand() % (end - start + <span class="number">1</span>) + start;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Random::nextAlphabet</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        num = nextInt(<span class="number">65</span>, <span class="number">122</span>);</span><br><span class="line">        <span class="keyword">if</span>(num &gt;= <span class="number">91</span> &amp;&amp; num &lt;= <span class="number">96</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Random::nextDouble</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">double</span>) rand() / RAND_MAX;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>에서 <span class="number">100</span>까지 랜덤한 정수 <span class="number">10</span>개를 출력합니다.</span><br><span class="line"><span class="number">47</span><span class="number">98</span><span class="number">79</span><span class="number">68</span><span class="number">45</span><span class="number">18</span><span class="number">87</span><span class="number">76</span><span class="number">88</span><span class="number">15</span></span><br><span class="line">알파벳을 랜덤하게 <span class="number">10</span>개를 출력합니다.</span><br><span class="line">lKWkddyfXX</span><br><span class="line">랜덤한 실수를 <span class="number">10</span>개 출력합니다.</span><br><span class="line"><span class="number">0.891485</span><span class="number">0.195258</span><span class="number">0.707381</span><span class="number">0.95967</span><span class="number">0.167292</span></span><br><span class="line"><span class="number">0.673519</span><span class="number">0.836099</span><span class="number">0.318814</span><span class="number">0.307098</span><span class="number">0.397495</span></span><br></pre></td></tr></table></figure><hr><h1 id="Day-10"><a href="#Day-10" class="headerlink" title="Day 10"></a>Day 10</h1><h2 id="Friend"><a href="#Friend" class="headerlink" title="Friend"></a>Friend</h2><ul><li>클래스의 멤버 함수가 아닌 외부 함수<ul><li>전역 함수</li><li>다른 클래스의 멤버 함수</li></ul></li><li><code>friend</code>로 클래스 내에 선언된 함수<ul><li>클래스의 모든 멤버를 접근할 수 있는 권한 부여</li><li>프렌드 함수라고 부름</li></ul></li><li>friend<ul><li>전역 함수</li><li>다른 클래스의 멤버 함수</li><li>다른 클래스 전체</li></ul></li></ul><blockquote><p>friend1.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span>;</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">equals</span><span class="params">(Rect r, Rect s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> width, height;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Rect(<span class="keyword">int</span> width, <span class="keyword">int</span> height):width(width), height(height)&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="title">equals</span><span class="params">(Rect r, Rect s)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Rect a(3, 4), b(4, 5);</span><br><span class="line">    <span class="keyword">if</span>(equals(a, b)) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;equal&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;not equal&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">equals</span><span class="params">(Rect r, Rect s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(r.width == s.width &amp;&amp; r.height == s.height) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>friend2.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span>;</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">equals</span><span class="params">(Rect r, Rect s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RectManager</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">equals</span><span class="params">(Rect r, Rect s)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> width, height;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Rect(<span class="keyword">int</span> width, <span class="keyword">int</span> height):width(width), height(height)&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="title">RectManager::equals</span><span class="params">(Rect r, Rect s)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Rect a(3, 4), b(4, 5);</span><br><span class="line">    RectManager Man;</span><br><span class="line">    <span class="keyword">if</span>(Man.equals(a, b)) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;equal&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;not equal&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">RectManager::equals</span><span class="params">(Rect r, Rect s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(r.width == s.width &amp;&amp; r.height == s.height) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>friend3.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span>;</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">equals</span><span class="params">(Rect r, Rect s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RectManager</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">equals</span><span class="params">(Rect r, Rect s)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> width, height;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Rect(<span class="keyword">int</span> width, <span class="keyword">int</span> height):width(width), height(height)&#123;&#125;;</span><br><span class="line">    <span class="keyword">friend</span> RectManager;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Rect a(3, 4), b(4, 5);</span><br><span class="line">    RectManager Man;</span><br><span class="line">    <span class="keyword">if</span>(Man.equals(a, b)) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;equal&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;not equal&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">RectManager::equals</span><span class="params">(Rect r, Rect s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(r.width == s.width &amp;&amp; r.height == s.height) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">not</span> equal</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Operator-Overloading"><a href="#Operator-Overloading" class="headerlink" title="Operator Overloading"></a>Operator Overloading</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">리턴타입 <span class="keyword">operator</span>연산자(매개변수)</span><br></pre></td></tr></table></figure><ul><li><code>C++</code>에 본래 있는 연산자만 중복 가능</li><li>피 연산자 타입이 다른 새로운 연산 정의</li><li>연산자는 함수 형태로 구현 - 연산자 함수(Operator function)<ul><li>클래스의 멤버 함수로 구현</li><li>외부 함수로 구현하고 클래스에 프렌드 함수로 선언</li></ul></li><li>반드시 클래스와 관계를 가짐</li><li>피연산자의 개수를 바꿀 수 없음</li><li>연산의 우선 순위 변경 안됨</li><li>모든 연산자가 중복 가능하진 않음</li></ul><blockquote><p>power_by_member_function.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Power</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> kick;</span><br><span class="line">    <span class="keyword">int</span> punch;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Power(<span class="keyword">int</span> kick = <span class="number">0</span>, <span class="keyword">int</span> punch = <span class="number">0</span>):kick(kick), punch(punch)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">    Power <span class="keyword">operator</span>+(Power op2);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Power a(3, 5), b(4, 6), c;</span><br><span class="line">    c = a + b; <span class="comment">// a.operator+(b)</span></span><br><span class="line">    a.show();</span><br><span class="line">    b.show();</span><br><span class="line">    c.show();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Power::show</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Kick = &quot;</span> &lt;&lt; kick &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; <span class="string">&quot; Punch = &quot;</span> &lt;&lt; punch &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Power Power::<span class="keyword">operator</span>+(Power op2)&#123;</span><br><span class="line">    Power tmp;</span><br><span class="line">    tmp.kick = <span class="keyword">this</span>-&gt;kick + op2.kick;</span><br><span class="line">    tmp.punch = <span class="keyword">this</span>-&gt;punch + op2.punch;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>power_by_friend_function.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Power</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> kick;</span><br><span class="line">    <span class="keyword">int</span> punch;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Power(<span class="keyword">int</span> kick = <span class="number">0</span>, <span class="keyword">int</span> punch = <span class="number">0</span>):kick(kick), punch(punch)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">friend</span> Power <span class="keyword">operator</span>+(Power op1, Power op2);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Power a(3, 5), b(4, 6), c;</span><br><span class="line">    c = a + b; <span class="comment">// operator+(a, b)</span></span><br><span class="line">    a.show();</span><br><span class="line">    b.show();</span><br><span class="line">    c.show();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Power::show</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Kick = &quot;</span> &lt;&lt; kick &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; <span class="string">&quot; Punch = &quot;</span> &lt;&lt; punch &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Power <span class="keyword">operator</span>+(Power op1, Power op2)&#123;</span><br><span class="line">    Power tmp;</span><br><span class="line">    tmp.kick = op1.kick + op2.kick;</span><br><span class="line">    tmp.punch = op1.punch + op2.punch;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Kick = <span class="number">3</span>, Punch = <span class="number">5</span></span><br><span class="line">Kick = <span class="number">4</span>, Punch = <span class="number">6</span></span><br><span class="line">Kick = <span class="number">7</span>, Punch = <span class="number">11</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>cpoint_by_member_function.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPoint</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CPoint(<span class="keyword">int</span> a = <span class="number">0</span>, <span class="keyword">int</span> b = <span class="number">0</span>):x(a), y(b)&#123;&#125;</span><br><span class="line">    CPoint <span class="keyword">operator</span>-();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;(&#x27;</span> &lt;&lt; x &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; y &lt;&lt; <span class="string">&#x27;)&#x27;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">CPoint <span class="title">P1</span><span class="params">(<span class="number">2</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    CPoint P2 = -P1;</span><br><span class="line">    CPoint P3 = -(-P1);</span><br><span class="line"></span><br><span class="line">    P1.Print();</span><br><span class="line">    P2.Print();</span><br><span class="line">    P3.Print();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CPoint CPoint::<span class="keyword">operator</span>-()&#123;</span><br><span class="line">    <span class="keyword">return</span>(CPoint(-<span class="keyword">this</span>-&gt;x, -<span class="keyword">this</span>-&gt;y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>cpoint_by_friend_function.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPoint</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CPoint(<span class="keyword">int</span> a = <span class="number">0</span>, <span class="keyword">int</span> b = <span class="number">0</span>):x(a), y(b)&#123;&#125;</span><br><span class="line">    <span class="keyword">friend</span> CPoint <span class="keyword">operator</span>-(CPoint obj);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;(&#x27;</span> &lt;&lt; x &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; y &lt;&lt; <span class="string">&#x27;)&#x27;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">CPoint <span class="title">P1</span><span class="params">(<span class="number">2</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    CPoint P2 = -P1;</span><br><span class="line">    CPoint P3 = -(-P1);</span><br><span class="line"></span><br><span class="line">    P1.Print();</span><br><span class="line">    P2.Print();</span><br><span class="line">    P3.Print();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CPoint <span class="keyword">operator</span>-(CPoint obj)&#123;</span><br><span class="line">    <span class="keyword">return</span> CPoint(-obj.x, -obj.y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">(<span class="number">-2</span>,<span class="number">-2</span>)</span><br><span class="line">(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>prefix_by_member_function.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Power</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> kick;</span><br><span class="line">    <span class="keyword">int</span> punch;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Power(<span class="keyword">int</span> kick = <span class="number">0</span>, <span class="keyword">int</span> punch = <span class="number">0</span>):kick(kick), punch(punch)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">    Power <span class="keyword">operator</span>++(); <span class="comment">// 매개변수 존재 -&gt; postfix</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Power a(3, 5), b;</span><br><span class="line">    a.show();</span><br><span class="line">    b = ++a;</span><br><span class="line">    a.show();</span><br><span class="line">    b.show();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Power::show</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Kick = &quot;</span> &lt;&lt; kick &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; <span class="string">&quot; Punch = &quot;</span> &lt;&lt; punch &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Power Power::<span class="keyword">operator</span>++()&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;kick++;</span><br><span class="line">    <span class="keyword">this</span>-&gt;punch++;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>postfix_by_friend_function.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Power</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> kick;</span><br><span class="line">    <span class="keyword">int</span> punch;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Power(<span class="keyword">int</span> kick = <span class="number">0</span>, <span class="keyword">int</span> punch = <span class="number">0</span>):kick(kick), punch(punch)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">friend</span> Power <span class="keyword">operator</span>++(Power &amp;p, <span class="keyword">int</span> x); <span class="comment">// x 삭제 -&gt; prefix</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Power a(3, 5), b;</span><br><span class="line">    a.show();</span><br><span class="line">    b = a++;</span><br><span class="line">    a.show();</span><br><span class="line">    b.show();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Power::show</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Kick = &quot;</span> &lt;&lt; kick &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; <span class="string">&quot; Punch = &quot;</span> &lt;&lt; punch &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Power <span class="keyword">operator</span>++(Power &amp;p, <span class="keyword">int</span> x)&#123;</span><br><span class="line">    p.kick++;</span><br><span class="line">    p.punch++;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Kick = <span class="number">3</span>, Punch = <span class="number">5</span></span><br><span class="line">Kick = <span class="number">4</span>, Punch = <span class="number">6</span></span><br><span class="line">Kick = <span class="number">4</span>, Punch = <span class="number">6</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>pre_post.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Power</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> kick;</span><br><span class="line">    <span class="keyword">int</span> punch;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Power(<span class="keyword">int</span> kick = <span class="number">0</span>, <span class="keyword">int</span> punch = <span class="number">0</span>):kick(kick), punch(punch)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">friend</span> Power <span class="keyword">operator</span>++(Power &amp;p);</span><br><span class="line">    <span class="keyword">friend</span> Power <span class="keyword">operator</span>++(Power &amp;p, <span class="keyword">int</span> x);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Power a(3, 5), b;</span><br><span class="line">    a.show();</span><br><span class="line">    b = ++a;</span><br><span class="line">    a.show();</span><br><span class="line">    b.show();</span><br><span class="line">    Power c(3, 5), d;</span><br><span class="line">    d = c++;</span><br><span class="line">    c.show();</span><br><span class="line">    d.show();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Power::show</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Kick = &quot;</span> &lt;&lt; kick &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; <span class="string">&quot; Punch = &quot;</span> &lt;&lt; punch &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Power <span class="keyword">operator</span>++(Power &amp;p)&#123;</span><br><span class="line">    p.kick++;</span><br><span class="line">    p.punch++;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line">Power <span class="keyword">operator</span>++(Power &amp;p, <span class="keyword">int</span> x)&#123;</span><br><span class="line">    p.kick++;</span><br><span class="line">    p.punch++;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Kick = <span class="number">3</span>, Punch = <span class="number">5</span></span><br><span class="line">Kick = <span class="number">4</span>, Punch = <span class="number">6</span></span><br><span class="line">Kick = <span class="number">4</span>, Punch = <span class="number">6</span></span><br><span class="line">Kick = <span class="number">4</span>, Punch = <span class="number">6</span></span><br><span class="line">Kick = <span class="number">4</span>, Punch = <span class="number">6</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>complex.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span>&#123;</span></span><br><span class="line">    <span class="keyword">friend</span> ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;os, <span class="keyword">const</span> Complex &amp;v);</span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Complex(<span class="keyword">double</span> x = <span class="number">0</span>, <span class="keyword">double</span> y = <span class="number">0</span>):x(x), y(y)&#123;&#125;</span><br><span class="line">    Complex <span class="keyword">operator</span>+(<span class="keyword">const</span> Complex &amp;v2) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="function">Complex <span class="title">v</span><span class="params">(<span class="number">0.0</span>, <span class="number">0.0</span>)</span></span>;</span><br><span class="line">        v.x = <span class="keyword">this</span>-&gt;x + v2.x;</span><br><span class="line">        v.y = <span class="keyword">this</span>-&gt;y + v2.y;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;(&#x27;</span> &lt;&lt; x &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; y &lt;&lt; <span class="string">&#x27;i&#x27;</span> &lt;&lt; <span class="string">&#x27;)&#x27;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Complex v1(1.1,2.1), v2(12.12, 13.13), v3;</span><br><span class="line">    v3 = v1 + v2;</span><br><span class="line">    v1.display();</span><br><span class="line">    v2.display();</span><br><span class="line">    v3.display();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v1 &lt;&lt; v2 &lt;&lt; v3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;os, <span class="keyword">const</span> Complex &amp;v)&#123;</span><br><span class="line">    os &lt;&lt; <span class="string">&#x27;(&#x27;</span> &lt;&lt; v.x &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; v.y &lt;&lt; <span class="string">&#x27;i&#x27;</span> &lt;&lt; <span class="string">&#x27;)&#x27;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1.1</span>,<span class="number">2.1</span>i)</span><br><span class="line">(<span class="number">12.12</span>,<span class="number">13.13</span>i)</span><br><span class="line">(<span class="number">13.22</span>,<span class="number">15.23</span>i)</span><br><span class="line">(<span class="number">1.1</span>,<span class="number">2.1</span>i)</span><br><span class="line">(<span class="number">12.12</span>,<span class="number">13.13</span>i)</span><br><span class="line">(<span class="number">13.22</span>,<span class="number">15.23</span>i)</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Quiz-5"><a href="#Quiz-5" class="headerlink" title="Quiz"></a>Quiz</h2><blockquote><p>quiz.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> re, im;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Complex(<span class="keyword">double</span> r):re(r), im(<span class="number">0</span>)&#123;&#125;</span><br><span class="line">    Complex(<span class="keyword">double</span> x = <span class="number">0</span>, <span class="keyword">double</span> y = <span class="number">0</span>):re(x),im(y)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Output</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; re &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; im &lt;&lt; <span class="string">&#x27;i&#x27;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Complex &amp;<span class="keyword">operator</span>+=(Complex com);</span><br><span class="line">    Complex &amp;<span class="keyword">operator</span>-();</span><br><span class="line">    <span class="keyword">friend</span> Complex <span class="keyword">operator</span>+(Complex &amp;com1, Complex &amp;com2);</span><br><span class="line">    <span class="keyword">friend</span> Complex <span class="keyword">operator</span>++(Complex &amp;com);</span><br><span class="line">    <span class="keyword">friend</span> Complex <span class="keyword">operator</span>++(Complex &amp;com, <span class="keyword">int</span> x);</span><br><span class="line">    <span class="keyword">friend</span> ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;os, Complex &amp;com)&#123;</span><br><span class="line">        os &lt;&lt; <span class="string">&#x27;(&#x27;</span> &lt;&lt; com.re &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; com.im &lt;&lt; <span class="string">&#x27;i&#x27;</span> &lt;&lt; <span class="string">&#x27;)&#x27;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> os;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Complex c1(1, 2), c2(3 ,4), c(9, 200);</span><br><span class="line">    c1.Output(); c2.Output(); c1 += c2; c1.Output();</span><br><span class="line">    Complex c3 = c1 + c2;</span><br><span class="line">    Complex c4 = c1 += c2, c5, c6; c3.Output();</span><br><span class="line">    c5 = ++c4; c4.Output(); c5.Output();</span><br><span class="line">    c6 = c4++; c4.Output(); c6.Output();</span><br><span class="line">    c2 = -c2; <span class="built_in">cout</span> &lt;&lt; c2; <span class="built_in">cout</span> &lt;&lt; c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Complex &amp;Complex::<span class="keyword">operator</span>+=(Complex com)&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;re = <span class="keyword">this</span>-&gt;re + com.re;</span><br><span class="line">    <span class="keyword">this</span>-&gt;im = <span class="keyword">this</span>-&gt;im + com.im;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">Complex &amp;Complex::<span class="keyword">operator</span>-()&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">com</span><span class="params">(-<span class="keyword">this</span>-&gt;re, -<span class="keyword">this</span>-&gt;im)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> com;</span><br><span class="line">&#125;</span><br><span class="line">Complex <span class="keyword">operator</span>+(Complex &amp;com1, Complex &amp;com2)&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">com</span><span class="params">(com1.re + com2.re, com1.im + com2.im)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> com;</span><br><span class="line">&#125;</span><br><span class="line">Complex <span class="keyword">operator</span>++(Complex &amp;com)&#123;</span><br><span class="line">    com.re++;</span><br><span class="line">    com.im++;</span><br><span class="line">    <span class="keyword">return</span> com;</span><br><span class="line">&#125;</span><br><span class="line">Complex <span class="keyword">operator</span>++(Complex &amp;com, <span class="keyword">int</span> x)&#123;</span><br><span class="line">    com.re++;</span><br><span class="line">    com.im++;</span><br><span class="line">    <span class="keyword">return</span> com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="number">2</span>i</span><br><span class="line"><span class="number">3</span> + <span class="number">4</span>i</span><br><span class="line"><span class="number">4</span> + <span class="number">6</span>i</span><br><span class="line"><span class="number">7</span> + <span class="number">10</span>i</span><br><span class="line"><span class="number">8</span> + <span class="number">11</span>i</span><br><span class="line"><span class="number">8</span> + <span class="number">11</span>i</span><br><span class="line"><span class="number">9</span> + <span class="number">12</span>i</span><br><span class="line"><span class="number">9</span> + <span class="number">12</span>i</span><br><span class="line">(<span class="number">-3</span>,<span class="number">-4</span>i)</span><br><span class="line">(<span class="number">9</span>,<span class="number">200</span>i)</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><hr><h1 id="Day-11"><a href="#Day-11" class="headerlink" title="Day 11"></a>Day 11</h1><h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><blockquote><p>stack.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">int</span> *mem;</span><br><span class="line">    <span class="keyword">int</span> tos;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Stack(<span class="keyword">int</span> size = <span class="number">4</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;size = size;</span><br><span class="line">        mem = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">        tos = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Stack()&#123;<span class="keyword">delete</span> [] mem;&#125;</span><br><span class="line">    Stack &amp;<span class="keyword">operator</span>&lt;&lt;(<span class="keyword">int</span> n);</span><br><span class="line">    Stack &amp;<span class="keyword">operator</span>&gt;&gt;(<span class="keyword">int</span> &amp;n);</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Stack <span class="title">stack</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="built_in">stack</span> &lt;&lt; 1 &lt;&lt; 2 &lt;&lt; 3 &lt;&lt; 4 &lt;&lt; 5;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">stack</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">stack</span> &gt;&gt; x;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stack &amp;Stack::<span class="keyword">operator</span>&lt;&lt;(<span class="keyword">int</span> n)&#123;</span><br><span class="line">    <span class="keyword">if</span>(tos == size - <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>-&gt;tos++;</span><br><span class="line">    <span class="keyword">this</span>-&gt;mem[tos] = n;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">Stack &amp;Stack::<span class="keyword">operator</span>&gt;&gt;(<span class="keyword">int</span> &amp;n)&#123;</span><br><span class="line">    <span class="keyword">if</span>(tos == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    n = <span class="keyword">this</span>-&gt;mem[tos];</span><br><span class="line">    <span class="keyword">this</span>-&gt;tos--;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> Stack::<span class="keyword">operator</span>!()&#123;</span><br><span class="line">    <span class="keyword">if</span>(tos == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span><span class="number">4</span><span class="number">3</span><span class="number">2</span><span class="number">1</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Const-Member-amp-Const-Object"><a href="#Const-Member-amp-Const-Object" class="headerlink" title="Const Member &amp; Const Object"></a>Const Member &amp; Const Object</h2><ul><li><code>const</code> member variable : 객체 생성과 동시에 초기화 필요<ul><li>멤버 초기화 구문 사용</li></ul></li><li><code>const</code> member function : 멤버 변수의 값을 읽을 수 있으나 변경 불가능<ul><li>멤버 변수의 주소 반환 불가</li><li>비<code>const</code> 멤버 함수의 호출 불가</li></ul></li><li><code>const</code> object<ul><li>객체 생성 시 <code>const</code> 접두사 추가</li><li>멤버 변수의 값 변경 불가</li><li><code>const</code> 멤버 함수 이외의 멤버 함수에 대한 호출 불가</li></ul></li></ul><h2 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h2><ul><li>기본 클래스(Base class) - 상속해주는 클래스, 부모 클래스</li><li>파생 클래스(Derived class) - 상속받는 클래스, 자식 클래스</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> :</span> <span class="keyword">public</span> Base&#123; <span class="comment">//public, private, protected</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>간결한 클래스 작성</li><li>클래스 간의 계층적 분류 및 관리의 용이함</li><li>클래스 재사용과 확장을 통한 소프트웨어 생산성 향상</li></ul><blockquote><p>inheritance.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">this</span>-&gt;x = x; <span class="keyword">this</span>-&gt;y = y;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showPoint</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;(&#x27;</span> &lt;&lt; x &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; y &lt;&lt; <span class="string">&#x27;)&#x27;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> :</span> <span class="keyword">public</span> Point&#123;</span><br><span class="line">    <span class="built_in">string</span> color;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setColor</span><span class="params">(<span class="built_in">string</span> color)</span></span>&#123;<span class="keyword">this</span>-&gt;color = color;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showColorPoint</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Point p;</span><br><span class="line">    ColorPoint cp;</span><br><span class="line">    cp.<span class="built_in">set</span>(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    cp.setColor(<span class="string">&quot;Red&quot;</span>);</span><br><span class="line">    cp.showColorPoint();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ColorPoint::showColorPoint</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; color &lt;&lt; <span class="string">&quot; : &quot;</span>;</span><br><span class="line">    showPoint();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Red : (<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Casting"><a href="#Casting" class="headerlink" title="Casting"></a>Casting</h2><ul><li>업 캐스팅(Up-casting)<ul><li>파생 클래스의 객체를 기본 클래스의 포인터로 가리키는 것</li><li>포인터 : 기본</li><li>객체 : 파생</li></ul></li><li>다운 캐스팅(Down-casting)<ul><li>기본 클래스 포인터가 가리키는 객체를 파생 클래스의 포인터로 가리키는 것</li><li>명시적 형변환 필요</li><li>포인터 : 파생</li><li>객체 : 기본</li></ul></li></ul><h2 id="접근-지정자-1"><a href="#접근-지정자-1" class="headerlink" title="접근 지정자"></a>접근 지정자</h2><ul><li>private 멤버<ul><li>선언된 클래스 내에서만 접근 가능</li><li>파생 클래스에서도 기본 클래스의 private 멤버 직접 접근 불가</li></ul></li><li>public 멤버<ul><li>선언된 클래스나 외부 어떤 클래스, 모든 외부 함수에 접근 허용</li><li>파생 클래스에서 기본 클래스의 public 멤버 접근 가능</li></ul></li><li>protected 멤버<ul><li>선언된 클래스에서 접근 가능</li><li>파생 클래스에서만 접근 허용</li></ul></li></ul><blockquote><p>point.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Point(<span class="keyword">int</span> x, <span class="keyword">int</span> y):x(x), y(y)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> x;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> y;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">this</span>-&gt;x = x; <span class="keyword">this</span>-&gt;y = y;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> :</span> <span class="keyword">public</span> Point&#123;</span><br><span class="line">    <span class="built_in">string</span> color;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ColorPoint():Point(<span class="number">0</span>, <span class="number">0</span>)&#123;color = <span class="string">&quot;BLACK&quot;</span>;&#125;</span><br><span class="line">    ColorPoint(<span class="keyword">int</span> x, <span class="keyword">int</span> y):Point(x, y)&#123;&#125;</span><br><span class="line">    ColorPoint(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="built_in">string</span> color):Point(x, y)&#123;<span class="keyword">this</span>-&gt;color = color;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPoint</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;move(x, y);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setColor</span><span class="params">(<span class="built_in">string</span> color)</span></span>&#123;<span class="keyword">this</span>-&gt;color = color;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(ColorPoint &amp;p)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ColorPoint zeroPoint;</span><br><span class="line">    show(zeroPoint);</span><br><span class="line">    <span class="function">ColorPoint <span class="title">cp</span><span class="params">(<span class="number">5</span>, <span class="number">5</span>)</span></span>;</span><br><span class="line">    cp.setPoint(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    cp.setColor(<span class="string">&quot;BLUE&quot;</span>);</span><br><span class="line">    show(cp);</span><br><span class="line">    <span class="function">ColorPoint <span class="title">cpRed</span><span class="params">(<span class="number">23</span>, <span class="number">33</span>, <span class="string">&quot;RED&quot;</span>)</span></span>;</span><br><span class="line">    show(cpRed);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(ColorPoint &amp;p)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; p.color &lt;&lt; <span class="string">&quot;색으로 &quot;</span> &lt;&lt; <span class="string">&#x27;(&#x27;</span> &lt;&lt; p.getX() &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; p.getY() &lt;&lt; <span class="string">&#x27;)&#x27;</span> &lt;&lt; <span class="string">&quot;에 위치한 점입니다.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BLACK색으로 (<span class="number">0</span>,<span class="number">0</span>)에 위치한 점입니다.</span><br><span class="line">BLUE색으로 (<span class="number">10</span>,<span class="number">20</span>)에 위치한 점입니다.</span><br><span class="line">RED색으로 (<span class="number">23</span>,<span class="number">33</span>)에 위치한 점입니다.</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Quiz-6"><a href="#Quiz-6" class="headerlink" title="Quiz"></a>Quiz</h2><blockquote><p>quiz.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseArray</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> capacity;</span><br><span class="line">    <span class="keyword">int</span> *mem;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    BaseArray(<span class="keyword">int</span> capacity = <span class="number">100</span>):capacity(capacity)&#123;mem = <span class="keyword">new</span> <span class="keyword">int</span>[capacity];&#125;</span><br><span class="line">    ~BaseArray()&#123;<span class="keyword">delete</span> [] mem;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> val)</span></span>&#123;mem[index] = val;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;<span class="keyword">return</span> mem[index];&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getCapacity</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> capacity;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> :</span> BaseArray&#123;</span><br><span class="line">    <span class="keyword">int</span> head;</span><br><span class="line">    <span class="keyword">int</span> tail;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MyQueue(<span class="keyword">int</span> capacity):BaseArray(capacity)&#123;head = <span class="number">0</span>; tail = <span class="number">-1</span>; size = <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dequeue</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">capacity</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> getCapacity();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> size;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setSize</span><span class="params">(<span class="keyword">int</span> S = <span class="number">0</span>)</span></span>&#123;size = S;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> size;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">MyQueue <span class="title">mQ</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> Size;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;큐의 사이즈를 입력하라&gt;&gt; &quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; Size;</span><br><span class="line">    mQ.setSize(Size);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;큐에 삽입할 &quot;</span>&lt;&lt; mQ.getSize() &lt;&lt; <span class="string">&quot;개의 정수를 입력하라&gt;&gt; &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mQ.getSize(); i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        mQ.enqueue(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;큐의 용량 : &quot;</span> &lt;&lt; mQ.capacity() &lt;&lt; <span class="string">&quot;,\t큐의 크기 : &quot;</span> &lt;&lt; mQ.length() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;큐의 원소를 순서대로 제거하여 출력한다&gt;&gt; &quot;</span>;</span><br><span class="line">    <span class="keyword">while</span>(mQ.length() != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; mQ.dequeue() &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">&quot;큐의 현재 크기 : &quot;</span> &lt;&lt; mQ.length() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyQueue::enqueue</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> he = head % getCapacity();</span><br><span class="line">    put(he, n);</span><br><span class="line">    head++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MyQueue::dequeue</span><span class="params">()</span></span>&#123;</span><br><span class="line">    tail++;</span><br><span class="line">    <span class="keyword">int</span> ta = tail % getCapacity();</span><br><span class="line">    size--;</span><br><span class="line">    <span class="keyword">return</span> get(ta);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">큐의 사이즈를 입력하라&gt;&gt; <span class="number">5</span></span><br><span class="line">큐에 삽입할 <span class="number">5</span>개의 정수를 입력하라&gt;&gt; <span class="number">12</span> <span class="number">34</span> <span class="number">44</span> <span class="number">33</span> <span class="number">22</span></span><br><span class="line">큐의 용량 : <span class="number">100</span>,큐의 크기 : <span class="number">5</span></span><br><span class="line">큐의 원소를 순서대로 제거하여 출력한다&gt;&gt; <span class="number">12</span> <span class="number">34</span> <span class="number">44</span> <span class="number">33</span> <span class="number">22</span> </span><br><span class="line">큐의 현재 크기 : <span class="number">0</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><hr><h1 id="Day-12"><a href="#Day-12" class="headerlink" title="Day 12"></a>Day 12</h1><h2 id="Constructor-of-Inheritance"><a href="#Constructor-of-Inheritance" class="headerlink" title="Constructor of Inheritance"></a>Constructor of Inheritance</h2><blockquote><p>constructor.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TV</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TV()&#123;size = <span class="number">20</span>;&#125;</span><br><span class="line">    TV(<span class="keyword">int</span> size):size(size)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> size;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WideTV</span> :</span> <span class="keyword">public</span> TV&#123;</span><br><span class="line">    <span class="keyword">bool</span> videoIn;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    WideTV(<span class="keyword">int</span> size, <span class="keyword">bool</span> videoIn) : TV(size)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;videoIn = videoIn;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">getVideoIn</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> videoIn;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartTV</span> :</span> <span class="keyword">public</span> WideTV&#123;</span><br><span class="line">    <span class="built_in">string</span> ipAddr;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    SmartTV(<span class="built_in">string</span> ipAddr, <span class="keyword">int</span> size) : WideTV(size, <span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ipAddr = ipAddr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">getipAddr</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> ipAddr;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">SmartTV <span class="title">htv</span><span class="params">(<span class="string">&quot;192.0.0.1&quot;</span>, <span class="number">32</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;size = &quot;</span> &lt;&lt; htv.getSize() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;videoIn = &quot;</span> &lt;&lt; htv.getVideoIn() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;IP = &quot;</span> &lt;&lt; htv.getipAddr() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">size = <span class="number">32</span></span><br><span class="line">videoIn = <span class="number">1</span></span><br><span class="line">IP = <span class="number">192.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Virtual-Function-amp-Overriding"><a href="#Virtual-Function-amp-Overriding" class="headerlink" title="Virtual Function &amp; Overriding"></a>Virtual Function &amp; Overriding</h2><ul><li>Virtual function<ul><li><code>virtual</code> 키워드로 선언된 멤버 함수</li><li>동적 바인딩 지시어</li><li>컴파일러에게 함수에 대한 호출 바인딩을 실행 시간까지 미루도록 지시</li></ul></li><li>Function overriding<ul><li>파생 클래스에서 기본 클래스의 가상 함수와 동일한 이름의 함수 선언</li><li>기본 클래스 : 가상 함수의 존재감 상실</li><li>파생 클래스 : 오버라이딩한 함수가 호출되도록 동적 바인딩</li><li>함수 재정의라고도 부름</li><li>다형성의 한 종류</li></ul></li><li>조건<ul><li><code>virtual</code>으로 함수 선언(파생 클래스는 생략 가능)</li><li>upcasting</li><li>함수 동일</li></ul></li></ul><blockquote><p>overriding.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> :</span> <span class="keyword">public</span> Base&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Derived&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GrandDerived</span> :</span> <span class="keyword">public</span> Derived&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;GrandDerived&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Base *bp = <span class="keyword">new</span> GrandDerived;</span><br><span class="line">    bp-&gt;f();</span><br><span class="line">    Derived *dp = <span class="keyword">new</span> GrandDerived;</span><br><span class="line">    dp-&gt;f();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GrandDerived</span><br><span class="line">GrandDerived</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>destructor1.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~Base()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;~Base&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> :</span> <span class="keyword">public</span> Base&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~Derived()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;~Derived&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GrandDerived</span> :</span> <span class="keyword">public</span> Derived&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~GrandDerived()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;~GrandDerived&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Base *bp = <span class="keyword">new</span> GrandDerived;</span><br><span class="line">    Derived *dp = <span class="keyword">new</span> GrandDerived;</span><br><span class="line">    GrandDerived *gp = <span class="keyword">new</span> GrandDerived;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> bp;</span><br><span class="line">    <span class="keyword">delete</span> dp;</span><br><span class="line">    <span class="keyword">delete</span> gp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">~Base</span><br><span class="line">~Derived</span><br><span class="line">~Base</span><br><span class="line">~GrandDerived</span><br><span class="line">~Derived</span><br><span class="line">~Base</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>destructor2.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~Base()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;~Base&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> :</span> <span class="keyword">public</span> Base&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~Derived()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;~Derived&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GrandDerived</span> :</span> <span class="keyword">public</span> Derived&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~GrandDerived()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;~GrandDerived&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Base *bp = <span class="keyword">new</span> GrandDerived;</span><br><span class="line">    Derived *dp = <span class="keyword">new</span> GrandDerived;</span><br><span class="line">    GrandDerived *gp = <span class="keyword">new</span> GrandDerived;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> bp;</span><br><span class="line">    <span class="keyword">delete</span> dp;</span><br><span class="line">    <span class="keyword">delete</span> gp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">~GrandDerived</span><br><span class="line">~Derived</span><br><span class="line">~Base</span><br><span class="line">~GrandDerived</span><br><span class="line">~Derived</span><br><span class="line">~Base</span><br><span class="line">~GrandDerived</span><br><span class="line">~Derived</span><br><span class="line">~Base</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Overloading-vs-Overrding"><a href="#Overloading-vs-Overrding" class="headerlink" title="Overloading vs. Overrding"></a>Overloading vs. Overrding</h2><ul><li>Overloading<ul><li>이름만 같은 함수 중복 작성</li><li>하나의 클래스</li></ul></li><li>Overriding<ul><li>모든 것이 완벽히 같은 함수 재작성</li><li>상속</li></ul></li></ul><h2 id="Quiz-7"><a href="#Quiz-7" class="headerlink" title="Quiz"></a>Quiz</h2><blockquote><p>quiz.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseArray</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> capacity;</span><br><span class="line">    <span class="keyword">int</span> *mem;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    BaseArray(<span class="keyword">int</span> capacity = <span class="number">100</span>):capacity(capacity)&#123;mem = <span class="keyword">new</span> <span class="keyword">int</span>[capacity];&#125;</span><br><span class="line">    ~BaseArray()&#123;<span class="keyword">delete</span> [] mem;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> val)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getCapacity</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> capacity;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> :</span> <span class="keyword">public</span> BaseArray&#123;</span><br><span class="line">    <span class="keyword">int</span> tos;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MyStack(<span class="keyword">int</span> capacity) : BaseArray(capacity)&#123;tos = <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">capacity</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> getCapacity();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> tos;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">MyStack <span class="title">mStack</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;스택에 삽입할 5개의 정수를 입력하라&gt;&gt; &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        mStack.push(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;스택 용량:&quot;</span> &lt;&lt; mStack.capacity() &lt;&lt; <span class="string">&quot;, 스택 크기:&quot;</span> &lt;&lt; mStack.length() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;스택의 모든 원소를 팝하여 출력한다&gt;&gt; &quot;</span>;</span><br><span class="line">    <span class="keyword">while</span>(mStack.length() != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; mStack.pop() &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">&quot;스택의 현재 크기 : &quot;</span> &lt;&lt; mStack.length() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BaseArray::put</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    mem[index] = val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BaseArray::get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mem[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyStack::push</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    put(tos, n);</span><br><span class="line">    tos++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MyStack::pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    tos--;</span><br><span class="line">    <span class="keyword">return</span> get(tos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">스택에 삽입할 <span class="number">5</span>개의 정수를 입력하라&gt;&gt; <span class="number">34</span> <span class="number">52</span> <span class="number">41</span> <span class="number">12</span> <span class="number">78</span></span><br><span class="line">스택 용량:<span class="number">100</span>, 스택 크기:<span class="number">5</span></span><br><span class="line">스택의 모든 원소를 팝하여 출력한다&gt;&gt; <span class="number">78</span> <span class="number">12</span> <span class="number">41</span> <span class="number">52</span> <span class="number">34</span> </span><br><span class="line">스택의 현재 크기 : <span class="number">0</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><hr><h1 id="Day-13"><a href="#Day-13" class="headerlink" title="Day 13"></a>Day 13</h1><h2 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h2><ul><li>인터페이스만 선언하고 구현을 분리하여 작업자마다 다양한 구현 가능</li><li>사용자는 구현의 내용을 모르지만 인터페이스에 선언된 순수 가상 함수가 구현되어있기 때문에 호출하여 사용하기만 하면 됨</li></ul><blockquote><p>shape.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span>&#123;</span></span><br><span class="line">    Shape *next;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>= <span class="number">0</span>; <span class="comment">// 순수 가상 함수</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Shape()&#123;next = <span class="literal">NULL</span>;&#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~Shape()&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span></span>&#123;draw();&#125;</span><br><span class="line">    <span class="function">Shape *<span class="title">add</span><span class="params">(Shape *p)</span></span>&#123;<span class="keyword">this</span>-&gt;next = p; <span class="keyword">return</span> p;&#125;;</span><br><span class="line">    <span class="function">Shape *<span class="title">getNext</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> next;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> :</span> <span class="keyword">public</span> Shape&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Circle&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">    ~Circle()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;del Circle&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span> :</span> <span class="keyword">public</span> Shape&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Rect&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">    ~Rect()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;del Rect&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Shape *pStart = <span class="literal">NULL</span>;</span><br><span class="line">    Shape *pLast;</span><br><span class="line">    pStart = <span class="keyword">new</span> Circle();</span><br><span class="line">    pLast = pStart;</span><br><span class="line">    pLast = pLast-&gt;add(<span class="keyword">new</span> Rect());</span><br><span class="line">    pLast = pLast-&gt;add(<span class="keyword">new</span> Rect());</span><br><span class="line">    pLast = pLast-&gt;add(<span class="keyword">new</span> Circle());</span><br><span class="line">    pLast = pLast-&gt;add(<span class="keyword">new</span> Rect());</span><br><span class="line">    Shape *p = pStart;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        p-&gt;paint();</span><br><span class="line">        p = p-&gt;getNext();</span><br><span class="line">    &#125;</span><br><span class="line">    p = pStart;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        Shape *q = p-&gt;getNext();</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        p = q;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Circle</span><br><span class="line">Rect</span><br><span class="line">Rect</span><br><span class="line">Circle</span><br><span class="line">Rect</span><br><span class="line">del Circle</span><br><span class="line">del Rect</span><br><span class="line">del Rect</span><br><span class="line">del Circle</span><br><span class="line">del Rect</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Abstract-Class"><a href="#Abstract-Class" class="headerlink" title="Abstract Class"></a>Abstract Class</h2><ul><li>최소한 하나의 순수 가상 함수를 가진 클래스</li><li>온전한 클래스가 아니므로 객체 생성 불가능</li><li>추상 클래스의 포인터는 선언 가능</li><li>순수 가상 함수를 통해 파생 클래스에서 구현할 함수의 형태(원형)을 보여주는 인터페이스 역할</li></ul><blockquote><p>calculator.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;정수 2개를 입력하세요&gt;&gt;&quot;</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        input();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;계산된 값은 &quot;</span> &lt;&lt; calc(a, b) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adder</span> :</span> <span class="keyword">public</span> Calculator&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> a + b;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subtract</span> :</span> <span class="keyword">public</span> Calculator&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> a - b;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Calculator *c;</span><br><span class="line">    c = <span class="keyword">new</span> Adder;</span><br><span class="line">    c-&gt;run();</span><br><span class="line">    c = <span class="keyword">new</span> Subtract;</span><br><span class="line">    c-&gt;run();</span><br><span class="line">    <span class="keyword">delete</span> c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">정수 <span class="number">2</span>개를 입력하세요&gt;&gt;<span class="number">4</span> <span class="number">3</span></span><br><span class="line">계산된 값은 <span class="number">7</span></span><br><span class="line">정수 <span class="number">2</span>개를 입력하세요&gt;&gt;<span class="number">4</span> <span class="number">3</span></span><br><span class="line">계산된 값은 <span class="number">1</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Generalization-of-Function"><a href="#Generalization-of-Function" class="headerlink" title="Generalization of Function"></a>Generalization of Function</h2><ul><li>Generic 혹은 일반화<ul><li>함수나 클래스를 일반화시키고, 매개변수 타입을 지정하여 틀에서 찍어내듯이 함수나 클래스 코드를 생산하는 기법</li></ul></li><li>Template<ul><li>함수나 클래스를 일반화하는 <code>C++</code> 도구</li><li><code>template</code> 키워드로 함수나 클래스 선언</li><li>Generic type - 일반화를 위한 Data type</li></ul></li></ul><blockquote><p>sum.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">Sum</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>)&#123;</span></span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Sum(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Sum(<span class="number">1.1</span>, <span class="number">2.2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Sum(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">3.3</span></span><br><span class="line">c</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>search.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">bool</span> <span class="title">search</span>(<span class="title">T</span> <span class="title">one</span>, <span class="title">T</span> <span class="title">arr</span>[], <span class="title">int</span> <span class="title">size</span>)&#123;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] == one)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x[] = &#123;<span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">5</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(search(<span class="number">100</span>, x, <span class="keyword">sizeof</span>(x) / <span class="number">4</span>))</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;100이 배열 x에 포함되어 있다.&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;100이 배열 x에 포함되어 있지 않다.&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> c[] = &#123;<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(search(<span class="string">&#x27;e&#x27;</span>, c, <span class="number">5</span>))</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;e가 배열 x에 포함되어 있다.&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;e가 배열 x에 포함되어 있지 않다.&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span>이 배열 x에 포함되어 있다.</span><br><span class="line">e가 배열 x에 포함되어 있다.</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Generalization-of-Class"><a href="#Generalization-of-Class" class="headerlink" title="Generalization of Class"></a>Generalization of Class</h2><ul><li>선언 : <code>template&lt;class T&gt;</code><ul><li>class의 정의 앞에 선언</li><li>선언부, 구현부 - 멤버 함수 앞 선언</li><li><code>T class&lt;T&gt;::function(T param);</code></li></ul></li><li>일반화할 변수만 <code>T</code>로 선언</li></ul><blockquote><p>generic.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Point(<span class="keyword">int</span> x = <span class="number">0</span>, <span class="keyword">int</span> y = <span class="number">0</span>):x(x), y(y)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;(&#x27;</span> &lt;&lt; x &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; y &lt;&lt; <span class="string">&#x27;)&#x27;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">MyStack</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> tos;</span><br><span class="line">    T data[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MyStack();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(T element)</span></span>;</span><br><span class="line">    <span class="function">T <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MyStack&lt;<span class="keyword">int</span> *&gt; ipStack;</span><br><span class="line">    <span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        p[i] = i * <span class="number">10</span>;</span><br><span class="line">    ipStack.push(p);</span><br><span class="line">    <span class="keyword">int</span> *q = ipStack.pop();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; q[i] &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">delete</span> [] p;</span><br><span class="line"></span><br><span class="line">    MyStack&lt;Point&gt; pointStack;</span><br><span class="line">    Point a(2, 3), b;</span><br><span class="line">    pointStack.push(a);</span><br><span class="line">    b = pointStack.pop();</span><br><span class="line">    b.show();</span><br><span class="line"></span><br><span class="line">    MyStack&lt;Point *&gt; pStack;</span><br><span class="line">    pStack.push(<span class="keyword">new</span> Point(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line">    Point *pPoint = pStack.pop();</span><br><span class="line">    pPoint-&gt;show();</span><br><span class="line"></span><br><span class="line">    MyStack&lt;<span class="built_in">string</span>&gt; stringStack;</span><br><span class="line">    <span class="built_in">string</span> s = <span class="string">&quot;C++&quot;</span>;</span><br><span class="line">    stringStack.push(s);</span><br><span class="line">    stringStack.push(<span class="string">&quot;Zerohertz&quot;</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; stringStack.pop() &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; stringStack.pop() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">MyStack</span>&lt;T&gt;:</span>:MyStack()&#123;</span><br><span class="line">    tos = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">MyStack</span>&lt;T&gt;:</span>:push(T element)&#123;</span><br><span class="line">    <span class="keyword">if</span>(tos == <span class="number">99</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Stack full&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tos++;</span><br><span class="line">    data[tos] = element;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">MyStack</span>&lt;T&gt;:</span>:pop()&#123;</span><br><span class="line">    T Data;</span><br><span class="line">    <span class="keyword">if</span>(tos == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Stack empty&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Data = data[tos--];</span><br><span class="line">    <span class="keyword">return</span> Data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span><span class="number">10</span><span class="number">20</span></span><br><span class="line">(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line">ZerohertzC++</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>gclass.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="title">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">GClass</span>&#123;</span></span><br><span class="line">    T1 data1;</span><br><span class="line">    T2 data2;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    GClass()&#123;data1 = <span class="number">0</span>; data2 = <span class="number">0</span>;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(T1 a, T2 b)</span></span>&#123;</span><br><span class="line">        data1 = a; data2 = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">(T1 &amp;a, T2 &amp;b)</span></span>&#123;</span><br><span class="line">        a = data1; b = data2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">double</span> b;</span><br><span class="line">    GClass&lt;<span class="keyword">int</span>, <span class="keyword">double</span>&gt; x;</span><br><span class="line">    x.<span class="built_in">set</span>(<span class="number">2</span>, <span class="number">0.5</span>);</span><br><span class="line">    x.get(a, b);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;\tb = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">float</span> d;</span><br><span class="line">    GClass&lt;<span class="keyword">char</span>, <span class="keyword">float</span>&gt; y;</span><br><span class="line">    y.<span class="built_in">set</span>(<span class="string">&#x27;m&#x27;</span>, <span class="number">12.5</span>);</span><br><span class="line">    y.get(c, d);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; <span class="string">&quot;\td = &quot;</span> &lt;&lt; d &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">2</span>b = <span class="number">0.5</span></span><br><span class="line">c = md = <span class="number">12.5</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Quiz-8"><a href="#Quiz-8" class="headerlink" title="Quiz"></a>Quiz</h2><blockquote><p>quiz.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span>&#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> width, height;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Shape(<span class="built_in">string</span> n = <span class="string">&quot;&quot;</span>, <span class="keyword">int</span> w = <span class="number">0</span>, <span class="keyword">int</span> h = <span class="number">0</span>)&#123;name = n; width = w; height = h;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> name;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Oval</span> :</span> <span class="keyword">public</span> Shape&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Oval(<span class="built_in">string</span> n = <span class="string">&quot;&quot;</span>, <span class="keyword">int</span> w = <span class="number">0</span>, <span class="keyword">int</span> h = <span class="number">0</span>):Shape(n, w, h)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">3.14</span> * width * height;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span> :</span> <span class="keyword">public</span> Shape&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Rect(<span class="built_in">string</span> n = <span class="string">&quot;&quot;</span>, <span class="keyword">int</span> w = <span class="number">0</span>, <span class="keyword">int</span> h = <span class="number">0</span>):Shape(n, w, h)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> width * height;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangular</span> :</span> <span class="keyword">public</span> Shape&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Triangular(<span class="built_in">string</span> n = <span class="string">&quot;&quot;</span>, <span class="keyword">int</span> w = <span class="number">0</span>, <span class="keyword">int</span> h = <span class="number">0</span>):Shape(n, w, h)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> width * height / <span class="number">2</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Shape *p[<span class="number">3</span>];</span><br><span class="line">    p[<span class="number">0</span>] = <span class="keyword">new</span> Oval(<span class="string">&quot;빈대떡&quot;</span>, <span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    p[<span class="number">1</span>] = <span class="keyword">new</span> Rect(<span class="string">&quot;찰떡&quot;</span>, <span class="number">30</span>, <span class="number">40</span>);</span><br><span class="line">    p[<span class="number">2</span>] = <span class="keyword">new</span> Triangular(<span class="string">&quot;토스트&quot;</span>, <span class="number">30</span>, <span class="number">40</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; p[i]-&gt;getName() &lt;&lt; <span class="string">&quot; 넓이는 &quot;</span> &lt;&lt; p[i]-&gt;getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) <span class="keyword">delete</span> p[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">빈대떡 넓이는 <span class="number">628</span></span><br><span class="line">찰떡 넓이는 <span class="number">1200</span></span><br><span class="line">토스트 넓이는 <span class="number">600</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><hr><h1 id="Day-14"><a href="#Day-14" class="headerlink" title="Day 14"></a>Day 14</h1><h2 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h2><ul><li>STL(Standard Template Library)<ul><li>표준 템플릿 라이브러리</li><li>많은 제네릭 클래스와 제네릭 함수 포함</li></ul></li><li>STL의 구성<ul><li>컨테이너 : 템플릿 클래스<ul><li>데이터를 담아두는 자료 구조를 표현한 클래스</li><li>리스트, 큐, 스택, 맵, 셋, 벡터</li></ul></li><li>iterator : 컨테이너 원소에 대한 포인터<ul><li>컨테이너의 원소들을 순회하면서 접근하기 위해 만들어진 컨테이너 원소에 대한 포인터</li></ul></li><li>알고리즘 : 템플릿 함수<ul><li>컨테이너 원소에 대한 복사, 검색, 삭제, 정렬 등의 기능을 구현한 템플릿 함수</li><li>컨테이너의 멤버 함수 아님</li></ul></li></ul></li></ul><blockquote><p>STL 컨테이너의 종류</p></blockquote><table><thead><tr><th align="center">컨테이너 클래스</th><th align="center">설명</th><th align="center">헤더 파일</th></tr></thead><tbody><tr><td align="center">vector</td><td align="center">동적 크기의 배열을 일반화한 클래스</td><td align="center"><code>&lt;vector&gt;</code></td></tr><tr><td align="center">deque</td><td align="center">앞뒤 모두 입력 가능한 큐 클래스</td><td align="center"><code>&lt;deque&gt;</code></td></tr><tr><td align="center">list</td><td align="center">빠른 삽입/삭제 가능한 리스트 클래스</td><td align="center"><code>&lt;list&gt;</code></td></tr><tr><td align="center">set</td><td align="center">정렬된 순서로 값을 저장하는 집합 클래스, 값은 유일</td><td align="center"><code>&lt;set&gt;</code></td></tr><tr><td align="center">map</td><td align="center">(key, value)쌍으로 값을 저장하는 맵 클래스</td><td align="center"><code>&lt;map&gt;</code></td></tr><tr><td align="center">stack</td><td align="center">스택을 일반화한 클래스</td><td align="center"><code>&lt;stack&gt;</code></td></tr><tr><td align="center">queue</td><td align="center">큐를 일반화한 클래스</td><td align="center"><code>&lt;queue&gt;</code></td></tr></tbody></table><blockquote><p>STL iterator의 종류</p></blockquote><table><thead><tr><th align="center">iterator의 종류</th><th align="center">iterator에 <code>++</code> 연산 후 방향</th><th align="center">read/write</th></tr></thead><tbody><tr><td align="center">iterator</td><td align="center">다음 원소로 전진</td><td align="center">read/write</td></tr><tr><td align="center">const_iterator</td><td align="center">다음 원소로 전진</td><td align="center">read</td></tr><tr><td align="center">reverse_iterator</td><td align="center">지난 원소로 후진</td><td align="center">read/write</td></tr><tr><td align="center">const_reverse_iterator</td><td align="center">지난 원소로 후진</td><td align="center">read</td></tr></tbody></table><blockquote><p>STL 알고리즘 함수들</p></blockquote><ul><li>copy</li><li>merge</li><li>random</li><li>rotate</li><li>equal</li><li>min</li><li>remove</li><li>search</li><li>find</li><li>move</li><li>replace</li><li>sort</li><li>max</li><li>partition</li><li>reverse</li><li>swap</li></ul><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><ul><li>가변 길이 배열을 구현한 <code>Generic</code> 클래스</li><li>원소의 저장, 삭제, 검색 등 다양한 멤버 함수 지원</li><li>벡터에 저장된 원소는 인덱스로 접근 가능</li></ul><blockquote><p>vector.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line">    v.push_back(<span class="number">1</span>);</span><br><span class="line">    v.push_back(<span class="number">2</span>);</span><br><span class="line">    v.push_back(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; v[i] &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    v[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> n = v[<span class="number">2</span>];</span><br><span class="line">    v.at(<span class="number">2</span>) = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; v[i] &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="number">2</span><span class="number">3</span></span><br><span class="line"><span class="number">10</span><span class="number">2</span><span class="number">5</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h2><ul><li>반복자라고도 부름</li><li><code>*</code>, <code>++</code> 연산자 사용 가능</li><li>컨테이너의 원소를 가리키는 포인터</li></ul><blockquote><p>iterator.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;5개의 정수를 입력하시오.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        v.push_back(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort(v.begin(), v.end()); <span class="comment">// sort(v.begin() + a, v.begin() + b) -&gt; a에서 b - 1까지</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(it = v.begin(); it != v.end(); it++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>개의 정수를 입력하시오.</span><br><span class="line"><span class="number">30</span> <span class="number">-7</span> <span class="number">250</span> <span class="number">6</span> <span class="number">120</span></span><br><span class="line"><span class="number">-7</span><span class="number">6</span><span class="number">30</span><span class="number">120</span><span class="number">250</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><ul><li>탐색(<code>find</code>) : 컨테이너 안에서 특정한 자료를 찾음</li><li>정렬(<code>sort</code>) : 자료들을 크기 순으로 정렬<ul><li><code>param1</code> : 정렬을 시작한 원소의 주소</li><li><code>param2</code> : 소팅 범위의 마지막 원소 다음 주소</li></ul></li><li>반전(<code>reverse</code>) : 자료들의 순서 역순</li><li>삭제(<code>remove</code>) : 조건이 만족되는 자료 삭제</li><li>변환(<code>transform</code>) : 컨테이너 요소들을 사용자가 제공하는 변환 함수에 따라 변환</li></ul><blockquote><p>algorithm.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> radius;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Circle(<span class="keyword">int</span> radius = <span class="number">1</span>, <span class="built_in">string</span> name = <span class="string">&quot;&quot;</span>):radius(radius), name(name)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">3.14</span> * radius * radius;&#125;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> name;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(Circle b);</span><br><span class="line">    <span class="keyword">friend</span> ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;os, <span class="built_in">vector</span>&lt;Circle&gt; &amp;b);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(<span class="built_in">vector</span>&lt;Circle&gt; vec)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Circle&gt; v;</span><br><span class="line">    v.push_back(Circle(<span class="number">2</span>, <span class="string">&quot;waffle&quot;</span>));</span><br><span class="line">    v.push_back(Circle(<span class="number">3</span>, <span class="string">&quot;pizza&quot;</span>));</span><br><span class="line">    v.push_back(Circle(<span class="number">1</span>, <span class="string">&quot;donut&quot;</span>));</span><br><span class="line">    v.push_back(Circle(<span class="number">5</span>, <span class="string">&quot;pizzaLarge&quot;</span>));</span><br><span class="line">    printVector(v);</span><br><span class="line">    <span class="comment">// int it = v.size() - 1;</span></span><br><span class="line">    sort(v.begin(), v.end()); <span class="comment">// sort(&amp;v[0], &amp;v[it]);</span></span><br><span class="line">    printVector(v);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">&quot;프렌드함수 operator&lt;&lt;로 출력하는 경우&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> Circle::<span class="keyword">operator</span>&lt;(Circle b)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;radius &lt; b.radius)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;os, <span class="built_in">vector</span>&lt;Circle&gt; &amp;b)&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Circle&gt;::iterator it;</span><br><span class="line">    os &lt;&lt; <span class="string">&quot;모든 원소를 출력한다.&gt;&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(it = b.begin(); it != b.end(); it++)</span><br><span class="line">        os &lt;&lt; it-&gt;getName() &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">    os &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(<span class="built_in">vector</span>&lt;Circle&gt; vec)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;모든 원소를 출력한다.&gt;&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it = vec.begin(); it != vec.end(); it++) <span class="comment">// auto는 자동형변환</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; it-&gt;getName() &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Output</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">모든 원소를 출력한다.&gt;&gt;waffle   pizza   donut   pizzaLarge</span><br><span class="line">모든 원소를 출력한다.&gt;&gt;donut    waffle  pizza   pizzaLarge</span><br><span class="line"></span><br><span class="line">프렌드함수 <span class="keyword">operator</span>&lt;&lt;로 출력하는 경우</span><br><span class="line">모든 원소를 출력한다.&gt;&gt;donut    waffle  pizza   pizzaLarge</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/c-c/">C, C++</category>
      
      <category domain="https://zerohertz.github.io/categories/c-c/basic/">Basic</category>
      
      
      <category domain="https://zerohertz.github.io/tags/c-c/">C, C++</category>
      
      
      <comments>https://zerohertz.github.io/computer-programming/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Selection and Iteration</title>
      <link>https://zerohertz.github.io/selection-and-iteration/</link>
      <guid>https://zerohertz.github.io/selection-and-iteration/</guid>
      <pubDate>Thu, 02 Jul 2020 06:30:43 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;제어문&quot;&gt;&lt;a href=&quot;#제어문&quot; class=&quot;headerlink&quot; title=&quot;제어문&quot;&gt;&lt;/a&gt;제어문&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;제어문(Control statement)을 사용하여 조건에 의해 문장들의 실행 순서 변경&lt;ul&gt;
&lt;li&gt;조건문 : 조건에 따라서 여러 개의 실행 경로 가운데 하나를 선택&lt;ul&gt;
&lt;li&gt;&lt;code&gt;if-else&lt;/code&gt; 문장&lt;/li&gt;
&lt;li&gt;&lt;code&gt;switch&lt;/code&gt; 문장&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;반복문 : 조건이 유지되는 한, 혹은 정해진 횟수만큼 처리를 되풀이하는 문장&lt;ul&gt;
&lt;li&gt;&lt;code&gt;for&lt;/code&gt; 문장&lt;/li&gt;
&lt;li&gt;&lt;code&gt;while&lt;/code&gt; 문장&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="제어문"><a href="#제어문" class="headerlink" title="제어문"></a>제어문</h1><ul><li>제어문(Control statement)을 사용하여 조건에 의해 문장들의 실행 순서 변경<ul><li>조건문 : 조건에 따라서 여러 개의 실행 경로 가운데 하나를 선택<ul><li><code>if-else</code> 문장</li><li><code>switch</code> 문장</li></ul></li><li>반복문 : 조건이 유지되는 한, 혹은 정해진 횟수만큼 처리를 되풀이하는 문장<ul><li><code>for</code> 문장</li><li><code>while</code> 문장</li></ul></li></ul></li></ul><a id="more"></a><hr><h1 id="조건문"><a href="#조건문" class="headerlink" title="조건문"></a>조건문</h1><h2 id="if문"><a href="#if문" class="headerlink" title="if문"></a>if문</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(조건식<span class="number">1</span>)&#123;</span><br><span class="line">    문장<span class="number">1</span>; <span class="comment">// 조건식1이 true이면 실행</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(조건식<span class="number">2</span>)&#123;</span><br><span class="line">    문장<span class="number">2</span>; <span class="comment">// 조건식1이 false이고 조건식2가 true이면 실행</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    문장<span class="number">3</span>; <span class="comment">// 조건식1과 조건식2가 false이면 실행</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>&#123;&#125;</code>로 묶인 문장 그룹핑을 복합문(Compound statement) 또는 블록(Block)이라고 함<ul><li>하나의 작업으로 분류될 수 있는 문장들을 묶는데 사용</li><li>단일문이 들어갈 수 있는 곳이면 어디나 단일문 대신 넣을 수 있음</li></ul></li></ul><hr><h1 id="반복문"><a href="#반복문" class="headerlink" title="반복문"></a>반복문</h1><ul><li>while문 : 조건이 만족되면 반복을 계속하는 구조, 미리 반복 횟수를 알 수 없음</li><li>for문 : 정해진 횟수만큼 반복</li></ul><h2 id="while문"><a href="#while문" class="headerlink" title="while문"></a>while문</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(조건식)&#123;</span><br><span class="line">    반복문장</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>무한 루프 : <code>while(true)</code></li></ul><h2 id="for문"><a href="#for문" class="headerlink" title="for문"></a>for문</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(초기식 ; 조건식 ; 증감식)&#123;</span><br><span class="line">    반복문장</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>무한 루프 : <code>for( ; ; )</code></li></ul><hr><h1 id="break문과-continue문"><a href="#break문과-continue문" class="headerlink" title="break문과 continue문"></a>break문과 continue문</h1><ul><li>break문 : 반복 루프를 벗어나기 위하여 사용<ul><li>반복 루프 안에서 실행되면 반복 루프는 즉시 중단되고 반복 루프 다음에 있는 문장 실행</li></ul></li><li>continue문 : 현재 수행하고 있는 반복 과정의 나머지를 건너뛰고 다음 반복 과정을 강제적 실행<ul><li>반복 루프 안에서 실행되면 continue문 다음에 있는 후속 코드들은 실행되지 않고 건너뜀</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://zerohertz.github.io/categories/c-c/">C, C++</category>
      
      <category domain="https://zerohertz.github.io/categories/c-c/basic/">Basic</category>
      
      
      <category domain="https://zerohertz.github.io/tags/c-c/">C, C++</category>
      
      
      <comments>https://zerohertz.github.io/selection-and-iteration/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
